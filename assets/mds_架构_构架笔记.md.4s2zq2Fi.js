import{_ as l,c as i,o as a,U as u}from"./chunks/framework.pR8v3qv_.js";const q=JSON.parse('{"title":"构架笔记","description":"","frontmatter":{"urlname":"architect","title":"构架笔记","updated":"2024-01-16 15:07:40","date":"2024-01-16 15:04:15","status":"已发布","catalog":["架构"]},"headers":[],"relativePath":"mds/架构/构架笔记.md","filePath":"mds/架构/构架笔记.md"}'),e={name:"mds/架构/构架笔记.md"},r=u('<h1 id="构架笔记" tabindex="-1">构架笔记 <a class="header-anchor" href="#构架笔记" aria-label="Permalink to &quot;构架笔记&quot;">​</a></h1><h2 id="什么是架构师" tabindex="-1">什么是架构师 <a class="header-anchor" href="#什么是架构师" aria-label="Permalink to &quot;什么是架构师&quot;">​</a></h2><h3 id="英文-architect-源于建筑学-在软件工程当中的架构师和建筑工程当中建筑师有很多共性-都是负责项目宏观的架构设计和整体把控-在软件工程领域中就是软件项目的总体设计师负责人" tabindex="-1">英文 Architect 源于建筑学，在软件工程当中的架构师和建筑工程当中建筑师有很多共性，都是负责项目宏观的架构设计和整体把控；在软件工程领域中就是软件项目的总体设计师负责人 <a class="header-anchor" href="#英文-architect-源于建筑学-在软件工程当中的架构师和建筑工程当中建筑师有很多共性-都是负责项目宏观的架构设计和整体把控-在软件工程领域中就是软件项目的总体设计师负责人" aria-label="Permalink to &quot;英文 Architect 源于建筑学，在软件工程当中的架构师和建筑工程当中建筑师有很多共性，都是负责项目宏观的架构设计和整体把控；在软件工程领域中就是软件项目的总体设计师负责人&quot;">​</a></h3><h3 id="对于大部分程序员来说-架构师算是职业最终目标" tabindex="-1">对于大部分程序员来说，架构师算是职业最终目标 <a class="header-anchor" href="#对于大部分程序员来说-架构师算是职业最终目标" aria-label="Permalink to &quot;对于大部分程序员来说，架构师算是职业最终目标&quot;">​</a></h3><h3 id="互联网行业常⻅的架构师岗位" tabindex="-1">互联网行业常⻅的架构师岗位 <a class="header-anchor" href="#互联网行业常⻅的架构师岗位" aria-label="Permalink to &quot;互联网行业常⻅的架构师岗位&quot;">​</a></h3><ul><li><p>解决方案架构师：技术选型+难点攻克+沟通管理</p><ul><li>为特定的解决方案提供一个一栈式的架构，深入理解该行业的商业模式，能够把握行业的市场和技术发展趋势，推动行业产品、解决方案和合作生态的落地</li></ul></li><li><p>大数据架构师：技术选型+难点攻克+沟通管理</p></li><li><p>网络架构师：技术选型+难点攻克+沟通管理</p></li><li><p>应用架构师：技术选型+难点攻克+沟通管理</p></li><li><p>业务架构师：技术选型+难点攻克+沟通管理</p></li><li><p>系统架构师：技术选型+难点攻克+沟通管理</p></li><li><p>总结</p><ul><li>虽然都是架构师【很多共性】但侧重不同, 在互联网公司里，多数架构师也充当技术 Leader 的⻆色 <ul><li>大公司才有很多架构师的细分，公司规模越小，架构师职责越多</li><li>架构师属于【全能型人才】</li></ul></li></ul></li></ul><h3 id="多数人的架构师成⻓方向-应用架构师" tabindex="-1">多数人的架构师成⻓方向-应用架构师 <a class="header-anchor" href="#多数人的架构师成⻓方向-应用架构师" aria-label="Permalink to &quot;多数人的架构师成⻓方向-应用架构师&quot;">​</a></h3><ul><li><p>java架构师、go架构师、C++架构师 等</p></li><li><p>具体做的事情：产品PRD设计-&gt;架构师设计-&gt;方案评审-&gt;-开发-&gt;测试-&gt;上线-&gt;版本迭代更新</p></li></ul><h3 id="如何成为架构师" tabindex="-1">如何成为架构师 <a class="header-anchor" href="#如何成为架构师" aria-label="Permalink to &quot;如何成为架构师&quot;">​</a></h3><ul><li><p>技术</p><ul><li>技术解决项目业务的问题，通过业务驱动技术发展，技术反哺业务 <ul><li>业务起⻜是体现技术最大的价值，才能证明技术的真正价值</li></ul></li></ul></li><li><p>管理</p><ul><li>沟通讲人话，你的业务方不指技术团队，还有产品、运营、客服团队很多 <ul><li>带团队、做好项目</li><li>对上汇报，对下管理</li></ul></li></ul></li><li><p>业务</p><ul><li>识别重点+时间线 <ul><li>每个团队项目不少， 把握主链路</li><li>业务部⻔最需要的技术人员，口碑和技术最好的则这人的方式值得你去学习</li></ul></li></ul></li></ul><h3 id="架构师的技术广度和深度是怎样的" tabindex="-1">架构师的技术广度和深度是怎样的 <a class="header-anchor" href="#架构师的技术广度和深度是怎样的" aria-label="Permalink to &quot;架构师的技术广度和深度是怎样的&quot;">​</a></h3><ul><li><p>技术人员对技术要精还是要广，这个问题没有明确标准的答案</p></li><li><p>精于基础，广于工具，熟于业务，保持持续学习的心态</p></li><li><p>找到最适合自己的技术成⻓路径，持续学习</p></li></ul><h3 id="成⻓学习建议" tabindex="-1">成⻓学习建议 <a class="header-anchor" href="#成⻓学习建议" aria-label="Permalink to &quot;成⻓学习建议&quot;">​</a></h3><ul><li><p>学习做事方法，目标明确，推进项目落地，拿结果</p></li><li><p>沉下心来做事，最终的结果是水到渠成</p></li><li><p>不要给自己设限，学习的过程中要常去思考、总结复盘</p></li><li><p>遇到技术问题不慌乱，有自己标准的排查思路，解决后要能总结复盘</p></li><li><p>专业技能任然是立身之本，努力让自己超过同层级的技术能力，成为那20%</p></li><li><p>不要求整个架构100%掌握，掌握80%，可以理论上认为当下超过80%程序员</p></li></ul><h2 id="中台概念解释-系统复用" tabindex="-1">中台概念解释-系统复用 <a class="header-anchor" href="#中台概念解释-系统复用" aria-label="Permalink to &quot;中台概念解释-系统复用&quot;">​</a></h2><h3 id="快速理解" tabindex="-1">快速理解 <a class="header-anchor" href="#快速理解" aria-label="Permalink to &quot;快速理解&quot;">​</a></h3><ul><li><p>不是单纯技术层面、系统层面，而是企业的组织架构，一种理念</p></li><li><p>接触过的中台概念</p><ul><li>方法复用、类要复用、模块复用</li></ul></li><li><p>系统复用 是更大层级上的复用，即中台</p></li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><p>中台就是以共享系统服务的形式存在，提炼各个业务域的共性需求，打造成组件化的系统</p></li><li><p>核心业务能力以服务的方式进行沉淀，实现服务在不同场景中的业务能力􏰀用</p></li><li><p>以接口的形式提供给前台使用, 最大限度地减少系统建设中的“重复造轮子“的问题</p></li><li><p>比如：业务中台是加快系统研发上线，提高效率，但不是完全不用写任何代码，只是更少而已</p></li></ul><h3 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h3><ul><li><p>业务中台</p><ul><li>业务微服务：商品中心、用户中心、支付中心、物流中心、营销中心等</li></ul></li><li><p>技术中台</p><ul><li>基础设施：基础服务、分布式缓存|队列|文件|调度 <ul><li>运维告警：监控中心、配置中心、DevOps平台</li><li>自动化平台：自动化测试平台</li></ul></li></ul></li><li><p>数据中台</p><ul><li>数仓建设、用户画像、推荐系统、数据大屏...</li></ul></li><li><p>AI中台</p></li></ul><h3 id="案例一-图片来源-阿里云数字政府-政府行业业务中台" tabindex="-1">案例一(图片来源：阿里云数字政府|政府行业业务中台) <a class="header-anchor" href="#案例一-图片来源-阿里云数字政府-政府行业业务中台" aria-label="Permalink to &quot;案例一(图片来源：阿里云数字政府|政府行业业务中台)&quot;">​</a></h3><ul><li></li></ul><h3 id="案例二-电商平台" tabindex="-1">案例二：电商平台 <a class="header-anchor" href="#案例二-电商平台" aria-label="Permalink to &quot;案例二：电商平台&quot;">​</a></h3><ul><li></li></ul><h3 id="是否要建设中台" tabindex="-1">是否要建设中台 <a class="header-anchor" href="#是否要建设中台" aria-label="Permalink to &quot;是否要建设中台&quot;">​</a></h3><ul><li><p>企业IT生态系统庞大大</p></li><li><p>大量低水平重复建设的系统</p></li><li><p>各项业务数据互通</p></li></ul><h3 id="中台建设要求" tabindex="-1">中台建设要求 <a class="header-anchor" href="#中台建设要求" aria-label="Permalink to &quot;中台建设要求&quot;">​</a></h3><ul><li><p>要求对业务流程有一个【标准的抽象】，相关的业务能在这个标准流程里面进行</p></li><li><p>作为中台，需求肯定会很多，系统设计时要让系统可扩展性强</p></li><li><p>对系统设计抽象有比较强的品控，不要因为多人共建让系统代码迅速的腐化膨胀</p></li><li><p>突出关键能力 -【抽象能力】</p></li></ul><h3 id="顶层设计-锻炼架构师的业务抽象能力" tabindex="-1">顶层设计-锻炼架构师的业务抽象能力 <a class="header-anchor" href="#顶层设计-锻炼架构师的业务抽象能力" aria-label="Permalink to &quot;顶层设计-锻炼架构师的业务抽象能力&quot;">​</a></h3><ul><li><p>注意</p><ul><li>架构师的能力之一就是抽象能力 <ul><li>即做顶层设计，有多种方式，一种是自顶向下，另一种是自底向上</li></ul></li></ul></li><li><p>什么是抽象能力</p><ul><li>百科解释：从具体事物抽出、概括出它们共同的方面、本质属性与关系等，而将个别的、非本质的方面、属性与关系舍弃，这种思维过程，称为抽象 <ul><li>说人话</li><li>发现不同事物之间的共同之处，异中求同，同类归并； <ul><li>抽象的层次没有确定性的答案，核心就是满足业务场景的需要</li><li>抽象层次越高，细节越少，普适性越强，把握好边界问题，适度即可</li></ul></li></ul></li></ul></li><li><p>原则</p><ul><li>越顶层越抽象 <ul><li>下层独立上层的存在</li><li>高内聚，低耦合</li></ul></li></ul></li><li><p>代码案例</p><ul><li>JDK代码：java集合、IO流量的顶层类 <ul><li>支付平台API设计</li><li>微信支付、支付宝支付、抖音支付、京东支付 <ul><li>实现代码前，列举下 需要抽象的API</li></ul></li><li>下单 <ul><li>查询订单</li><li>关闭订单</li><li>支付结果通知</li><li>申请退款</li><li>查询退款状态</li><li>退款结果通知</li><li>账单查询 下载账单</li></ul></li></ul></li></ul></li></ul><h2 id="架构师必备技术一图胜千言-架构图" tabindex="-1">架构师必备技术一图胜千言-架构图 <a class="header-anchor" href="#架构师必备技术一图胜千言-架构图" aria-label="Permalink to &quot;架构师必备技术一图胜千言-架构图&quot;">​</a></h2><h3 id="如何画大饼-架构图" tabindex="-1">如何画大饼-架构图 <a class="header-anchor" href="#如何画大饼-架构图" aria-label="Permalink to &quot;如何画大饼-架构图&quot;">​</a></h3><ul><li><p>什么是架构图</p><ul><li>架构图 = 架构 + 图 <ul><li>用图的形式把系统架构展示出来，配上简单的文案</li></ul></li></ul></li><li><p>画架构图是为了什么</p><ul><li>一图胜千言，解决沟通障碍，给不同的【业务方】看懂 <ul><li>业务方很多，不同人看到⻆度不一样，你让【产品经理】看 【物理部署视图】他看得懂?</li></ul></li></ul></li><li><p>画架构图有哪些理论，有没最合适的架构图画法</p><ul><li>架构图本质上是从不同的视⻆，不同的抽象⻆度去看，业界存在多个划分理论 <ul><li>那画架构图肯定有一定的【架构设计理论】主流的有多个 TOGAF、RUP 4+1 等</li><li>没有最合适的的架构图画法，只有最适合的</li><li>脱离实际业务场景的架构图，基本都是不合格的</li></ul></li></ul></li><li><p>如何判断架构图的好和坏?</p><ul><li>业务抽象设计的合理性，是否满足高内聚、低耦合的要求，不能太宽泛，也不能太细粒度 <ul><li>层级划分目标系统边界，自下而上 或 由上而下，一般包括 基础设施、数据层、应用层、用户层四个层次</li><li>纵向分层：上层依赖于下层越底层，越是基础服务；横向并列关系，级别相同</li><li>理清架构图类型、业务要全面、专业术语一致、图形清晰美观、颜色类型划分合理</li><li>最重要是：你的业务方能满意+看懂!!!</li></ul></li></ul></li><li><p>不同架构图应该使用哪种方法来画?</p><ul><li>可以用的表示法和工具很多，没有太多的限制，把握对应的视图关注点才是关键 <ul><li>Xmind、EdrawMax、PPT、PowerDesigner <ul><li>OmniGraffle、Visio、Process On</li><li>开始阶段不要陷入过度设计中，没那么多需求不一定要那么多图(你是否有那么多客户)</li></ul></li><li>关于UML</li><li>没有使用标准的架构描述语言，要注明架构图元素的用意(比如方框、形状、边框、线条、颜色等等) <ul><li>使用标准的架构描述语言，只要在图例里添加关键性的架构描述，但是UML不太灵活</li><li>所以可以不用UML构图，但架构图的组成元素，要保证符合一贯理解</li></ul></li></ul></li></ul></li></ul><h3 id="架构理论togaf和初识业务架构图" tabindex="-1">架构理论TOGAF和初识业务架构图 <a class="header-anchor" href="#架构理论togaf和初识业务架构图" aria-label="Permalink to &quot;架构理论TOGAF和初识业务架构图&quot;">​</a></h3><p>(遵循架构设计理论)</p><ul><li><p>画架构图肯定有一定的【架构设计理论】主流的有多个 TOGAF、RUP 4+1 等</p></li><li><p>什么是【 TOGAF】</p><ul><li>全称 The Open Group Architecture Framework 企业架构标准 <ul><li>给企业架构专业人士之间的沟通提供一致性保障，设计上注重灵活性，可用于不同的架构⻛格。</li><li>不同架构视图承载不同的架构设计决策，支持不同的目标和用途</li></ul></li></ul></li><li><p>业务架构：定义业务战略、企业治理、组织架构和关键业务流程。</p><ul><li>是对业务需求的提炼和抽象，使用一套方法论对项目所涉及需求的业务进行业务边界划分 <ul><li>能比较清晰地看到系统的业务全貌，需求分析是否做到位，功能开发是否达到预期目标，都以此为依据</li><li>比如</li><li>开发一个电商网站，理清业务逻辑，比如订单、支付、用户、商品进行划分 <ul><li>不用考虑技术实现、并发量、部署架构等</li><li>业务架构图中尽量不出现技术的字眼，不同架构图的读者是不同的，确保能看懂。</li></ul></li><li>无技术背景人员可参与实现的讨论，向技术人员描述解决方案核心要做什么，必须实现的关键是什么</li><li>也是【老板层面】比较关注的点，常规技术同学是到 应用/数据/技术架构这层比较多</li></ul></li></ul></li></ul><h3 id="秒懂-iaas-paas-saas" tabindex="-1">秒懂-IaaS-PaaS-SaaS <a class="header-anchor" href="#秒懂-iaas-paas-saas" aria-label="Permalink to &quot;秒懂-IaaS-PaaS-SaaS&quot;">​</a></h3><ul><li><p>三种云服务模型, 也称为三层架构</p><ul><li>IaaS 基础设施即服务 Infrastructure as a service <ul><li>虚拟的硬件资源，如虚拟的主机、存储、网络、安全等资源 <ul><li>最熟悉的例子：阿里云ECS主机的带宽、磁盘空间、GPU等</li><li>PaaS 平台即服务 platform as a service</li></ul></li><li>为开发人员提供了一个框架，使他们可以基于它创建自定义应用程序 <ul><li>最熟悉的例子：阿里云OSS、RDB、短信服务、日志服务</li><li>SaaS 软件即服务 software as a service</li></ul></li><li>云应用程序服务，利用互联网向其用户提供应用程序，这些应用程序由第三方供应商管理 <ul><li>公司产品：淘宝、小鹅通、亚⻢逊，CRM(客户关系管理)、HRM(人力资源管理)、SCM(供应链)</li></ul></li></ul></li></ul></li><li><h2 id="它们的区别" tabindex="-1">它们的区别 <a class="header-anchor" href="#它们的区别" aria-label="Permalink to &quot;它们的区别&quot;">​</a></h2></li><li><p>总结</p><ul><li>从Iaas到SaaS的过程，企业的云化的程度也越来越高，内部IT所需要做的事越来越少。 <ul><li>可以这么看，运维同学经常打交道的是IaaS，开发经常打交道的是PaaS，运营和客户经常打交道的是 SaaS</li></ul></li></ul></li></ul><h3 id="当个画家-教你画高大上的业务架构图" tabindex="-1">当个画家-教你画高大上的业务架构图 <a class="header-anchor" href="#当个画家-教你画高大上的业务架构图" aria-label="Permalink to &quot;当个画家-教你画高大上的业务架构图&quot;">​</a></h3><ul><li><p>在画架构图之前，想清楚3个问题，架构图想表达什么?有什么用?给谁看?</p><ul><li>表达是业务系统之间的关系，梳理业务结构 <ul><li>将复杂的业务逻辑简单化，降低理解难度，更方便业务方理解</li><li>给业务方查看，业务相关干系人</li></ul></li></ul></li><li><p>画图三步走</p><ul><li>分层 <ul><li>业务按照层级进行划分，各个层级属于独立的版块 <ul><li>下层为上层提供服务能力支撑</li><li>比如：laaS / PaaS / SaaS</li><li>分模块</li></ul></li><li>同层级中进行小归类 <ul><li>属于平行关系，可以独立存在</li><li>比如：能力开放平台 有运营能力平台、服务总线</li><li>分功能</li></ul></li><li>独立功能划分出来，即业务入口 <ul><li>业务方重点关注的功能点，可以认为是微服务划分</li><li>比如</li><li>能力开放平台 有运营能力平台 里面有 服务管控、SLA承诺、计􏰂服务</li></ul></li></ul></li></ul></li></ul><h3 id="当个画家-教你画高大上的应用架构图" tabindex="-1">当个画家-教你画高大上的应用架构图 <a class="header-anchor" href="#当个画家-教你画高大上的应用架构图" aria-label="Permalink to &quot;当个画家-教你画高大上的应用架构图&quot;">​</a></h3><ul><li>什么是应用架构图 <ul><li>是对整个系统实现的总体架构 , 应用架构和系统架构很大类似 <ul><li>一方面承接业务架构的落地，一方面影响技术选型</li><li>注意:一般应用架构图【不加入太多技术框架和实现】</li><li>作用</li><li>根据业务场景 对系统进分层，指出开发的原则、系统各个层次的应用服务 <ul><li>指导软件的研发，包括不限于制定应用规范、定义接口和数据交互协议，满足功能性需求和非功能性需求</li><li>业务方</li></ul></li><li>研发人员，各层级架构师，各层级技术管理者 <ul><li>分类</li></ul></li><li>多系统应用架构，用来分层次说明不同系统间的业务逻辑关系、系统边界等，比如分布式、微服 务 <ul><li>单系统应用架构，用来分层次说明系统的组成模块和功能点之间的业务逻辑关系，比如单体应用</li><li>常规分层</li></ul></li><li>表示-展现层：负责用户体验 <ul><li>业务-服务层：负责业务逻辑</li><li>数据-访问层：负责数据库存取</li><li>案例</li></ul></li><li></li></ul></li></ul></li></ul><h3 id="细分领域-技术架构图和数据架构图" tabindex="-1">细分领域-技术架构图和数据架构图 <a class="header-anchor" href="#细分领域-技术架构图和数据架构图" aria-label="Permalink to &quot;细分领域-技术架构图和数据架构图&quot;">​</a></h3><ul><li><p>什么是技术架构</p><ul><li>应用架构本身只关心需要哪些应用系统，不关心在整个项目中你需要使用哪些技术 <ul><li>技术架构则是实现应用架构的承接方，识别技术需求，进行技术选型，描述技术之间的关系</li><li>解决的问题包括</li><li>技术层面的分层、开发语言、框架的选择 <ul><li>通信技术、存储技术的选择、非功能性需求的技术选择等</li><li>案例</li></ul></li><li></li></ul></li></ul></li><li><p>什么是数据架构</p><ul><li>描述一个组织逻辑的和物理的数据资产和数据管理资源的结构 <ul><li>从数据视⻆，表达数据从产生到消费应用的全过程</li><li>比如做一个电商实时大屏，数据来源有哪些，经过哪些组件处理，最终存储和应用到哪里</li><li>常规里面不加具体的技术实现，但有时会方便沟通，则加入对应的技术实现</li><li>案例</li><li></li></ul></li></ul></li></ul><h3 id="业务-应用-技术-数据架构图总结回顾" tabindex="-1">业务-应用-技术-数据架构图总结回顾 <a class="header-anchor" href="#业务-应用-技术-数据架构图总结回顾" aria-label="Permalink to &quot;业务-应用-技术-数据架构图总结回顾&quot;">​</a></h3><ul><li><p>重点：业务架构是战略，应用架构是战术，技术和数据架构是装备</p></li><li><p>业务架构</p><ul><li>表达业务是如何开展的，服务于业务目标，通过描绘业务上下层关系，简单的业务视图降低业务系统的复杂</li></ul></li><li><p>应用架构</p><ul><li>是对整个系统实现的总体架构，应用架构和系统架构很大类似 <ul><li>一方面承接业务架构的落地，一方面影响技术选型</li><li>注意：一般应用架构图【不加入太多技术框架和实现】</li></ul></li></ul></li><li><p>技术架构</p><ul><li>应用架构本身只关心需要哪些应用系统，不关心在整个项目中你需要使用哪些技术 <ul><li>技术架构则是实现应用架构的承接方，识别技术需求，进行技术选型，描述技术之间的关系</li><li>解决的问题包括</li><li>技术层面的分层、开发语言、框架的选择 <ul><li>通信技术、存储技术的选择、非功能性需求的技术选择等</li></ul></li></ul></li></ul></li><li><p>数据架构</p><ul><li>描述一个组织逻辑的和物理的数据资产和数据管理资源的结构 <ul><li>从数据视⻆，表达数据从产生到消费应用的全过程</li></ul></li></ul></li><li><p>方法</p><ul><li>架构图想表达什么？有什么用？给谁看？ <ul><li>画图三步走：分层、分模块、分功能</li></ul></li></ul></li><li><p>如何判断架构图的好和坏？</p><ul><li>业务抽象设计的合理性，是否满足高内聚、低耦合的要求，不能太宽泛，也不能太细粒度 <ul><li>层级划分目标系统边界，自下而上 或 由上而下，一般包括 基础设施、数据层、应用层、用户层四个层次</li><li>纵向分层 上层依赖于下层越底层，越是基础服务；横向并列关系，级别相同</li><li>理清架构图类型、业务要全面、专业术语一致、图形清晰美观、颜色类型划分合理</li><li>重要是：你的业务方能满意+看懂!!!</li></ul></li></ul></li></ul><h2 id="分支主题-4" tabindex="-1">分支主题 4 <a class="header-anchor" href="#分支主题-4" aria-label="Permalink to &quot;分支主题 4&quot;">​</a></h2>',48),t=[r];function h(p,o,n,d,s,c){return a(),i("div",null,t)}const P=l(e,[["render",h]]);export{q as __pageData,P as default};

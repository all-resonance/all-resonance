import{_ as l,c as i,o as a,U as e,a3 as t,a4 as r}from"./chunks/framework.x337NUrp.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"后端/短链项目/short-link-project.md","filePath":"后端/短链项目/short-link-project.md"}'),o={name:"后端/短链项目/short-link-project.md"},n=e('<h2 id="业务背景-为啥需要短链" tabindex="-1">业务背景：为啥需要短链? <a class="header-anchor" href="#业务背景-为啥需要短链" aria-label="Permalink to &quot;业务背景：为啥需要短链?&quot;">​</a></h2><ul><li><p>公司电商产品推广、业务活动⻚、广告落地⻚缺少实时【数据反馈和渠道效果分析】</p></li><li><p>老项目业务推广【没人维护，无法做埋点】需要统计效果</p></li><li><p>APP和营销活动发送营销短信链接过⻓，【浪费短信发送费用】</p></li><li><p>SaaS平台盈利</p><ul><li>用户按量付费，根据流量包选择付费购买对应的套餐 <ul><li>不同流量包权益不一样</li><li>每天可以创建的短链次数不一样 <ul><li>流量包使用时间限制、支持流量包叠加</li><li>注册用户每天有一定免费使用次数，但是不能查看数据</li></ul></li></ul></li></ul></li></ul><h2 id="为什么需要学方法论" tabindex="-1">为什么需要学方法论 <a class="header-anchor" href="#为什么需要学方法论" aria-label="Permalink to &quot;为什么需要学方法论&quot;">​</a></h2><h3 id="方法论-通俗来说就是【做事套路-解决问题的方法-手段-途径-工具-】" tabindex="-1">方法论: 通俗来说就是【做事套路，解决问题的方法(手段/途径/工具)】 <a class="header-anchor" href="#方法论-通俗来说就是【做事套路-解决问题的方法-手段-途径-工具-】" aria-label="Permalink to &quot;方法论: 通俗来说就是【做事套路，解决问题的方法(手段/途径/工具)】&quot;">​</a></h3><h3 id="为什么要学方法论-常⻅的有哪些是必备的" tabindex="-1">为什么要学方法论，常⻅的有哪些是必备的 <a class="header-anchor" href="#为什么要学方法论-常⻅的有哪些是必备的" aria-label="Permalink to &quot;为什么要学方法论，常⻅的有哪些是必备的&quot;">​</a></h3><ul><li><p>新业务规划(PEST)</p><ul><li>指的是政治(Political)、经济(Economic)、社会 (Social)和技术(Technological) <ul><li>政治环境主要是看我们的国家现在是否鼓励相关的业务 <ul><li>经济环境又可以分为宏观经济和微观经济，包括居⺠消费 水平、产业结构</li><li>社会环境则是说跟社会的⻛俗习惯是否吻合</li><li>技术环境当然就是说的我们的技术实力(ASML光刻机)</li></ul></li></ul></li></ul></li><li><p>运营推广(AARRR)</p><ul><li>什么是AARRR用户增⻓模型 <ul><li>AARRR是Acquisition、Activation、Retention、Revenue、 Referral 五个单词的缩写，对应用户生命周期中的5个重要环节。 <ul><li>通俗来说就是一个产品从0~1到100的方法论</li><li>指引产品运营在不同的产品运营阶段，思考哪些关键节点，更好各个节点的指标数据</li><li>AARRR详细解释</li></ul></li><li>获取：新用户首单免费/低价(瑞幸、拼多多)、厂商预装(手 机)、买量投放 <ul><li>激活：app推送、短信推送、产品价值激活</li><li>留存：签到、活动短信推送、平台价值提供</li><li>收益：平台广告、电商变现、付费会员、融资、软件服务</li><li>传播：好友助力、分享抽奖、兄弟砍我一刀</li></ul></li></ul></li></ul></li><li><p>SWOT态势分析法</p><ul><li>官方: 用来确定企业自身的竞争优势、劣势、外部市场的机会和威胁，从而将公司的战略与公司内部资源、外部环境有机地结合起来的一种科学的分析方法 <ul><li>4个单词的缩写 优势=strength、劣势=weakness、机会 =opportunity、威胁=threats</li><li>优势和弱势是内部环境的分析，机会和威胁是对于外部环境的分析 <img src="'+t+'" alt="Untitled.png"> - 外部的机会正好是你的优势，赶紧利用起来 <ul><li>外部的机会但是你的劣势，需要改进</li><li>自身具有优势但外部存在威胁，就需要时刻思考、保持警惕</li><li>是威胁又是你的劣势，就规避并消除</li></ul></li></ul></li></ul></li><li><p>团队管理(SMART)</p><ul><li>源于国外管理大师的《管理的实践》 <ul><li>是为了利于员工更加明确高效地工作，更是为了管理者将来对员工实施绩效考核提供了考核目标和考核标准，使考核更加科学化、规范化</li><li>是5个单词的缩写</li><li>Specific: 目标要具体 <ul><li>Measurable: 目标成果要可衡量(量化)</li><li>Attainable: 目标要可实现，避免过高/过低</li><li>Relevant: 与其他目标有一定的相关性</li><li>Time bound: 目标必须有明确的期限</li><li>意义: 在制定工作目标或者任务目标时，考虑一下目标与计划 是不是SMART化的。只有具备SMART化的计划才是具有良好可实施性的，也才能指导保证计划得以实现</li></ul></li></ul></li></ul></li></ul><h2 id="开发规范" tabindex="-1">开发规范 <a class="header-anchor" href="#开发规范" aria-label="Permalink to &quot;开发规范&quot;">​</a></h2><h3 id="开发人员-张三、李四、王五" tabindex="-1">开发人员: 张三、李四、王五 <a class="header-anchor" href="#开发人员-张三、李四、王五" aria-label="Permalink to &quot;开发人员: 张三、李四、王五&quot;">​</a></h3><h3 id="一定要避免单点故障" tabindex="-1">一定要避免单点故障 <a class="header-anchor" href="#一定要避免单点故障" aria-label="Permalink to &quot;一定要避免单点故障&quot;">​</a></h3><ul><li>一个微服务起码两个人熟悉：一个是主程一个是技术leader，推荐是团队里面两个开发人员</li></ul><h3 id="n方库说明" tabindex="-1">N方库说明 <a class="header-anchor" href="#n方库说明" aria-label="Permalink to &quot;N方库说明&quot;">​</a></h3><ul><li><p>一方库: 本工程内部子项目模块依赖的库(jar 包)。</p></li><li><p>二方库: 公司内部发布到中央仓库，可供公司内部其它应用依赖的库 (jar包)。</p></li><li><p>三方库: 公司之外的开源库(jar 包)。</p></li></ul><h3 id="pojo实体类" tabindex="-1">POJO实体类 <a class="header-anchor" href="#pojo实体类" aria-label="Permalink to &quot;POJO实体类&quot;">​</a></h3><ul><li>POJO(Plain Ordinary Java Object): 在手册中，POJO 专指只有 setter / getter / toString的简单类，包括DO/DTO/BO/VO 等，禁止命名成xxxPOJO</li></ul><h3 id="各个层级约束规范" tabindex="-1">各个层级约束规范 <a class="header-anchor" href="#各个层级约束规范" aria-label="Permalink to &quot;各个层级约束规范&quot;">​</a></h3><ul><li>A) Service/DAO层方法命名规约</li></ul><ol><li><p>获取单个对象的方法用get做前缀。</p></li><li><p>获取多个对象的方法用list做前缀，复数形式结尾，如: listObjects。</p></li><li><p>获取统计值的方法用count做前缀。</p></li><li><p>插入的方法用save/insert做前缀。</p></li><li><p>删除的方法用remove/delete做前缀。</p></li><li><p>修改的方法用update做前缀。</p></li></ol><ul><li>B) 领域模型命名规约</li></ul><ol><li><p>数据对象: xxxDO，xxx即为数据表名。</p></li><li><p>一般数据传输对象: xxxDTO，xxx为业务领域相关的名称，项目里面也用VO。</p></li><li><p>展示对象: xxxVO，也就是响应给前端的实体包装类。</p></li><li><p>接收前端json对象请求的命名为XXXRequest</p></li></ol><h3 id="manager分层说明" tabindex="-1">Manager分层说明 <a class="header-anchor" href="#manager分层说明" aria-label="Permalink to &quot;Manager分层说明&quot;">​</a></h3><ul><li>通用业务处理层，它有如下特征 <img src="'+r+'" alt="Untitled.png"> - 对第三方平台封装的层，预处理返回结果及转化异常信息 - 对Service层通用能力的下沉，如缓存方案、中间件通用处理 - 与DAO层交互，对多个DAO的组合复用。</li></ul>',21),u=[n];function h(p,s,c,d,x,_){return a(),i("div",null,u)}const O=l(o,[["render",h]]);export{b as __pageData,O as default};

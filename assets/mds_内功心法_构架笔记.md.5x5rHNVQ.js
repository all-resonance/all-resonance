import{_ as r,c as h,o as i,V as e,m as a,a as t,a4 as o,a5 as l,a6 as n,a7 as d,a8 as s,a9 as c,aa as u,ab as b,ac as q,ad as f,ae as k,af as m,ag as P,ah as x,ai as p,aj as C,ak as g,al as S,am as y,an as F,ao as A,ap as T,aq as I,ar as _,as as D,at as w,au as U,av as O,aw as B,ax as M,ay as E}from"./chunks/framework.6Qbp0VGB.js";const z=JSON.parse('{"title":"构架笔记","description":"什么是架构师英文 Architect 源于建筑学，在软件工程当中的架构师和建筑工程当中建筑师有很多共性，都是负责项目宏观的架构设计和整体把控；在软件工程领域中就是软件项目的总体设计师负责人对于大部分程序员来说，架构师算是职业最终目标互联网行业常⻅的架构师岗位1.1. 解决方案架构师：技术选型+...","frontmatter":{"title":"构架笔记","urlname":"56e2d0f34428683e981667a3bf7e7f47","date":"2024-01-20 16:15:26","updated":"2024-03-14 22:19:45","description":"什么是架构师英文 Architect 源于建筑学，在软件工程当中的架构师和建筑工程当中建筑师有很多共性，都是负责项目宏观的架构设计和整体把控；在软件工程领域中就是软件项目的总体设计师负责人对于大部分程序员来说，架构师算是职业最终目标互联网行业常⻅的架构师岗位1.1. 解决方案架构师：技术选型+..."},"headers":[],"relativePath":"mds/内功心法/构架笔记.md","filePath":"mds/内功心法/构架笔记.md"}'),N={name:"mds/内功心法/构架笔记.md"},v=e('<h1 id="什么是架构师" tabindex="-1">什么是架构师 <a class="header-anchor" href="#什么是架构师" aria-label="Permalink to &quot;什么是架构师&quot;">​</a></h1><h2 id="英文-architect-源于建筑学-在软件工程当中的架构师和建筑工程当中建筑师有很多共性-都是负责项目宏观的架构设计和整体把控-在软件工程领域中就是软件项目的总体设计师负责人" tabindex="-1">英文 Architect 源于建筑学，在软件工程当中的架构师和建筑工程当中建筑师有很多共性，都是负责项目宏观的架构设计和整体把控；在软件工程领域中就是软件项目的总体设计师负责人 <a class="header-anchor" href="#英文-architect-源于建筑学-在软件工程当中的架构师和建筑工程当中建筑师有很多共性-都是负责项目宏观的架构设计和整体把控-在软件工程领域中就是软件项目的总体设计师负责人" aria-label="Permalink to &quot;英文 Architect 源于建筑学，在软件工程当中的架构师和建筑工程当中建筑师有很多共性，都是负责项目宏观的架构设计和整体把控；在软件工程领域中就是软件项目的总体设计师负责人&quot;">​</a></h2><h2 id="对于大部分程序员来说-架构师算是职业最终目标" tabindex="-1">对于大部分程序员来说，架构师算是职业最终目标 <a class="header-anchor" href="#对于大部分程序员来说-架构师算是职业最终目标" aria-label="Permalink to &quot;对于大部分程序员来说，架构师算是职业最终目标&quot;">​</a></h2><h2 id="互联网行业常⻅的架构师岗位" tabindex="-1">互联网行业常⻅的架构师岗位 <a class="header-anchor" href="#互联网行业常⻅的架构师岗位" aria-label="Permalink to &quot;互联网行业常⻅的架构师岗位&quot;">​</a></h2><h3 id="解决方案架构师-技术选型-难点攻克-沟通管理" tabindex="-1">解决方案架构师：技术选型+难点攻克+沟通管理 <a class="header-anchor" href="#解决方案架构师-技术选型-难点攻克-沟通管理" aria-label="Permalink to &quot;解决方案架构师：技术选型+难点攻克+沟通管理&quot;">​</a></h3><h4 id="为特定的解决方案提供一个一栈式的架构-深入理解该行业的商业模式-能够把握行业的市场和技术发展趋势-推动行业产品、解决方案和合作生态的落地" tabindex="-1">为特定的解决方案提供一个一栈式的架构，深入理解该行业的商业模式，能够把握行业的市场和技术发展趋势，推动行业产品、解决方案和合作生态的落地 <a class="header-anchor" href="#为特定的解决方案提供一个一栈式的架构-深入理解该行业的商业模式-能够把握行业的市场和技术发展趋势-推动行业产品、解决方案和合作生态的落地" aria-label="Permalink to &quot;为特定的解决方案提供一个一栈式的架构，深入理解该行业的商业模式，能够把握行业的市场和技术发展趋势，推动行业产品、解决方案和合作生态的落地&quot;">​</a></h4><h3 id="大数据架构师-技术选型-难点攻克-沟通管理" tabindex="-1">大数据架构师：技术选型+难点攻克+沟通管理 <a class="header-anchor" href="#大数据架构师-技术选型-难点攻克-沟通管理" aria-label="Permalink to &quot;大数据架构师：技术选型+难点攻克+沟通管理&quot;">​</a></h3><h3 id="网络架构师-技术选型-难点攻克-沟通管理" tabindex="-1">网络架构师：技术选型+难点攻克+沟通管理 <a class="header-anchor" href="#网络架构师-技术选型-难点攻克-沟通管理" aria-label="Permalink to &quot;网络架构师：技术选型+难点攻克+沟通管理&quot;">​</a></h3><h3 id="应用架构师-技术选型-难点攻克-沟通管理" tabindex="-1">应用架构师：技术选型+难点攻克+沟通管理 <a class="header-anchor" href="#应用架构师-技术选型-难点攻克-沟通管理" aria-label="Permalink to &quot;应用架构师：技术选型+难点攻克+沟通管理&quot;">​</a></h3><h3 id="业务架构师-技术选型-难点攻克-沟通管理" tabindex="-1">业务架构师：技术选型+难点攻克+沟通管理 <a class="header-anchor" href="#业务架构师-技术选型-难点攻克-沟通管理" aria-label="Permalink to &quot;业务架构师：技术选型+难点攻克+沟通管理&quot;">​</a></h3><h3 id="系统架构师-技术选型-难点攻克-沟通管理" tabindex="-1">系统架构师：技术选型+难点攻克+沟通管理 <a class="header-anchor" href="#系统架构师-技术选型-难点攻克-沟通管理" aria-label="Permalink to &quot;系统架构师：技术选型+难点攻克+沟通管理&quot;">​</a></h3><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><h4 id="虽然都是架构师【很多共性】但侧重不同-在互联网公司里-多数架构师也充当技术-leader-的⻆色" tabindex="-1">虽然都是架构师【很多共性】但侧重不同, 在互联网公司里，多数架构师也充当技术 Leader 的⻆色 <a class="header-anchor" href="#虽然都是架构师【很多共性】但侧重不同-在互联网公司里-多数架构师也充当技术-leader-的⻆色" aria-label="Permalink to &quot;虽然都是架构师【很多共性】但侧重不同, 在互联网公司里，多数架构师也充当技术 Leader 的⻆色&quot;">​</a></h4><h4 id="大公司才有很多架构师的细分-公司规模越小-架构师职责越多" tabindex="-1">大公司才有很多架构师的细分，公司规模越小，架构师职责越多 <a class="header-anchor" href="#大公司才有很多架构师的细分-公司规模越小-架构师职责越多" aria-label="Permalink to &quot;大公司才有很多架构师的细分，公司规模越小，架构师职责越多&quot;">​</a></h4><h4 id="架构师属于【全能型人才】" tabindex="-1">架构师属于【全能型人才】 <a class="header-anchor" href="#架构师属于【全能型人才】" aria-label="Permalink to &quot;架构师属于【全能型人才】&quot;">​</a></h4><h2 id="多数人的架构师成⻓方向-应用架构师" tabindex="-1">多数人的架构师成⻓方向-应用架构师 <a class="header-anchor" href="#多数人的架构师成⻓方向-应用架构师" aria-label="Permalink to &quot;多数人的架构师成⻓方向-应用架构师&quot;">​</a></h2><h3 id="java架构师、go架构师、c-架构师-等" tabindex="-1">java架构师、go架构师、C++架构师 等 <a class="header-anchor" href="#java架构师、go架构师、c-架构师-等" aria-label="Permalink to &quot;java架构师、go架构师、C++架构师 等&quot;">​</a></h3><h3 id="具体做的事情-产品prd设计-架构师设计-方案评审-开发-测试-上线-版本迭代更新" tabindex="-1">具体做的事情：产品PRD设计-&gt;架构师设计-&gt;方案评审-&gt;-开发-&gt;测试-&gt;上线-&gt;版本迭代更新 <a class="header-anchor" href="#具体做的事情-产品prd设计-架构师设计-方案评审-开发-测试-上线-版本迭代更新" aria-label="Permalink to &quot;具体做的事情：产品PRD设计-&gt;架构师设计-&gt;方案评审-&gt;-开发-&gt;测试-&gt;上线-&gt;版本迭代更新&quot;">​</a></h3><h2 id="如何成为架构师" tabindex="-1">如何成为架构师 <a class="header-anchor" href="#如何成为架构师" aria-label="Permalink to &quot;如何成为架构师&quot;">​</a></h2><h3 id="技术" tabindex="-1">技术 <a class="header-anchor" href="#技术" aria-label="Permalink to &quot;技术&quot;">​</a></h3><h4 id="技术解决项目业务的问题-通过业务驱动技术发展-技术反哺业务" tabindex="-1">技术解决项目业务的问题，通过业务驱动技术发展，技术反哺业务 <a class="header-anchor" href="#技术解决项目业务的问题-通过业务驱动技术发展-技术反哺业务" aria-label="Permalink to &quot;技术解决项目业务的问题，通过业务驱动技术发展，技术反哺业务&quot;">​</a></h4><h4 id="业务起⻜是体现技术最大的价值-才能证明技术的真正价值" tabindex="-1">业务起⻜是体现技术最大的价值，才能证明技术的真正价值 <a class="header-anchor" href="#业务起⻜是体现技术最大的价值-才能证明技术的真正价值" aria-label="Permalink to &quot;业务起⻜是体现技术最大的价值，才能证明技术的真正价值&quot;">​</a></h4><h3 id="管理" tabindex="-1">管理 <a class="header-anchor" href="#管理" aria-label="Permalink to &quot;管理&quot;">​</a></h3><h4 id="沟通讲人话-你的业务方不指技术团队-还有产品、运营、客服团队很多" tabindex="-1">沟通讲人话，你的业务方不指技术团队，还有产品、运营、客服团队很多 <a class="header-anchor" href="#沟通讲人话-你的业务方不指技术团队-还有产品、运营、客服团队很多" aria-label="Permalink to &quot;沟通讲人话，你的业务方不指技术团队，还有产品、运营、客服团队很多&quot;">​</a></h4><h4 id="带团队、做好项目" tabindex="-1">带团队、做好项目 <a class="header-anchor" href="#带团队、做好项目" aria-label="Permalink to &quot;带团队、做好项目&quot;">​</a></h4><h4 id="对上汇报-对下管理" tabindex="-1">对上汇报，对下管理 <a class="header-anchor" href="#对上汇报-对下管理" aria-label="Permalink to &quot;对上汇报，对下管理&quot;">​</a></h4><h3 id="业务" tabindex="-1">业务 <a class="header-anchor" href="#业务" aria-label="Permalink to &quot;业务&quot;">​</a></h3><h4 id="识别重点-时间线" tabindex="-1">识别重点+时间线 <a class="header-anchor" href="#识别重点-时间线" aria-label="Permalink to &quot;识别重点+时间线&quot;">​</a></h4><h4 id="每个团队项目不少-把握主链路" tabindex="-1">每个团队项目不少， 把握主链路 <a class="header-anchor" href="#每个团队项目不少-把握主链路" aria-label="Permalink to &quot;每个团队项目不少， 把握主链路&quot;">​</a></h4><h4 id="业务部⻔最需要的技术人员-口碑和技术最好的则这人的方式值得你去学习" tabindex="-1">业务部⻔最需要的技术人员，口碑和技术最好的则这人的方式值得你去学习 <a class="header-anchor" href="#业务部⻔最需要的技术人员-口碑和技术最好的则这人的方式值得你去学习" aria-label="Permalink to &quot;业务部⻔最需要的技术人员，口碑和技术最好的则这人的方式值得你去学习&quot;">​</a></h4><h2 id="架构师的技术广度和深度是怎样的" tabindex="-1">架构师的技术广度和深度是怎样的 <a class="header-anchor" href="#架构师的技术广度和深度是怎样的" aria-label="Permalink to &quot;架构师的技术广度和深度是怎样的&quot;">​</a></h2><h3 id="技术人员对技术要精还是要广-这个问题没有明确标准的答案" tabindex="-1">技术人员对技术要精还是要广，这个问题没有明确标准的答案 <a class="header-anchor" href="#技术人员对技术要精还是要广-这个问题没有明确标准的答案" aria-label="Permalink to &quot;技术人员对技术要精还是要广，这个问题没有明确标准的答案&quot;">​</a></h3><h3 id="精于基础-广于工具-熟于业务-保持持续学习的心态" tabindex="-1">精于基础，广于工具，熟于业务，保持持续学习的心态 <a class="header-anchor" href="#精于基础-广于工具-熟于业务-保持持续学习的心态" aria-label="Permalink to &quot;精于基础，广于工具，熟于业务，保持持续学习的心态&quot;">​</a></h3><h3 id="找到最适合自己的技术成⻓路径-持续学习" tabindex="-1">找到最适合自己的技术成⻓路径，持续学习 <a class="header-anchor" href="#找到最适合自己的技术成⻓路径-持续学习" aria-label="Permalink to &quot;找到最适合自己的技术成⻓路径，持续学习&quot;">​</a></h3><h2 id="成⻓学习建议" tabindex="-1">成⻓学习建议 <a class="header-anchor" href="#成⻓学习建议" aria-label="Permalink to &quot;成⻓学习建议&quot;">​</a></h2><h3 id="学习做事方法-目标明确-推进项目落地-拿结果" tabindex="-1">学习做事方法，目标明确，推进项目落地，拿结果 <a class="header-anchor" href="#学习做事方法-目标明确-推进项目落地-拿结果" aria-label="Permalink to &quot;学习做事方法，目标明确，推进项目落地，拿结果&quot;">​</a></h3><h3 id="沉下心来做事-最终的结果是水到渠成" tabindex="-1">沉下心来做事，最终的结果是水到渠成 <a class="header-anchor" href="#沉下心来做事-最终的结果是水到渠成" aria-label="Permalink to &quot;沉下心来做事，最终的结果是水到渠成&quot;">​</a></h3><h3 id="不要给自己设限-学习的过程中要常去思考、总结复盘" tabindex="-1">不要给自己设限，学习的过程中要常去思考、总结复盘 <a class="header-anchor" href="#不要给自己设限-学习的过程中要常去思考、总结复盘" aria-label="Permalink to &quot;不要给自己设限，学习的过程中要常去思考、总结复盘&quot;">​</a></h3><h3 id="遇到技术问题不慌乱-有自己标准的排查思路-解决后要能总结复盘" tabindex="-1">遇到技术问题不慌乱，有自己标准的排查思路，解决后要能总结复盘 <a class="header-anchor" href="#遇到技术问题不慌乱-有自己标准的排查思路-解决后要能总结复盘" aria-label="Permalink to &quot;遇到技术问题不慌乱，有自己标准的排查思路，解决后要能总结复盘&quot;">​</a></h3><h3 id="专业技能任然是立身之本-努力让自己超过同层级的技术能力-成为那20" tabindex="-1">专业技能任然是立身之本，努力让自己超过同层级的技术能力，成为那20% <a class="header-anchor" href="#专业技能任然是立身之本-努力让自己超过同层级的技术能力-成为那20" aria-label="Permalink to &quot;专业技能任然是立身之本，努力让自己超过同层级的技术能力，成为那20%&quot;">​</a></h3><h3 id="不要求整个架构100-掌握-掌握80-可以理论上认为当下超过80-程序员" tabindex="-1">不要求整个架构100%掌握，掌握80%，可以理论上认为当下超过80%程序员 <a class="header-anchor" href="#不要求整个架构100-掌握-掌握80-可以理论上认为当下超过80-程序员" aria-label="Permalink to &quot;不要求整个架构100%掌握，掌握80%，可以理论上认为当下超过80%程序员&quot;">​</a></h3><h1 id="中台概念解释-系统复用" tabindex="-1">中台概念解释-系统复用 <a class="header-anchor" href="#中台概念解释-系统复用" aria-label="Permalink to &quot;中台概念解释-系统复用&quot;">​</a></h1><h2 id="快速理解" tabindex="-1">快速理解 <a class="header-anchor" href="#快速理解" aria-label="Permalink to &quot;快速理解&quot;">​</a></h2><h3 id="不是单纯技术层面、系统层面-而是企业的组织架构-一种理念" tabindex="-1">不是单纯技术层面、系统层面，而是企业的组织架构，一种理念 <a class="header-anchor" href="#不是单纯技术层面、系统层面-而是企业的组织架构-一种理念" aria-label="Permalink to &quot;不是单纯技术层面、系统层面，而是企业的组织架构，一种理念&quot;">​</a></h3><h3 id="接触过的中台概念" tabindex="-1">接触过的中台概念 <a class="header-anchor" href="#接触过的中台概念" aria-label="Permalink to &quot;接触过的中台概念&quot;">​</a></h3><h4 id="方法复用、类要复用、模块复用" tabindex="-1">方法复用、类要复用、模块复用 <a class="header-anchor" href="#方法复用、类要复用、模块复用" aria-label="Permalink to &quot;方法复用、类要复用、模块复用&quot;">​</a></h4><h3 id="系统复用-是更大层级上的复用-即中台" tabindex="-1">系统复用 是更大层级上的复用，即中台 <a class="header-anchor" href="#系统复用-是更大层级上的复用-即中台" aria-label="Permalink to &quot;系统复用 是更大层级上的复用，即中台&quot;">​</a></h3><h2 id="总结-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h2><h3 id="中台就是以共享系统服务的形式存在-提炼各个业务域的共性需求-打造成组件化的系统" tabindex="-1">中台就是以共享系统服务的形式存在，提炼各个业务域的共性需求，打造成组件化的系统 <a class="header-anchor" href="#中台就是以共享系统服务的形式存在-提炼各个业务域的共性需求-打造成组件化的系统" aria-label="Permalink to &quot;中台就是以共享系统服务的形式存在，提炼各个业务域的共性需求，打造成组件化的系统&quot;">​</a></h3><h3 id="核心业务能力以服务的方式进行沉淀-实现服务在不同场景中的业务能力复用" tabindex="-1">核心业务能力以服务的方式进行沉淀，实现服务在不同场景中的业务能力复用 <a class="header-anchor" href="#核心业务能力以服务的方式进行沉淀-实现服务在不同场景中的业务能力复用" aria-label="Permalink to &quot;核心业务能力以服务的方式进行沉淀，实现服务在不同场景中的业务能力复用&quot;">​</a></h3><h3 id="以接口的形式提供给前台使用-最大限度地减少系统建设中的-重复造轮子-的问题" tabindex="-1">以接口的形式提供给前台使用, 最大限度地减少系统建设中的“重复造轮子“的问题 <a class="header-anchor" href="#以接口的形式提供给前台使用-最大限度地减少系统建设中的-重复造轮子-的问题" aria-label="Permalink to &quot;以接口的形式提供给前台使用, 最大限度地减少系统建设中的“重复造轮子“的问题&quot;">​</a></h3><h3 id="比如-业务中台是加快系统研发上线-提高效率-但不是完全不用写任何代码-只是更少而已" tabindex="-1">比如：业务中台是加快系统研发上线，提高效率，但不是完全不用写任何代码，只是更少而已 <a class="header-anchor" href="#比如-业务中台是加快系统研发上线-提高效率-但不是完全不用写任何代码-只是更少而已" aria-label="Permalink to &quot;比如：业务中台是加快系统研发上线，提高效率，但不是完全不用写任何代码，只是更少而已&quot;">​</a></h3><h2 id="分类" tabindex="-1">分类 <a class="header-anchor" href="#分类" aria-label="Permalink to &quot;分类&quot;">​</a></h2><h3 id="业务中台" tabindex="-1">业务中台 <a class="header-anchor" href="#业务中台" aria-label="Permalink to &quot;业务中台&quot;">​</a></h3><h4 id="业务微服务-商品中心、用户中心、支付中心、物流中心、营销中心等" tabindex="-1">业务微服务：商品中心、用户中心、支付中心、物流中心、营销中心等 <a class="header-anchor" href="#业务微服务-商品中心、用户中心、支付中心、物流中心、营销中心等" aria-label="Permalink to &quot;业务微服务：商品中心、用户中心、支付中心、物流中心、营销中心等&quot;">​</a></h4><h3 id="技术中台" tabindex="-1">技术中台 <a class="header-anchor" href="#技术中台" aria-label="Permalink to &quot;技术中台&quot;">​</a></h3><h4 id="基础设施-基础服务、分布式缓存-队列-文件-调度" tabindex="-1">基础设施：基础服务、分布式缓存|队列|文件|调度 <a class="header-anchor" href="#基础设施-基础服务、分布式缓存-队列-文件-调度" aria-label="Permalink to &quot;基础设施：基础服务、分布式缓存|队列|文件|调度&quot;">​</a></h4><h4 id="运维告警-监控中心、配置中心、devops平台" tabindex="-1">运维告警：监控中心、配置中心、DevOps平台 <a class="header-anchor" href="#运维告警-监控中心、配置中心、devops平台" aria-label="Permalink to &quot;运维告警：监控中心、配置中心、DevOps平台&quot;">​</a></h4><h4 id="自动化平台-自动化测试平台" tabindex="-1">自动化平台：自动化测试平台 <a class="header-anchor" href="#自动化平台-自动化测试平台" aria-label="Permalink to &quot;自动化平台：自动化测试平台&quot;">​</a></h4><h3 id="数据中台" tabindex="-1">数据中台 <a class="header-anchor" href="#数据中台" aria-label="Permalink to &quot;数据中台&quot;">​</a></h3><h4 id="数仓建设、用户画像、推荐系统、数据大屏" tabindex="-1">数仓建设、用户画像、推荐系统、数据大屏... <a class="header-anchor" href="#数仓建设、用户画像、推荐系统、数据大屏" aria-label="Permalink to &quot;数仓建设、用户画像、推荐系统、数据大屏...&quot;">​</a></h4><h3 id="ai中台" tabindex="-1">AI中台 <a class="header-anchor" href="#ai中台" aria-label="Permalink to &quot;AI中台&quot;">​</a></h3><h2 id="案例一-图片来源-阿里云数字政府-政府行业业务中台" tabindex="-1">案例一(图片来源：阿里云数字政府|政府行业业务中台) <a class="header-anchor" href="#案例一-图片来源-阿里云数字政府-政府行业业务中台" aria-label="Permalink to &quot;案例一(图片来源：阿里云数字政府|政府行业业务中台)&quot;">​</a></h2><p><img src="'+o+'" alt="image.png"></p><h2 id="案例二-电商平台" tabindex="-1">案例二：电商平台 <a class="header-anchor" href="#案例二-电商平台" aria-label="Permalink to &quot;案例二：电商平台&quot;">​</a></h2><p><img src="'+l+'" alt="image.png"></p><h2 id="是否要建设中台" tabindex="-1">是否要建设中台 <a class="header-anchor" href="#是否要建设中台" aria-label="Permalink to &quot;是否要建设中台&quot;">​</a></h2><h3 id="企业it生态系统庞大大" tabindex="-1">企业IT生态系统庞大大 <a class="header-anchor" href="#企业it生态系统庞大大" aria-label="Permalink to &quot;企业IT生态系统庞大大&quot;">​</a></h3><h3 id="大量低水平重复建设的系统" tabindex="-1">大量低水平重复建设的系统 <a class="header-anchor" href="#大量低水平重复建设的系统" aria-label="Permalink to &quot;大量低水平重复建设的系统&quot;">​</a></h3><h3 id="各项业务数据互通" tabindex="-1">各项业务数据互通 <a class="header-anchor" href="#各项业务数据互通" aria-label="Permalink to &quot;各项业务数据互通&quot;">​</a></h3><h2 id="中台建设要求" tabindex="-1">中台建设要求 <a class="header-anchor" href="#中台建设要求" aria-label="Permalink to &quot;中台建设要求&quot;">​</a></h2><h3 id="要求对业务流程有一个【标准的抽象】-相关的业务能在这个标准流程里面进行" tabindex="-1">要求对业务流程有一个【标准的抽象】，相关的业务能在这个标准流程里面进行 <a class="header-anchor" href="#要求对业务流程有一个【标准的抽象】-相关的业务能在这个标准流程里面进行" aria-label="Permalink to &quot;要求对业务流程有一个【标准的抽象】，相关的业务能在这个标准流程里面进行&quot;">​</a></h3><h3 id="作为中台-需求肯定会很多-系统设计时要让系统可扩展性强" tabindex="-1">作为中台，需求肯定会很多，系统设计时要让系统可扩展性强 <a class="header-anchor" href="#作为中台-需求肯定会很多-系统设计时要让系统可扩展性强" aria-label="Permalink to &quot;作为中台，需求肯定会很多，系统设计时要让系统可扩展性强&quot;">​</a></h3><h3 id="对系统设计抽象有比较强的品控-不要因为多人共建让系统代码迅速的腐化膨胀" tabindex="-1">对系统设计抽象有比较强的品控，不要因为多人共建让系统代码迅速的腐化膨胀 <a class="header-anchor" href="#对系统设计抽象有比较强的品控-不要因为多人共建让系统代码迅速的腐化膨胀" aria-label="Permalink to &quot;对系统设计抽象有比较强的品控，不要因为多人共建让系统代码迅速的腐化膨胀&quot;">​</a></h3><h3 id="突出关键能力-【抽象能力】" tabindex="-1">突出关键能力 -【抽象能力】 <a class="header-anchor" href="#突出关键能力-【抽象能力】" aria-label="Permalink to &quot;突出关键能力 -【抽象能力】&quot;">​</a></h3><h2 id="顶层设计-锻炼架构师的业务抽象能力" tabindex="-1">顶层设计-锻炼架构师的业务抽象能力 <a class="header-anchor" href="#顶层设计-锻炼架构师的业务抽象能力" aria-label="Permalink to &quot;顶层设计-锻炼架构师的业务抽象能力&quot;">​</a></h2><h3 id="注意" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h3><h4 id="架构师的能力之一就是抽象能力" tabindex="-1">架构师的能力之一就是抽象能力 <a class="header-anchor" href="#架构师的能力之一就是抽象能力" aria-label="Permalink to &quot;架构师的能力之一就是抽象能力&quot;">​</a></h4><h4 id="即做顶层设计-有多种方式-一种是自顶向下-另一种是自底向上" tabindex="-1">即做顶层设计，有多种方式，一种是自顶向下，另一种是自底向上 <a class="header-anchor" href="#即做顶层设计-有多种方式-一种是自顶向下-另一种是自底向上" aria-label="Permalink to &quot;即做顶层设计，有多种方式，一种是自顶向下，另一种是自底向上&quot;">​</a></h4><h3 id="什么是抽象能力" tabindex="-1">什么是抽象能力 <a class="header-anchor" href="#什么是抽象能力" aria-label="Permalink to &quot;什么是抽象能力&quot;">​</a></h3><h4 id="百科解释-从具体事物抽出、概括出它们共同的方面、本质属性与关系等-而将个别的、非本质的方面、属性与关系舍弃-这种思维过程-称为抽象" tabindex="-1">百科解释：从具体事物抽出、概括出它们共同的方面、本质属性与关系等，而将个别的、非本质的方面、属性与关系舍弃，这种思维过程，称为抽象 <a class="header-anchor" href="#百科解释-从具体事物抽出、概括出它们共同的方面、本质属性与关系等-而将个别的、非本质的方面、属性与关系舍弃-这种思维过程-称为抽象" aria-label="Permalink to &quot;百科解释：从具体事物抽出、概括出它们共同的方面、本质属性与关系等，而将个别的、非本质的方面、属性与关系舍弃，这种思维过程，称为抽象&quot;">​</a></h4><h4 id="说人话" tabindex="-1">说人话 <a class="header-anchor" href="#说人话" aria-label="Permalink to &quot;说人话&quot;">​</a></h4><h5 id="发现不同事物之间的共同之处-异中求同-同类归并" tabindex="-1">发现不同事物之间的共同之处，异中求同，同类归并； <a class="header-anchor" href="#发现不同事物之间的共同之处-异中求同-同类归并" aria-label="Permalink to &quot;发现不同事物之间的共同之处，异中求同，同类归并；&quot;">​</a></h5><h5 id="抽象的层次没有确定性的答案-核心就是满足业务场景的需要" tabindex="-1">抽象的层次没有确定性的答案，核心就是满足业务场景的需要 <a class="header-anchor" href="#抽象的层次没有确定性的答案-核心就是满足业务场景的需要" aria-label="Permalink to &quot;抽象的层次没有确定性的答案，核心就是满足业务场景的需要&quot;">​</a></h5><h5 id="抽象层次越高-细节越少-普适性越强-把握好边界问题-适度即可" tabindex="-1">抽象层次越高，细节越少，普适性越强，把握好边界问题，适度即可 <a class="header-anchor" href="#抽象层次越高-细节越少-普适性越强-把握好边界问题-适度即可" aria-label="Permalink to &quot;抽象层次越高，细节越少，普适性越强，把握好边界问题，适度即可&quot;">​</a></h5><h3 id="原则" tabindex="-1">原则 <a class="header-anchor" href="#原则" aria-label="Permalink to &quot;原则&quot;">​</a></h3><h4 id="越顶层越抽象" tabindex="-1">越顶层越抽象 <a class="header-anchor" href="#越顶层越抽象" aria-label="Permalink to &quot;越顶层越抽象&quot;">​</a></h4><h4 id="下层独立上层的存在" tabindex="-1">下层独立上层的存在 <a class="header-anchor" href="#下层独立上层的存在" aria-label="Permalink to &quot;下层独立上层的存在&quot;">​</a></h4><h4 id="高内聚-低耦合" tabindex="-1">高内聚，低耦合 <a class="header-anchor" href="#高内聚-低耦合" aria-label="Permalink to &quot;高内聚，低耦合&quot;">​</a></h4><h3 id="代码案例" tabindex="-1">代码案例 <a class="header-anchor" href="#代码案例" aria-label="Permalink to &quot;代码案例&quot;">​</a></h3><h4 id="jdk代码-java集合、io流量的顶层类" tabindex="-1">JDK代码：java集合、IO流量的顶层类 <a class="header-anchor" href="#jdk代码-java集合、io流量的顶层类" aria-label="Permalink to &quot;JDK代码：java集合、IO流量的顶层类&quot;">​</a></h4><h4 id="支付平台api设计" tabindex="-1">支付平台API设计 <a class="header-anchor" href="#支付平台api设计" aria-label="Permalink to &quot;支付平台API设计&quot;">​</a></h4><h5 id="微信支付、支付宝支付、抖音支付、京东支付" tabindex="-1">微信支付、支付宝支付、抖音支付、京东支付 <a class="header-anchor" href="#微信支付、支付宝支付、抖音支付、京东支付" aria-label="Permalink to &quot;微信支付、支付宝支付、抖音支付、京东支付&quot;">​</a></h5><h4 id="实现代码前-列举下-需要抽象的api" tabindex="-1">实现代码前，列举下 需要抽象的API <a class="header-anchor" href="#实现代码前-列举下-需要抽象的api" aria-label="Permalink to &quot;实现代码前，列举下 需要抽象的API&quot;">​</a></h4><h5 id="下单" tabindex="-1">下单 <a class="header-anchor" href="#下单" aria-label="Permalink to &quot;下单&quot;">​</a></h5><h5 id="查询订单" tabindex="-1">查询订单 <a class="header-anchor" href="#查询订单" aria-label="Permalink to &quot;查询订单&quot;">​</a></h5><h5 id="关闭订单" tabindex="-1">关闭订单 <a class="header-anchor" href="#关闭订单" aria-label="Permalink to &quot;关闭订单&quot;">​</a></h5><h5 id="支付结果通知" tabindex="-1">支付结果通知 <a class="header-anchor" href="#支付结果通知" aria-label="Permalink to &quot;支付结果通知&quot;">​</a></h5><h5 id="申请退款" tabindex="-1">申请退款 <a class="header-anchor" href="#申请退款" aria-label="Permalink to &quot;申请退款&quot;">​</a></h5><h5 id="查询退款状态" tabindex="-1">查询退款状态 <a class="header-anchor" href="#查询退款状态" aria-label="Permalink to &quot;查询退款状态&quot;">​</a></h5><h5 id="退款结果通知" tabindex="-1">退款结果通知 <a class="header-anchor" href="#退款结果通知" aria-label="Permalink to &quot;退款结果通知&quot;">​</a></h5><h5 id="账单查询-下载账单" tabindex="-1">账单查询 下载账单 <a class="header-anchor" href="#账单查询-下载账单" aria-label="Permalink to &quot;账单查询 下载账单&quot;">​</a></h5><h1 id="架构师必备技术一图胜千言-架构图" tabindex="-1">架构师必备技术一图胜千言-架构图 <a class="header-anchor" href="#架构师必备技术一图胜千言-架构图" aria-label="Permalink to &quot;架构师必备技术一图胜千言-架构图&quot;">​</a></h1><h2 id="如何画大饼-架构图" tabindex="-1">如何画大饼-架构图 <a class="header-anchor" href="#如何画大饼-架构图" aria-label="Permalink to &quot;如何画大饼-架构图&quot;">​</a></h2><h3 id="什么是架构图" tabindex="-1">什么是架构图 <a class="header-anchor" href="#什么是架构图" aria-label="Permalink to &quot;什么是架构图&quot;">​</a></h3><h4 id="架构图-架构-图" tabindex="-1">架构图 = 架构 + 图 <a class="header-anchor" href="#架构图-架构-图" aria-label="Permalink to &quot;架构图 = 架构 + 图&quot;">​</a></h4><h4 id="用图的形式把系统架构展示出来-配上简单的文案" tabindex="-1">用图的形式把系统架构展示出来，配上简单的文案 <a class="header-anchor" href="#用图的形式把系统架构展示出来-配上简单的文案" aria-label="Permalink to &quot;用图的形式把系统架构展示出来，配上简单的文案&quot;">​</a></h4><h3 id="画架构图是为了什么" tabindex="-1">画架构图是为了什么 <a class="header-anchor" href="#画架构图是为了什么" aria-label="Permalink to &quot;画架构图是为了什么&quot;">​</a></h3><h4 id="一图胜千言-解决沟通障碍-给不同的【业务方】看懂" tabindex="-1">一图胜千言，解决沟通障碍，给不同的【业务方】看懂 <a class="header-anchor" href="#一图胜千言-解决沟通障碍-给不同的【业务方】看懂" aria-label="Permalink to &quot;一图胜千言，解决沟通障碍，给不同的【业务方】看懂&quot;">​</a></h4><h4 id="业务方很多-不同人看到⻆度不一样-你让【产品经理】看-【物理部署视图】他看得懂" tabindex="-1">业务方很多，不同人看到⻆度不一样，你让【产品经理】看 【物理部署视图】他看得懂? <a class="header-anchor" href="#业务方很多-不同人看到⻆度不一样-你让【产品经理】看-【物理部署视图】他看得懂" aria-label="Permalink to &quot;业务方很多，不同人看到⻆度不一样，你让【产品经理】看 【物理部署视图】他看得懂?&quot;">​</a></h4><h3 id="画架构图有哪些理论-有没最合适的架构图画法" tabindex="-1">画架构图有哪些理论，有没最合适的架构图画法 <a class="header-anchor" href="#画架构图有哪些理论-有没最合适的架构图画法" aria-label="Permalink to &quot;画架构图有哪些理论，有没最合适的架构图画法&quot;">​</a></h3><h4 id="架构图本质上是从不同的视⻆-不同的抽象⻆度去看-业界存在多个划分理论" tabindex="-1">架构图本质上是从不同的视⻆，不同的抽象⻆度去看，业界存在多个划分理论 <a class="header-anchor" href="#架构图本质上是从不同的视⻆-不同的抽象⻆度去看-业界存在多个划分理论" aria-label="Permalink to &quot;架构图本质上是从不同的视⻆，不同的抽象⻆度去看，业界存在多个划分理论&quot;">​</a></h4><h4 id="那画架构图肯定有一定的【架构设计理论】主流的有多个-togaf、rup-4-1-等" tabindex="-1">那画架构图肯定有一定的【架构设计理论】主流的有多个 TOGAF、RUP 4+1 等 <a class="header-anchor" href="#那画架构图肯定有一定的【架构设计理论】主流的有多个-togaf、rup-4-1-等" aria-label="Permalink to &quot;那画架构图肯定有一定的【架构设计理论】主流的有多个 TOGAF、RUP 4+1 等&quot;">​</a></h4><h4 id="没有最合适的的架构图画法-只有最适合的" tabindex="-1">没有最合适的的架构图画法，只有最适合的 <a class="header-anchor" href="#没有最合适的的架构图画法-只有最适合的" aria-label="Permalink to &quot;没有最合适的的架构图画法，只有最适合的&quot;">​</a></h4><h4 id="脱离实际业务场景的架构图-基本都是不合格的" tabindex="-1">脱离实际业务场景的架构图，基本都是不合格的 <a class="header-anchor" href="#脱离实际业务场景的架构图-基本都是不合格的" aria-label="Permalink to &quot;脱离实际业务场景的架构图，基本都是不合格的&quot;">​</a></h4><h3 id="如何判断架构图的好和坏" tabindex="-1">如何判断架构图的好和坏? <a class="header-anchor" href="#如何判断架构图的好和坏" aria-label="Permalink to &quot;如何判断架构图的好和坏?&quot;">​</a></h3><h4 id="业务抽象设计的合理性-是否满足高内聚、低耦合的要求-不能太宽泛-也不能太细粒度" tabindex="-1">业务抽象设计的合理性，是否满足高内聚、低耦合的要求，不能太宽泛，也不能太细粒度 <a class="header-anchor" href="#业务抽象设计的合理性-是否满足高内聚、低耦合的要求-不能太宽泛-也不能太细粒度" aria-label="Permalink to &quot;业务抽象设计的合理性，是否满足高内聚、低耦合的要求，不能太宽泛，也不能太细粒度&quot;">​</a></h4><h4 id="层级划分目标系统边界-自下而上-或-由上而下-一般包括-基础设施、数据层、应用层、用户层四个层次" tabindex="-1">层级划分目标系统边界，自下而上 或 由上而下，一般包括 基础设施、数据层、应用层、用户层四个层次 <a class="header-anchor" href="#层级划分目标系统边界-自下而上-或-由上而下-一般包括-基础设施、数据层、应用层、用户层四个层次" aria-label="Permalink to &quot;层级划分目标系统边界，自下而上 或 由上而下，一般包括 基础设施、数据层、应用层、用户层四个层次&quot;">​</a></h4><h4 id="纵向分层-上层依赖于下层越底层-越是基础服务-横向并列关系-级别相同" tabindex="-1">纵向分层：上层依赖于下层越底层，越是基础服务；横向并列关系，级别相同 <a class="header-anchor" href="#纵向分层-上层依赖于下层越底层-越是基础服务-横向并列关系-级别相同" aria-label="Permalink to &quot;纵向分层：上层依赖于下层越底层，越是基础服务；横向并列关系，级别相同&quot;">​</a></h4><h4 id="理清架构图类型、业务要全面、专业术语一致、图形清晰美观、颜色类型划分合理" tabindex="-1">理清架构图类型、业务要全面、专业术语一致、图形清晰美观、颜色类型划分合理 <a class="header-anchor" href="#理清架构图类型、业务要全面、专业术语一致、图形清晰美观、颜色类型划分合理" aria-label="Permalink to &quot;理清架构图类型、业务要全面、专业术语一致、图形清晰美观、颜色类型划分合理&quot;">​</a></h4><h4 id="最重要是-你的业务方能满意-看懂" tabindex="-1">最重要是：你的业务方能满意+看懂!!! <a class="header-anchor" href="#最重要是-你的业务方能满意-看懂" aria-label="Permalink to &quot;最重要是：你的业务方能满意+看懂!!!&quot;">​</a></h4><h3 id="不同架构图应该使用哪种方法来画" tabindex="-1">不同架构图应该使用哪种方法来画? <a class="header-anchor" href="#不同架构图应该使用哪种方法来画" aria-label="Permalink to &quot;不同架构图应该使用哪种方法来画?&quot;">​</a></h3><h4 id="可以用的表示法和工具很多-没有太多的限制-把握对应的视图关注点才是关键" tabindex="-1">可以用的表示法和工具很多，没有太多的限制，把握对应的视图关注点才是关键 <a class="header-anchor" href="#可以用的表示法和工具很多-没有太多的限制-把握对应的视图关注点才是关键" aria-label="Permalink to &quot;可以用的表示法和工具很多，没有太多的限制，把握对应的视图关注点才是关键&quot;">​</a></h4><h5 id="xmind、edrawmax、ppt、powerdesigner" tabindex="-1">Xmind、EdrawMax、PPT、PowerDesigner <a class="header-anchor" href="#xmind、edrawmax、ppt、powerdesigner" aria-label="Permalink to &quot;Xmind、EdrawMax、PPT、PowerDesigner&quot;">​</a></h5><h5 id="omnigraffle、visio、process-on" tabindex="-1">OmniGraffle、Visio、Process On <a class="header-anchor" href="#omnigraffle、visio、process-on" aria-label="Permalink to &quot;OmniGraffle、Visio、Process On&quot;">​</a></h5><h4 id="开始阶段不要陷入过度设计中-没那么多需求不一定要那么多图-你是否有那么多客户" tabindex="-1">开始阶段不要陷入过度设计中，没那么多需求不一定要那么多图(你是否有那么多客户) <a class="header-anchor" href="#开始阶段不要陷入过度设计中-没那么多需求不一定要那么多图-你是否有那么多客户" aria-label="Permalink to &quot;开始阶段不要陷入过度设计中，没那么多需求不一定要那么多图(你是否有那么多客户)&quot;">​</a></h4><h4 id="关于uml" tabindex="-1">关于UML <a class="header-anchor" href="#关于uml" aria-label="Permalink to &quot;关于UML&quot;">​</a></h4><h5 id="没有使用标准的架构描述语言-要注明架构图元素的用意-比如方框、形状、边框、线条、颜色等等" tabindex="-1">没有使用标准的架构描述语言，要注明架构图元素的用意(比如方框、形状、边框、线条、颜色等等) <a class="header-anchor" href="#没有使用标准的架构描述语言-要注明架构图元素的用意-比如方框、形状、边框、线条、颜色等等" aria-label="Permalink to &quot;没有使用标准的架构描述语言，要注明架构图元素的用意(比如方框、形状、边框、线条、颜色等等)&quot;">​</a></h5><h5 id="使用标准的架构描述语言-只要在图例里添加关键性的架构描述-但是uml不太灵活" tabindex="-1">使用标准的架构描述语言，只要在图例里添加关键性的架构描述，但是UML不太灵活 <a class="header-anchor" href="#使用标准的架构描述语言-只要在图例里添加关键性的架构描述-但是uml不太灵活" aria-label="Permalink to &quot;使用标准的架构描述语言，只要在图例里添加关键性的架构描述，但是UML不太灵活&quot;">​</a></h5><h5 id="所以可以不用uml构图-但架构图的组成元素-要保证符合一贯理解" tabindex="-1">所以可以不用UML构图，但架构图的组成元素，要保证符合一贯理解 <a class="header-anchor" href="#所以可以不用uml构图-但架构图的组成元素-要保证符合一贯理解" aria-label="Permalink to &quot;所以可以不用UML构图，但架构图的组成元素，要保证符合一贯理解&quot;">​</a></h5><h2 id="架构理论togaf和初识业务架构图" tabindex="-1">架构理论TOGAF和初识业务架构图 <a class="header-anchor" href="#架构理论togaf和初识业务架构图" aria-label="Permalink to &quot;架构理论TOGAF和初识业务架构图&quot;">​</a></h2><blockquote><p>遵循架构设计理论</p></blockquote><h3 id="画架构图肯定有一定的【架构设计理论】主流的有多个-togaf、rup-4-1-等" tabindex="-1">画架构图肯定有一定的【架构设计理论】主流的有多个 TOGAF、RUP 4+1 等 <a class="header-anchor" href="#画架构图肯定有一定的【架构设计理论】主流的有多个-togaf、rup-4-1-等" aria-label="Permalink to &quot;画架构图肯定有一定的【架构设计理论】主流的有多个 TOGAF、RUP 4+1 等&quot;">​</a></h3><h3 id="什么是【-togaf】" tabindex="-1">什么是【 TOGAF】 <a class="header-anchor" href="#什么是【-togaf】" aria-label="Permalink to &quot;什么是【 TOGAF】&quot;">​</a></h3><h4 id="全称-the-open-group-architecture-framework-企业架构标准" tabindex="-1">全称 The Open Group Architecture Framework 企业架构标准 <a class="header-anchor" href="#全称-the-open-group-architecture-framework-企业架构标准" aria-label="Permalink to &quot;全称 The Open Group Architecture Framework 企业架构标准&quot;">​</a></h4><h4 id="给企业架构专业人士之间的沟通提供一致性保障-设计上注重灵活性-可用于不同的架构⻛格。" tabindex="-1">给企业架构专业人士之间的沟通提供一致性保障，设计上注重灵活性，可用于不同的架构⻛格。 <a class="header-anchor" href="#给企业架构专业人士之间的沟通提供一致性保障-设计上注重灵活性-可用于不同的架构⻛格。" aria-label="Permalink to &quot;给企业架构专业人士之间的沟通提供一致性保障，设计上注重灵活性，可用于不同的架构⻛格。&quot;">​</a></h4><h4 id="不同架构视图承载不同的架构设计决策-支持不同的目标和用途" tabindex="-1">不同架构视图承载不同的架构设计决策，支持不同的目标和用途 <a class="header-anchor" href="#不同架构视图承载不同的架构设计决策-支持不同的目标和用途" aria-label="Permalink to &quot;不同架构视图承载不同的架构设计决策，支持不同的目标和用途&quot;">​</a></h4><h3 id="业务架构-定义业务战略、企业治理、组织架构和关键业务流程。" tabindex="-1">业务架构：定义业务战略、企业治理、组织架构和关键业务流程。 <a class="header-anchor" href="#业务架构-定义业务战略、企业治理、组织架构和关键业务流程。" aria-label="Permalink to &quot;业务架构：定义业务战略、企业治理、组织架构和关键业务流程。&quot;">​</a></h3><h4 id="是对业务需求的提炼和抽象-使用一套方法论对项目所涉及需求的业务进行业务边界划分" tabindex="-1">是对业务需求的提炼和抽象，使用一套方法论对项目所涉及需求的业务进行业务边界划分 <a class="header-anchor" href="#是对业务需求的提炼和抽象-使用一套方法论对项目所涉及需求的业务进行业务边界划分" aria-label="Permalink to &quot;是对业务需求的提炼和抽象，使用一套方法论对项目所涉及需求的业务进行业务边界划分&quot;">​</a></h4><h4 id="能比较清晰地看到系统的业务全貌-需求分析是否做到位-功能开发是否达到预期目标-都以此为依据" tabindex="-1">能比较清晰地看到系统的业务全貌，需求分析是否做到位，功能开发是否达到预期目标，都以此为依据 <a class="header-anchor" href="#能比较清晰地看到系统的业务全貌-需求分析是否做到位-功能开发是否达到预期目标-都以此为依据" aria-label="Permalink to &quot;能比较清晰地看到系统的业务全貌，需求分析是否做到位，功能开发是否达到预期目标，都以此为依据&quot;">​</a></h4><h4 id="比如" tabindex="-1">比如 <a class="header-anchor" href="#比如" aria-label="Permalink to &quot;比如&quot;">​</a></h4><h5 id="开发一个电商网站-理清业务逻辑-比如订单、支付、用户、商品进行划分" tabindex="-1">开发一个电商网站，理清业务逻辑，比如订单、支付、用户、商品进行划分 <a class="header-anchor" href="#开发一个电商网站-理清业务逻辑-比如订单、支付、用户、商品进行划分" aria-label="Permalink to &quot;开发一个电商网站，理清业务逻辑，比如订单、支付、用户、商品进行划分&quot;">​</a></h5><h5 id="不用考虑技术实现、并发量、部署架构等" tabindex="-1">不用考虑技术实现、并发量、部署架构等 <a class="header-anchor" href="#不用考虑技术实现、并发量、部署架构等" aria-label="Permalink to &quot;不用考虑技术实现、并发量、部署架构等&quot;">​</a></h5><h4 id="业务架构图中尽量不出现技术的字眼-不同架构图的读者是不同的-确保能看懂。" tabindex="-1">业务架构图中尽量不出现技术的字眼，不同架构图的读者是不同的，确保能看懂。 <a class="header-anchor" href="#业务架构图中尽量不出现技术的字眼-不同架构图的读者是不同的-确保能看懂。" aria-label="Permalink to &quot;业务架构图中尽量不出现技术的字眼，不同架构图的读者是不同的，确保能看懂。&quot;">​</a></h4><h4 id="无技术背景人员可参与实现的讨论-向技术人员描述解决方案核心要做什么-必须实现的关键是什么" tabindex="-1">无技术背景人员可参与实现的讨论，向技术人员描述解决方案核心要做什么，必须实现的关键是什么 <a class="header-anchor" href="#无技术背景人员可参与实现的讨论-向技术人员描述解决方案核心要做什么-必须实现的关键是什么" aria-label="Permalink to &quot;无技术背景人员可参与实现的讨论，向技术人员描述解决方案核心要做什么，必须实现的关键是什么&quot;">​</a></h4><h4 id="也是【老板层面】比较关注的点-常规技术同学是到-应用-数据-技术架构这层比较多" tabindex="-1">也是【老板层面】比较关注的点，常规技术同学是到 应用/数据/技术架构这层比较多 <a class="header-anchor" href="#也是【老板层面】比较关注的点-常规技术同学是到-应用-数据-技术架构这层比较多" aria-label="Permalink to &quot;也是【老板层面】比较关注的点，常规技术同学是到 应用/数据/技术架构这层比较多&quot;">​</a></h4><h2 id="秒懂-iaas-paas-saas" tabindex="-1">秒懂-IaaS-PaaS-SaaS <a class="header-anchor" href="#秒懂-iaas-paas-saas" aria-label="Permalink to &quot;秒懂-IaaS-PaaS-SaaS&quot;">​</a></h2><h3 id="三种云服务模型-也称为三层架构" tabindex="-1">三种云服务模型, 也称为三层架构 <a class="header-anchor" href="#三种云服务模型-也称为三层架构" aria-label="Permalink to &quot;三种云服务模型, 也称为三层架构&quot;">​</a></h3><h4 id="iaas-基础设施即服务-infrastructure-as-a-service" tabindex="-1">IaaS 基础设施即服务 Infrastructure as a service <a class="header-anchor" href="#iaas-基础设施即服务-infrastructure-as-a-service" aria-label="Permalink to &quot;IaaS 基础设施即服务 Infrastructure as a service&quot;">​</a></h4><h5 id="虚拟的硬件资源-如虚拟的主机、存储、网络、安全等资源" tabindex="-1">虚拟的硬件资源，如虚拟的主机、存储、网络、安全等资源 <a class="header-anchor" href="#虚拟的硬件资源-如虚拟的主机、存储、网络、安全等资源" aria-label="Permalink to &quot;虚拟的硬件资源，如虚拟的主机、存储、网络、安全等资源&quot;">​</a></h5><h5 id="最熟悉的例子-阿里云ecs主机的带宽、磁盘空间、gpu等" tabindex="-1">最熟悉的例子：阿里云ECS主机的带宽、磁盘空间、GPU等 <a class="header-anchor" href="#最熟悉的例子-阿里云ecs主机的带宽、磁盘空间、gpu等" aria-label="Permalink to &quot;最熟悉的例子：阿里云ECS主机的带宽、磁盘空间、GPU等&quot;">​</a></h5><h4 id="paas-平台即服务-platform-as-a-service" tabindex="-1">PaaS 平台即服务 platform as a service <a class="header-anchor" href="#paas-平台即服务-platform-as-a-service" aria-label="Permalink to &quot;PaaS 平台即服务 platform as a service&quot;">​</a></h4><h5 id="为开发人员提供了一个框架-使他们可以基于它创建自定义应用程序" tabindex="-1">为开发人员提供了一个框架，使他们可以基于它创建自定义应用程序 <a class="header-anchor" href="#为开发人员提供了一个框架-使他们可以基于它创建自定义应用程序" aria-label="Permalink to &quot;为开发人员提供了一个框架，使他们可以基于它创建自定义应用程序&quot;">​</a></h5><h5 id="最熟悉的例子-阿里云oss、rdb、短信服务、日志服务" tabindex="-1">最熟悉的例子：阿里云OSS、RDB、短信服务、日志服务 <a class="header-anchor" href="#最熟悉的例子-阿里云oss、rdb、短信服务、日志服务" aria-label="Permalink to &quot;最熟悉的例子：阿里云OSS、RDB、短信服务、日志服务&quot;">​</a></h5><h4 id="saas-软件即服务-software-as-a-service" tabindex="-1">SaaS 软件即服务 software as a service <a class="header-anchor" href="#saas-软件即服务-software-as-a-service" aria-label="Permalink to &quot;SaaS 软件即服务 software as a service&quot;">​</a></h4><h5 id="云应用程序服务-利用互联网向其用户提供应用程序-这些应用程序由第三方供应商管理" tabindex="-1">云应用程序服务，利用互联网向其用户提供应用程序，这些应用程序由第三方供应商管理 <a class="header-anchor" href="#云应用程序服务-利用互联网向其用户提供应用程序-这些应用程序由第三方供应商管理" aria-label="Permalink to &quot;云应用程序服务，利用互联网向其用户提供应用程序，这些应用程序由第三方供应商管理&quot;">​</a></h5><h5 id="公司产品-淘宝、小鹅通、亚⻢逊-crm-客户关系管理-、hrm-人力资源管理-、scm-供应链" tabindex="-1">公司产品：淘宝、小鹅通、亚⻢逊，CRM(客户关系管理)、HRM(人力资源管理)、SCM(供应链) <a class="header-anchor" href="#公司产品-淘宝、小鹅通、亚⻢逊-crm-客户关系管理-、hrm-人力资源管理-、scm-供应链" aria-label="Permalink to &quot;公司产品：淘宝、小鹅通、亚⻢逊，CRM(客户关系管理)、HRM(人力资源管理)、SCM(供应链)&quot;">​</a></h5><h3 id="它们的区别" tabindex="-1">它们的区别 <a class="header-anchor" href="#它们的区别" aria-label="Permalink to &quot;它们的区别&quot;">​</a></h3><p><img src="'+n+'" alt="image.png"></p><h3 id="总结-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h3><h4 id="从iaas到saas的过程-企业的云化的程度也越来越高-内部it所需要做的事越来越少。" tabindex="-1">从Iaas到SaaS的过程，企业的云化的程度也越来越高，内部IT所需要做的事越来越少。 <a class="header-anchor" href="#从iaas到saas的过程-企业的云化的程度也越来越高-内部it所需要做的事越来越少。" aria-label="Permalink to &quot;从Iaas到SaaS的过程，企业的云化的程度也越来越高，内部IT所需要做的事越来越少。&quot;">​</a></h4><h4 id="可以这么看-运维同学经常打交道的是iaas-开发经常打交道的是paas-运营和客户经常打交道的是-saas" tabindex="-1">可以这么看，运维同学经常打交道的是IaaS，开发经常打交道的是PaaS，运营和客户经常打交道的是 SaaS <a class="header-anchor" href="#可以这么看-运维同学经常打交道的是iaas-开发经常打交道的是paas-运营和客户经常打交道的是-saas" aria-label="Permalink to &quot;可以这么看，运维同学经常打交道的是IaaS，开发经常打交道的是PaaS，运营和客户经常打交道的是 SaaS&quot;">​</a></h4><h2 id="当个画家-教你画高大上的业务架构图" tabindex="-1">当个画家-教你画高大上的业务架构图 <a class="header-anchor" href="#当个画家-教你画高大上的业务架构图" aria-label="Permalink to &quot;当个画家-教你画高大上的业务架构图&quot;">​</a></h2><h3 id="在画架构图之前-想清楚3个问题-架构图想表达什么-有什么用-给谁看" tabindex="-1">在画架构图之前，想清楚3个问题，架构图想表达什么?有什么用?给谁看? <a class="header-anchor" href="#在画架构图之前-想清楚3个问题-架构图想表达什么-有什么用-给谁看" aria-label="Permalink to &quot;在画架构图之前，想清楚3个问题，架构图想表达什么?有什么用?给谁看?&quot;">​</a></h3><h4 id="表达是业务系统之间的关系-梳理业务结构" tabindex="-1">表达是业务系统之间的关系，梳理业务结构 <a class="header-anchor" href="#表达是业务系统之间的关系-梳理业务结构" aria-label="Permalink to &quot;表达是业务系统之间的关系，梳理业务结构&quot;">​</a></h4><h4 id="将复杂的业务逻辑简单化-降低理解难度-更方便业务方理解" tabindex="-1">将复杂的业务逻辑简单化，降低理解难度，更方便业务方理解 <a class="header-anchor" href="#将复杂的业务逻辑简单化-降低理解难度-更方便业务方理解" aria-label="Permalink to &quot;将复杂的业务逻辑简单化，降低理解难度，更方便业务方理解&quot;">​</a></h4><h4 id="给业务方查看-业务相关干系人" tabindex="-1">给业务方查看，业务相关干系人 <a class="header-anchor" href="#给业务方查看-业务相关干系人" aria-label="Permalink to &quot;给业务方查看，业务相关干系人&quot;">​</a></h4><h3 id="画图三步走" tabindex="-1">画图三步走 <a class="header-anchor" href="#画图三步走" aria-label="Permalink to &quot;画图三步走&quot;">​</a></h3><h4 id="分层" tabindex="-1">分层 <a class="header-anchor" href="#分层" aria-label="Permalink to &quot;分层&quot;">​</a></h4><h5 id="业务按照层级进行划分-各个层级属于独立的版块" tabindex="-1">业务按照层级进行划分，各个层级属于独立的版块 <a class="header-anchor" href="#业务按照层级进行划分-各个层级属于独立的版块" aria-label="Permalink to &quot;业务按照层级进行划分，各个层级属于独立的版块&quot;">​</a></h5><h5 id="下层为上层提供服务能力支撑" tabindex="-1">下层为上层提供服务能力支撑 <a class="header-anchor" href="#下层为上层提供服务能力支撑" aria-label="Permalink to &quot;下层为上层提供服务能力支撑&quot;">​</a></h5><h5 id="比如-laas-paas-saas" tabindex="-1">比如：laaS / PaaS / SaaS <a class="header-anchor" href="#比如-laas-paas-saas" aria-label="Permalink to &quot;比如：laaS / PaaS / SaaS&quot;">​</a></h5><h4 id="分模块" tabindex="-1">分模块 <a class="header-anchor" href="#分模块" aria-label="Permalink to &quot;分模块&quot;">​</a></h4><h5 id="同层级中进行小归类" tabindex="-1">同层级中进行小归类 <a class="header-anchor" href="#同层级中进行小归类" aria-label="Permalink to &quot;同层级中进行小归类&quot;">​</a></h5><h5 id="属于平行关系-可以独立存在" tabindex="-1">属于平行关系，可以独立存在 <a class="header-anchor" href="#属于平行关系-可以独立存在" aria-label="Permalink to &quot;属于平行关系，可以独立存在&quot;">​</a></h5><h5 id="比如-能力开放平台-有运营能力平台、服务总线" tabindex="-1">比如：能力开放平台 有运营能力平台、服务总线 <a class="header-anchor" href="#比如-能力开放平台-有运营能力平台、服务总线" aria-label="Permalink to &quot;比如：能力开放平台 有运营能力平台、服务总线&quot;">​</a></h5><h4 id="分功能" tabindex="-1">分功能 <a class="header-anchor" href="#分功能" aria-label="Permalink to &quot;分功能&quot;">​</a></h4><h5 id="独立功能划分出来-即业务入口" tabindex="-1">独立功能划分出来，即业务入口 <a class="header-anchor" href="#独立功能划分出来-即业务入口" aria-label="Permalink to &quot;独立功能划分出来，即业务入口&quot;">​</a></h5><h5 id="业务方重点关注的功能点-可以认为是微服务划分" tabindex="-1">业务方重点关注的功能点，可以认为是微服务划分 <a class="header-anchor" href="#业务方重点关注的功能点-可以认为是微服务划分" aria-label="Permalink to &quot;业务方重点关注的功能点，可以认为是微服务划分&quot;">​</a></h5><h5 id="比如-1" tabindex="-1">比如 <a class="header-anchor" href="#比如-1" aria-label="Permalink to &quot;比如&quot;">​</a></h5><h6 id="能力开放平台-有运营能力平台-里面有-服务管控、sla承诺、计量服务" tabindex="-1">能力开放平台：有运营能力平台 里面有 服务管控、SLA承诺、计量服务 <a class="header-anchor" href="#能力开放平台-有运营能力平台-里面有-服务管控、sla承诺、计量服务" aria-label="Permalink to &quot;能力开放平台：有运营能力平台 里面有 服务管控、SLA承诺、计量服务&quot;">​</a></h6><h2 id="当个画家-教你画高大上的应用架构图" tabindex="-1">当个画家-教你画高大上的应用架构图 <a class="header-anchor" href="#当个画家-教你画高大上的应用架构图" aria-label="Permalink to &quot;当个画家-教你画高大上的应用架构图&quot;">​</a></h2><h3 id="什么是应用架构图" tabindex="-1">什么是应用架构图 <a class="header-anchor" href="#什么是应用架构图" aria-label="Permalink to &quot;什么是应用架构图&quot;">​</a></h3><h4 id="是对整个系统实现的总体架构-应用架构和系统架构很大类似" tabindex="-1">是对整个系统实现的总体架构 , 应用架构和系统架构很大类似 <a class="header-anchor" href="#是对整个系统实现的总体架构-应用架构和系统架构很大类似" aria-label="Permalink to &quot;是对整个系统实现的总体架构 , 应用架构和系统架构很大类似&quot;">​</a></h4><h4 id="一方面承接业务架构的落地-一方面影响技术选型" tabindex="-1">一方面承接业务架构的落地，一方面影响技术选型 <a class="header-anchor" href="#一方面承接业务架构的落地-一方面影响技术选型" aria-label="Permalink to &quot;一方面承接业务架构的落地，一方面影响技术选型&quot;">​</a></h4><h4 id="注意-一般应用架构图【不加入太多技术框架和实现】" tabindex="-1">注意:一般应用架构图【不加入太多技术框架和实现】 <a class="header-anchor" href="#注意-一般应用架构图【不加入太多技术框架和实现】" aria-label="Permalink to &quot;注意:一般应用架构图【不加入太多技术框架和实现】&quot;">​</a></h4><h3 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h3><h4 id="根据业务场景-对系统进分层-指出开发的原则、系统各个层次的应用服务" tabindex="-1">根据业务场景 对系统进分层，指出开发的原则、系统各个层次的应用服务 <a class="header-anchor" href="#根据业务场景-对系统进分层-指出开发的原则、系统各个层次的应用服务" aria-label="Permalink to &quot;根据业务场景 对系统进分层，指出开发的原则、系统各个层次的应用服务&quot;">​</a></h4><h4 id="指导软件的研发-包括不限于制定应用规范、定义接口和数据交互协议-满足功能性需求和非功能性需求" tabindex="-1">指导软件的研发，包括不限于制定应用规范、定义接口和数据交互协议，满足功能性需求和非功能性需求 <a class="header-anchor" href="#指导软件的研发-包括不限于制定应用规范、定义接口和数据交互协议-满足功能性需求和非功能性需求" aria-label="Permalink to &quot;指导软件的研发，包括不限于制定应用规范、定义接口和数据交互协议，满足功能性需求和非功能性需求&quot;">​</a></h4><h3 id="业务方" tabindex="-1">业务方 <a class="header-anchor" href="#业务方" aria-label="Permalink to &quot;业务方&quot;">​</a></h3><h4 id="研发人员-各层级架构师-各层级技术管理者" tabindex="-1">研发人员，各层级架构师，各层级技术管理者 <a class="header-anchor" href="#研发人员-各层级架构师-各层级技术管理者" aria-label="Permalink to &quot;研发人员，各层级架构师，各层级技术管理者&quot;">​</a></h4><h3 id="分类-1" tabindex="-1">分类 <a class="header-anchor" href="#分类-1" aria-label="Permalink to &quot;分类&quot;">​</a></h3><h4 id="多系统应用架构-用来分层次说明不同系统间的业务逻辑关系、系统边界等-比如分布式、微服-务" tabindex="-1">多系统应用架构，用来分层次说明不同系统间的业务逻辑关系、系统边界等，比如分布式、微服 务 <a class="header-anchor" href="#多系统应用架构-用来分层次说明不同系统间的业务逻辑关系、系统边界等-比如分布式、微服-务" aria-label="Permalink to &quot;多系统应用架构，用来分层次说明不同系统间的业务逻辑关系、系统边界等，比如分布式、微服 务&quot;">​</a></h4><h4 id="单系统应用架构-用来分层次说明系统的组成模块和功能点之间的业务逻辑关系-比如单体应用" tabindex="-1">单系统应用架构，用来分层次说明系统的组成模块和功能点之间的业务逻辑关系，比如单体应用 <a class="header-anchor" href="#单系统应用架构-用来分层次说明系统的组成模块和功能点之间的业务逻辑关系-比如单体应用" aria-label="Permalink to &quot;单系统应用架构，用来分层次说明系统的组成模块和功能点之间的业务逻辑关系，比如单体应用&quot;">​</a></h4><h3 id="常规分层" tabindex="-1">常规分层 <a class="header-anchor" href="#常规分层" aria-label="Permalink to &quot;常规分层&quot;">​</a></h3><h4 id="表示-展现层-负责用户体验" tabindex="-1">表示-展现层：负责用户体验 <a class="header-anchor" href="#表示-展现层-负责用户体验" aria-label="Permalink to &quot;表示-展现层：负责用户体验&quot;">​</a></h4><h4 id="业务-服务层-负责业务逻辑" tabindex="-1">业务-服务层：负责业务逻辑 <a class="header-anchor" href="#业务-服务层-负责业务逻辑" aria-label="Permalink to &quot;业务-服务层：负责业务逻辑&quot;">​</a></h4><h4 id="数据-访问层-负责数据库存取" tabindex="-1">数据-访问层：负责数据库存取 <a class="header-anchor" href="#数据-访问层-负责数据库存取" aria-label="Permalink to &quot;数据-访问层：负责数据库存取&quot;">​</a></h4><h3 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to &quot;案例&quot;">​</a></h3><p><img src="'+d+'" alt="image.png"></p><h2 id="细分领域-技术架构图和数据架构图" tabindex="-1">细分领域-技术架构图和数据架构图 <a class="header-anchor" href="#细分领域-技术架构图和数据架构图" aria-label="Permalink to &quot;细分领域-技术架构图和数据架构图&quot;">​</a></h2><p><img src="'+s+'" alt="image.png"></p><h3 id="什么是技术架构" tabindex="-1">什么是技术架构 <a class="header-anchor" href="#什么是技术架构" aria-label="Permalink to &quot;什么是技术架构&quot;">​</a></h3><h4 id="应用架构本身只关心需要哪些应用系统-不关心在整个项目中你需要使用哪些技术" tabindex="-1">应用架构本身只关心需要哪些应用系统，不关心在整个项目中你需要使用哪些技术 <a class="header-anchor" href="#应用架构本身只关心需要哪些应用系统-不关心在整个项目中你需要使用哪些技术" aria-label="Permalink to &quot;应用架构本身只关心需要哪些应用系统，不关心在整个项目中你需要使用哪些技术&quot;">​</a></h4><h4 id="技术架构则是实现应用架构的承接方-识别技术需求-进行技术选型-描述技术之间的关系" tabindex="-1">技术架构则是实现应用架构的承接方，识别技术需求，进行技术选型，描述技术之间的关系 <a class="header-anchor" href="#技术架构则是实现应用架构的承接方-识别技术需求-进行技术选型-描述技术之间的关系" aria-label="Permalink to &quot;技术架构则是实现应用架构的承接方，识别技术需求，进行技术选型，描述技术之间的关系&quot;">​</a></h4><h4 id="解决的问题包括" tabindex="-1">解决的问题包括 <a class="header-anchor" href="#解决的问题包括" aria-label="Permalink to &quot;解决的问题包括&quot;">​</a></h4><h5 id="技术层面的分层、开发语言、框架的选择" tabindex="-1">技术层面的分层、开发语言、框架的选择 <a class="header-anchor" href="#技术层面的分层、开发语言、框架的选择" aria-label="Permalink to &quot;技术层面的分层、开发语言、框架的选择&quot;">​</a></h5><h5 id="通信技术、存储技术的选择、非功能性需求的技术选择等" tabindex="-1">通信技术、存储技术的选择、非功能性需求的技术选择等 <a class="header-anchor" href="#通信技术、存储技术的选择、非功能性需求的技术选择等" aria-label="Permalink to &quot;通信技术、存储技术的选择、非功能性需求的技术选择等&quot;">​</a></h5><h4 id="案例-1" tabindex="-1">案例 <a class="header-anchor" href="#案例-1" aria-label="Permalink to &quot;案例&quot;">​</a></h4><p><img src="'+c+'" alt="image.png"></p><h3 id="什么是数据架构" tabindex="-1">什么是数据架构 <a class="header-anchor" href="#什么是数据架构" aria-label="Permalink to &quot;什么是数据架构&quot;">​</a></h3><h4 id="描述一个组织逻辑的和物理的数据资产和数据管理资源的结构" tabindex="-1">描述一个组织逻辑的和物理的数据资产和数据管理资源的结构 <a class="header-anchor" href="#描述一个组织逻辑的和物理的数据资产和数据管理资源的结构" aria-label="Permalink to &quot;描述一个组织逻辑的和物理的数据资产和数据管理资源的结构&quot;">​</a></h4><h4 id="从数据视⻆-表达数据从产生到消费应用的全过程" tabindex="-1">从数据视⻆，表达数据从产生到消费应用的全过程 <a class="header-anchor" href="#从数据视⻆-表达数据从产生到消费应用的全过程" aria-label="Permalink to &quot;从数据视⻆，表达数据从产生到消费应用的全过程&quot;">​</a></h4><h4 id="比如做一个电商实时大屏-数据来源有哪些-经过哪些组件处理-最终存储和应用到哪里" tabindex="-1">比如做一个电商实时大屏，数据来源有哪些，经过哪些组件处理，最终存储和应用到哪里 <a class="header-anchor" href="#比如做一个电商实时大屏-数据来源有哪些-经过哪些组件处理-最终存储和应用到哪里" aria-label="Permalink to &quot;比如做一个电商实时大屏，数据来源有哪些，经过哪些组件处理，最终存储和应用到哪里&quot;">​</a></h4><h4 id="常规里面不加具体的技术实现-但有时会方便沟通-则加入对应的技术实现" tabindex="-1">常规里面不加具体的技术实现，但有时会方便沟通，则加入对应的技术实现 <a class="header-anchor" href="#常规里面不加具体的技术实现-但有时会方便沟通-则加入对应的技术实现" aria-label="Permalink to &quot;常规里面不加具体的技术实现，但有时会方便沟通，则加入对应的技术实现&quot;">​</a></h4><h4 id="案例-2" tabindex="-1">案例 <a class="header-anchor" href="#案例-2" aria-label="Permalink to &quot;案例&quot;">​</a></h4><p><img src="'+u+'" alt="image.png"></p><h2 id="业务-应用-技术-数据架构图总结回顾" tabindex="-1">业务-应用-技术-数据架构图总结回顾 <a class="header-anchor" href="#业务-应用-技术-数据架构图总结回顾" aria-label="Permalink to &quot;业务-应用-技术-数据架构图总结回顾&quot;">​</a></h2><h3 id="重点-业务架构是战略-应用架构是战术-技术和数据架构是装备" tabindex="-1">重点：业务架构是战略，应用架构是战术，技术和数据架构是装备 <a class="header-anchor" href="#重点-业务架构是战略-应用架构是战术-技术和数据架构是装备" aria-label="Permalink to &quot;重点：业务架构是战略，应用架构是战术，技术和数据架构是装备&quot;">​</a></h3><h3 id="业务架构" tabindex="-1">业务架构 <a class="header-anchor" href="#业务架构" aria-label="Permalink to &quot;业务架构&quot;">​</a></h3><h5 id="表达业务是如何开展的-服务于业务目标-通过描绘业务上下层关系-简单的业务视图降低业务系统的复杂" tabindex="-1">表达业务是如何开展的，服务于业务目标，通过描绘业务上下层关系，简单的业务视图降低业务系统的复杂 <a class="header-anchor" href="#表达业务是如何开展的-服务于业务目标-通过描绘业务上下层关系-简单的业务视图降低业务系统的复杂" aria-label="Permalink to &quot;表达业务是如何开展的，服务于业务目标，通过描绘业务上下层关系，简单的业务视图降低业务系统的复杂&quot;">​</a></h5><h3 id="应用架构" tabindex="-1">应用架构 <a class="header-anchor" href="#应用架构" aria-label="Permalink to &quot;应用架构&quot;">​</a></h3><h5 id="是对整个系统实现的总体架构-应用架构和系统架构很大类似-1" tabindex="-1">是对整个系统实现的总体架构，应用架构和系统架构很大类似 <a class="header-anchor" href="#是对整个系统实现的总体架构-应用架构和系统架构很大类似-1" aria-label="Permalink to &quot;是对整个系统实现的总体架构，应用架构和系统架构很大类似&quot;">​</a></h5><h5 id="一方面承接业务架构的落地-一方面影响技术选型-1" tabindex="-1">一方面承接业务架构的落地，一方面影响技术选型 <a class="header-anchor" href="#一方面承接业务架构的落地-一方面影响技术选型-1" aria-label="Permalink to &quot;一方面承接业务架构的落地，一方面影响技术选型&quot;">​</a></h5><h5 id="注意-一般应用架构图【不加入太多技术框架和实现】-1" tabindex="-1">注意：一般应用架构图【不加入太多技术框架和实现】 <a class="header-anchor" href="#注意-一般应用架构图【不加入太多技术框架和实现】-1" aria-label="Permalink to &quot;注意：一般应用架构图【不加入太多技术框架和实现】&quot;">​</a></h5><h3 id="技术架构" tabindex="-1">技术架构 <a class="header-anchor" href="#技术架构" aria-label="Permalink to &quot;技术架构&quot;">​</a></h3><h4 id="应用架构本身只关心需要哪些应用系统-不关心在整个项目中你需要使用哪些技术-1" tabindex="-1">应用架构本身只关心需要哪些应用系统，不关心在整个项目中你需要使用哪些技术 <a class="header-anchor" href="#应用架构本身只关心需要哪些应用系统-不关心在整个项目中你需要使用哪些技术-1" aria-label="Permalink to &quot;应用架构本身只关心需要哪些应用系统，不关心在整个项目中你需要使用哪些技术&quot;">​</a></h4><h4 id="技术架构则是实现应用架构的承接方-识别技术需求-进行技术选型-描述技术之间的关系-1" tabindex="-1">技术架构则是实现应用架构的承接方，识别技术需求，进行技术选型，描述技术之间的关系 <a class="header-anchor" href="#技术架构则是实现应用架构的承接方-识别技术需求-进行技术选型-描述技术之间的关系-1" aria-label="Permalink to &quot;技术架构则是实现应用架构的承接方，识别技术需求，进行技术选型，描述技术之间的关系&quot;">​</a></h4><h4 id="解决的问题包括-1" tabindex="-1">解决的问题包括 <a class="header-anchor" href="#解决的问题包括-1" aria-label="Permalink to &quot;解决的问题包括&quot;">​</a></h4><h5 id="技术层面的分层、开发语言、框架的选择-1" tabindex="-1">技术层面的分层、开发语言、框架的选择 <a class="header-anchor" href="#技术层面的分层、开发语言、框架的选择-1" aria-label="Permalink to &quot;技术层面的分层、开发语言、框架的选择&quot;">​</a></h5><h5 id="通信技术、存储技术的选择、非功能性需求的技术选择等-1" tabindex="-1">通信技术、存储技术的选择、非功能性需求的技术选择等 <a class="header-anchor" href="#通信技术、存储技术的选择、非功能性需求的技术选择等-1" aria-label="Permalink to &quot;通信技术、存储技术的选择、非功能性需求的技术选择等&quot;">​</a></h5><h3 id="数据架构" tabindex="-1">数据架构 <a class="header-anchor" href="#数据架构" aria-label="Permalink to &quot;数据架构&quot;">​</a></h3><h4 id="描述一个组织逻辑的和物理的数据资产和数据管理资源的结构-1" tabindex="-1">描述一个组织逻辑的和物理的数据资产和数据管理资源的结构 <a class="header-anchor" href="#描述一个组织逻辑的和物理的数据资产和数据管理资源的结构-1" aria-label="Permalink to &quot;描述一个组织逻辑的和物理的数据资产和数据管理资源的结构&quot;">​</a></h4><h4 id="从数据视⻆-表达数据从产生到消费应用的全过程-1" tabindex="-1">从数据视⻆，表达数据从产生到消费应用的全过程 <a class="header-anchor" href="#从数据视⻆-表达数据从产生到消费应用的全过程-1" aria-label="Permalink to &quot;从数据视⻆，表达数据从产生到消费应用的全过程&quot;">​</a></h4><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><h4 id="架构图想表达什么-有什么用-给谁看" tabindex="-1">架构图想表达什么？有什么用？给谁看？ <a class="header-anchor" href="#架构图想表达什么-有什么用-给谁看" aria-label="Permalink to &quot;架构图想表达什么？有什么用？给谁看？&quot;">​</a></h4><h4 id="画图三步走-分层、分模块、分功能" tabindex="-1">画图三步走：分层、分模块、分功能 <a class="header-anchor" href="#画图三步走-分层、分模块、分功能" aria-label="Permalink to &quot;画图三步走：分层、分模块、分功能&quot;">​</a></h4><h3 id="如何判断架构图的好和坏-1" tabindex="-1">如何判断架构图的好和坏？ <a class="header-anchor" href="#如何判断架构图的好和坏-1" aria-label="Permalink to &quot;如何判断架构图的好和坏？&quot;">​</a></h3><h4 id="业务抽象设计的合理性-是否满足高内聚、低耦合的要求-不能太宽泛-也不能太细粒度-1" tabindex="-1">业务抽象设计的合理性，是否满足高内聚、低耦合的要求，不能太宽泛，也不能太细粒度 <a class="header-anchor" href="#业务抽象设计的合理性-是否满足高内聚、低耦合的要求-不能太宽泛-也不能太细粒度-1" aria-label="Permalink to &quot;业务抽象设计的合理性，是否满足高内聚、低耦合的要求，不能太宽泛，也不能太细粒度&quot;">​</a></h4><h4 id="层级划分目标系统边界-自下而上-或-由上而下-一般包括-基础设施、数据层、应用层、用户层四个层次-1" tabindex="-1">层级划分目标系统边界，自下而上 或 由上而下，一般包括 基础设施、数据层、应用层、用户层四个层次 <a class="header-anchor" href="#层级划分目标系统边界-自下而上-或-由上而下-一般包括-基础设施、数据层、应用层、用户层四个层次-1" aria-label="Permalink to &quot;层级划分目标系统边界，自下而上 或 由上而下，一般包括 基础设施、数据层、应用层、用户层四个层次&quot;">​</a></h4><h4 id="纵向分层-上层依赖于下层越底层-越是基础服务-横向并列关系-级别相同-1" tabindex="-1">纵向分层 上层依赖于下层越底层，越是基础服务；横向并列关系，级别相同 <a class="header-anchor" href="#纵向分层-上层依赖于下层越底层-越是基础服务-横向并列关系-级别相同-1" aria-label="Permalink to &quot;纵向分层 上层依赖于下层越底层，越是基础服务；横向并列关系，级别相同&quot;">​</a></h4><h4 id="理清架构图类型、业务要全面、专业术语一致、图形清晰美观、颜色类型划分合理-1" tabindex="-1">理清架构图类型、业务要全面、专业术语一致、图形清晰美观、颜色类型划分合理 <a class="header-anchor" href="#理清架构图类型、业务要全面、专业术语一致、图形清晰美观、颜色类型划分合理-1" aria-label="Permalink to &quot;理清架构图类型、业务要全面、专业术语一致、图形清晰美观、颜色类型划分合理&quot;">​</a></h4><h4 id="重要是-你的业务方能满意-看懂" tabindex="-1">重要是：你的业务方能满意+看懂!!! <a class="header-anchor" href="#重要是-你的业务方能满意-看懂" aria-label="Permalink to &quot;重要是：你的业务方能满意+看懂!!!&quot;">​</a></h4><h1 id="类图" tabindex="-1">类图 <a class="header-anchor" href="#类图" aria-label="Permalink to &quot;类图&quot;">​</a></h1><h2 id="依赖关系" tabindex="-1">依赖关系 <a class="header-anchor" href="#依赖关系" aria-label="Permalink to &quot;依赖关系&quot;">​</a></h2><h3 id="尖括号-虚线表示" tabindex="-1">尖括号 + 虚线表示 <a class="header-anchor" href="#尖括号-虚线表示" aria-label="Permalink to &quot;尖括号 + 虚线表示&quot;">​</a></h3><h4 id="当一个对象依赖另一个对象提供的服务时-就是依赖关系" tabindex="-1">当一个对象依赖另一个对象提供的服务时，就是依赖关系 <a class="header-anchor" href="#当一个对象依赖另一个对象提供的服务时-就是依赖关系" aria-label="Permalink to &quot;当一个对象依赖另一个对象提供的服务时，就是依赖关系&quot;">​</a></h4><h2 id="继承泛化关系" tabindex="-1">继承泛化关系 <a class="header-anchor" href="#继承泛化关系" aria-label="Permalink to &quot;继承泛化关系&quot;">​</a></h2><h3 id="三⻆-实线表示" tabindex="-1">三⻆ + 实线表示 <a class="header-anchor" href="#三⻆-实线表示" aria-label="Permalink to &quot;三⻆ + 实线表示&quot;">​</a></h3><h4 id="泛化关系为-is-a-的关系-xx是一个yy的子类" tabindex="-1">泛化关系为 is-a 的关系，xx是一个yy的子类 <a class="header-anchor" href="#泛化关系为-is-a-的关系-xx是一个yy的子类" aria-label="Permalink to &quot;泛化关系为 is-a 的关系，xx是一个yy的子类&quot;">​</a></h4><h2 id="实现关系" tabindex="-1">实现关系 <a class="header-anchor" href="#实现关系" aria-label="Permalink to &quot;实现关系&quot;">​</a></h2><h3 id="三⻆-虚线表示" tabindex="-1">三⻆ + 虚线表示 <a class="header-anchor" href="#三⻆-虚线表示" aria-label="Permalink to &quot;三⻆ + 虚线表示&quot;">​</a></h3><h4 id="开发里面的类-实现-接口" tabindex="-1">开发里面的类 实现 接口 <a class="header-anchor" href="#开发里面的类-实现-接口" aria-label="Permalink to &quot;开发里面的类 实现 接口&quot;">​</a></h4><h2 id="关联关系" tabindex="-1">关联关系 <a class="header-anchor" href="#关联关系" aria-label="Permalink to &quot;关联关系&quot;">​</a></h2><h3 id="尖括号-实线-表示" tabindex="-1">尖括号 + 实线 表示 <a class="header-anchor" href="#尖括号-实线-表示" aria-label="Permalink to &quot;尖括号 + 实线 表示&quot;">​</a></h3><h4 id="一个类中的-对象与对象-之间的引用关系-类中的-成员变量" tabindex="-1">一个类中的 对象与对象 之间的引用关系，类中的 成员变量 <a class="header-anchor" href="#一个类中的-对象与对象-之间的引用关系-类中的-成员变量" aria-label="Permalink to &quot;一个类中的 对象与对象 之间的引用关系，类中的 成员变量&quot;">​</a></h4><h2 id="组合关系" tabindex="-1">组合关系 <a class="header-anchor" href="#组合关系" aria-label="Permalink to &quot;组合关系&quot;">​</a></h2><h3 id="实心棱形-实线表示" tabindex="-1">实心棱形 + 实线表示 <a class="header-anchor" href="#实心棱形-实线表示" aria-label="Permalink to &quot;实心棱形 + 实线表示&quot;">​</a></h3><h4 id="属于强关联关系-由整体指向部分" tabindex="-1">属于强关联关系，由整体指向部分 <a class="header-anchor" href="#属于强关联关系-由整体指向部分" aria-label="Permalink to &quot;属于强关联关系，由整体指向部分&quot;">​</a></h4><h2 id="聚合关系" tabindex="-1">聚合关系 <a class="header-anchor" href="#聚合关系" aria-label="Permalink to &quot;聚合关系&quot;">​</a></h2><h3 id="空心棱形-实线表示" tabindex="-1">空心棱形 + 实线表示 <a class="header-anchor" href="#空心棱形-实线表示" aria-label="Permalink to &quot;空心棱形 + 实线表示&quot;">​</a></h3><h4 id="弱关联关系-由整体指向部分" tabindex="-1">弱关联关系 ，由整体指向部分 <a class="header-anchor" href="#弱关联关系-由整体指向部分" aria-label="Permalink to &quot;弱关联关系 ，由整体指向部分&quot;">​</a></h4><h1 id="如何上手公司项目" tabindex="-1">如何上手公司项目 <a class="header-anchor" href="#如何上手公司项目" aria-label="Permalink to &quot;如何上手公司项目&quot;">​</a></h1><h2 id="切记-不要直接看代码" tabindex="-1">切记：不要直接看代码 <a class="header-anchor" href="#切记-不要直接看代码" aria-label="Permalink to &quot;切记：不要直接看代码&quot;">​</a></h2><h2 id="看产品" tabindex="-1">看产品 <a class="header-anchor" href="#看产品" aria-label="Permalink to &quot;看产品&quot;">​</a></h2><h2 id="看产品需求文档" tabindex="-1">看产品需求文档 <a class="header-anchor" href="#看产品需求文档" aria-label="Permalink to &quot;看产品需求文档&quot;">​</a></h2><h2 id="看项目技术栈" tabindex="-1">看项目技术栈 <a class="header-anchor" href="#看项目技术栈" aria-label="Permalink to &quot;看项目技术栈&quot;">​</a></h2><h2 id="看项目技术架构图和部署环境" tabindex="-1">看项目技术架构图和部署环境 <a class="header-anchor" href="#看项目技术架构图和部署环境" aria-label="Permalink to &quot;看项目技术架构图和部署环境&quot;">​</a></h2><h2 id="看数据库er设计和关联关系、是否有分库分表" tabindex="-1">看数据库ER设计和关联关系、是否有分库分表 <a class="header-anchor" href="#看数据库er设计和关联关系、是否有分库分表" aria-label="Permalink to &quot;看数据库ER设计和关联关系、是否有分库分表&quot;">​</a></h2><h2 id="看团队负责的功能、模块、服务、包作用" tabindex="-1">看团队负责的功能、模块、服务、包作用 <a class="header-anchor" href="#看团队负责的功能、模块、服务、包作用" aria-label="Permalink to &quot;看团队负责的功能、模块、服务、包作用&quot;">​</a></h2><h2 id="调下团队负责的某个功能链路" tabindex="-1">调下团队负责的某个功能链路 <a class="header-anchor" href="#调下团队负责的某个功能链路" aria-label="Permalink to &quot;调下团队负责的某个功能链路&quot;">​</a></h2><h2 id="按照上述步骤看其他模块" tabindex="-1">按照上述步骤看其他模块 <a class="header-anchor" href="#按照上述步骤看其他模块" aria-label="Permalink to &quot;按照上述步骤看其他模块&quot;">​</a></h2><h1 id="如何衡量一个系统的架构设计目标" tabindex="-1">如何衡量一个系统的架构设计目标 <a class="header-anchor" href="#如何衡量一个系统的架构设计目标" aria-label="Permalink to &quot;如何衡量一个系统的架构设计目标&quot;">​</a></h1><h2 id="当下互联网项目面临的【核心大挑战】" tabindex="-1">当下互联网项目面临的【核心大挑战】 <a class="header-anchor" href="#当下互联网项目面临的【核心大挑战】" aria-label="Permalink to &quot;当下互联网项目面临的【核心大挑战】&quot;">​</a></h2><h3 id="业务发展需求变动快" tabindex="-1">业务发展需求变动快 <a class="header-anchor" href="#业务发展需求变动快" aria-label="Permalink to &quot;业务发展需求变动快&quot;">​</a></h3><h3 id="高并发大流量" tabindex="-1">高并发大流量 <a class="header-anchor" href="#高并发大流量" aria-label="Permalink to &quot;高并发大流量&quot;">​</a></h3><h3 id="海量数据" tabindex="-1">海量数据 <a class="header-anchor" href="#海量数据" aria-label="Permalink to &quot;海量数据&quot;">​</a></h3><h3 id="可用性" tabindex="-1">可用性 <a class="header-anchor" href="#可用性" aria-label="Permalink to &quot;可用性&quot;">​</a></h3><h3 id="网络-重点环境复杂" tabindex="-1">网络+重点环境复杂 <a class="header-anchor" href="#网络-重点环境复杂" aria-label="Permalink to &quot;网络+重点环境复杂&quot;">​</a></h3><h3 id="业务安全" tabindex="-1">业务安全 <a class="header-anchor" href="#业务安全" aria-label="Permalink to &quot;业务安全&quot;">​</a></h3><h2 id="架构目标" tabindex="-1">架构目标 <a class="header-anchor" href="#架构目标" aria-label="Permalink to &quot;架构目标&quot;">​</a></h2><h3 id="业务需求⻆度" tabindex="-1">业务需求⻆度 <a class="header-anchor" href="#业务需求⻆度" aria-label="Permalink to &quot;业务需求⻆度&quot;">​</a></h3><h4 id="高效-优质的解决当下业务需求问题" tabindex="-1">高效+优质的解决当下业务需求问题 <a class="header-anchor" href="#高效-优质的解决当下业务需求问题" aria-label="Permalink to &quot;高效+优质的解决当下业务需求问题&quot;">​</a></h4><h3 id="非业务需求⻆度" tabindex="-1">非业务需求⻆度 <a class="header-anchor" href="#非业务需求⻆度" aria-label="Permalink to &quot;非业务需求⻆度&quot;">​</a></h3><h4 id="高性能-请求延迟latency再多少ms以内" tabindex="-1">高性能: 请求延迟Latency再多少ms以内 <a class="header-anchor" href="#高性能-请求延迟latency再多少ms以内" aria-label="Permalink to &quot;高性能: 请求延迟Latency再多少ms以内&quot;">​</a></h4><h4 id="高可用-sla达到几个9" tabindex="-1">高可用: SLA达到几个9 <a class="header-anchor" href="#高可用-sla达到几个9" aria-label="Permalink to &quot;高可用: SLA达到几个9&quot;">​</a></h4><h4 id="高并发-每秒-tps-几万" tabindex="-1">高并发: 每秒 TPS 几万 <a class="header-anchor" href="#高并发-每秒-tps-几万" aria-label="Permalink to &quot;高并发: 每秒 TPS 几万&quot;">​</a></h4><h4 id="易扩展-业务变动易调整-合理业务逻辑抽象-事件驱动架构和分布式服务" tabindex="-1">易扩展: 业务变动易调整，合理业务逻辑抽象，事件驱动架构和分布式服务 <a class="header-anchor" href="#易扩展-业务变动易调整-合理业务逻辑抽象-事件驱动架构和分布式服务" aria-label="Permalink to &quot;易扩展: 业务变动易调整，合理业务逻辑抽象，事件驱动架构和分布式服务&quot;">​</a></h4><h4 id="可伸缩-快速水平伸缩-秒级扩容" tabindex="-1">可伸缩: 快速水平伸缩，秒级扩容 <a class="header-anchor" href="#可伸缩-快速水平伸缩-秒级扩容" aria-label="Permalink to &quot;可伸缩: 快速水平伸缩，秒级扩容&quot;">​</a></h4><h4 id="安全性-业务数据安全保证" tabindex="-1">安全性: 业务数据安全保证 <a class="header-anchor" href="#安全性-业务数据安全保证" aria-label="Permalink to &quot;安全性: 业务数据安全保证&quot;">​</a></h4><h3 id="总结-3" tabindex="-1">总结 <a class="header-anchor" href="#总结-3" aria-label="Permalink to &quot;总结&quot;">​</a></h3><h4 id="系统并非一蹴而就-架构目标也是随着变化-业务推送技术发展-技术反哺业务" tabindex="-1">系统并非一蹴而就，架构目标也是随着变化，业务推送技术发展，技术反哺业务 <a class="header-anchor" href="#系统并非一蹴而就-架构目标也是随着变化-业务推送技术发展-技术反哺业务" aria-label="Permalink to &quot;系统并非一蹴而就，架构目标也是随着变化，业务推送技术发展，技术反哺业务&quot;">​</a></h4><h4 id="系统和业务的演进-没有最好的架构-只有最适合的架构" tabindex="-1">系统和业务的演进，没有最好的架构，只有最适合的架构 <a class="header-anchor" href="#系统和业务的演进-没有最好的架构-只有最适合的架构" aria-label="Permalink to &quot;系统和业务的演进，没有最好的架构，只有最适合的架构&quot;">​</a></h4><h2 id="任何一个解决方案、架构方案提出都要说下优缺点-逼迫自己思考" tabindex="-1">任何一个解决方案、架构方案提出都要说下优缺点，逼迫自己思考 <a class="header-anchor" href="#任何一个解决方案、架构方案提出都要说下优缺点-逼迫自己思考" aria-label="Permalink to &quot;任何一个解决方案、架构方案提出都要说下优缺点，逼迫自己思考&quot;">​</a></h2><h3 id="对业务有很好的了解-快速高效的用户的痛点" tabindex="-1">对业务有很好的了解，快速高效的用户的痛点 <a class="header-anchor" href="#对业务有很好的了解-快速高效的用户的痛点" aria-label="Permalink to &quot;对业务有很好的了解，快速高效的用户的痛点&quot;">​</a></h3><h3 id="把简单的东⻄想复杂-控制好⻛险和准备好未来" tabindex="-1">把简单的东⻄想复杂，控制好⻛险和准备好未来 <a class="header-anchor" href="#把简单的东⻄想复杂-控制好⻛险和准备好未来" aria-label="Permalink to &quot;把简单的东⻄想复杂，控制好⻛险和准备好未来&quot;">​</a></h3><h3 id="把复杂的东⻄做简单-做好产品且控制好成本" tabindex="-1">把复杂的东⻄做简单，做好产品且控制好成本 <a class="header-anchor" href="#把复杂的东⻄做简单-做好产品且控制好成本" aria-label="Permalink to &quot;把复杂的东⻄做简单，做好产品且控制好成本&quot;">​</a></h3><h3 id="最后把复杂的东⻄讲简单-做好传承" tabindex="-1">最后把复杂的东⻄讲简单，做好传承 <a class="header-anchor" href="#最后把复杂的东⻄讲简单-做好传承" aria-label="Permalink to &quot;最后把复杂的东⻄讲简单，做好传承&quot;">​</a></h3><h1 id="如何找问题点" tabindex="-1">如何找问题点 <a class="header-anchor" href="#如何找问题点" aria-label="Permalink to &quot;如何找问题点&quot;">​</a></h1><blockquote><p>先有识别问题能力，再学解决问题能力</p></blockquote><h3 id="内部因素" tabindex="-1">内部因素 <a class="header-anchor" href="#内部因素" aria-label="Permalink to &quot;内部因素&quot;">​</a></h3><h4 id="水管效应-最细的水管是流量瓶颈" tabindex="-1">水管效应：最细的水管是流量瓶颈 <a class="header-anchor" href="#水管效应-最细的水管是流量瓶颈" aria-label="Permalink to &quot;水管效应：最细的水管是流量瓶颈&quot;">​</a></h4><h4 id="木桶效应-最低的木桶是容量的上限-当然可以倾斜" tabindex="-1">木桶效应：最低的木桶是容量的上限，当然可以倾斜 <a class="header-anchor" href="#木桶效应-最低的木桶是容量的上限-当然可以倾斜" aria-label="Permalink to &quot;木桶效应：最低的木桶是容量的上限，当然可以倾斜&quot;">​</a></h4><h4 id="常规四大件-哪些操作消耗四大件" tabindex="-1">常规四大件（哪些操作消耗四大件） <a class="header-anchor" href="#常规四大件-哪些操作消耗四大件" aria-label="Permalink to &quot;常规四大件（哪些操作消耗四大件）&quot;">​</a></h4><h5 id="cpu-序列化、大量线程、大量计算" tabindex="-1">CPU：序列化、大量线程、大量计算 <a class="header-anchor" href="#cpu-序列化、大量线程、大量计算" aria-label="Permalink to &quot;CPU：序列化、大量线程、大量计算&quot;">​</a></h5><h5 id="内存-大量对象产生-缓存使用-连接占据" tabindex="-1">内存：大量对象产生/缓存使用/连接占据 <a class="header-anchor" href="#内存-大量对象产生-缓存使用-连接占据" aria-label="Permalink to &quot;内存：大量对象产生/缓存使用/连接占据&quot;">​</a></h5><h5 id="带宽-大文件操作、突发流量" tabindex="-1">带宽：大文件操作、突发流量 <a class="header-anchor" href="#带宽-大文件操作、突发流量" aria-label="Permalink to &quot;带宽：大文件操作、突发流量&quot;">​</a></h5><h5 id="磁盘io-大量文件io、不合理日志、高频数据库操作" tabindex="-1">磁盘IO：大量文件IO、不合理日志、高频数据库操作 <a class="header-anchor" href="#磁盘io-大量文件io、不合理日志、高频数据库操作" aria-label="Permalink to &quot;磁盘IO：大量文件IO、不合理日志、高频数据库操作&quot;">​</a></h5><h4 id="案例-3" tabindex="-1">案例 <a class="header-anchor" href="#案例-3" aria-label="Permalink to &quot;案例&quot;">​</a></h4><h5 id="大促前批量服务扩容-每个服务占据了数据库连接-导致底层数据库连接不够" tabindex="-1">大促前批量服务扩容，每个服务占据了数据库连接，导致底层数据库连接不够 <a class="header-anchor" href="#大促前批量服务扩容-每个服务占据了数据库连接-导致底层数据库连接不够" aria-label="Permalink to &quot;大促前批量服务扩容，每个服务占据了数据库连接，导致底层数据库连接不够&quot;">​</a></h5><h5 id="双11修改下单地址失败-其他服务性能很好-但是这个导致了问题-从而链路奔溃" tabindex="-1">双11修改下单地址失败，其他服务性能很好，但是这个导致了问题，从而链路奔溃 <a class="header-anchor" href="#双11修改下单地址失败-其他服务性能很好-但是这个导致了问题-从而链路奔溃" aria-label="Permalink to &quot;双11修改下单地址失败，其他服务性能很好，但是这个导致了问题，从而链路奔溃&quot;">​</a></h5><h3 id="外部因素-三方服务" tabindex="-1">外部因素（三方服务） <a class="header-anchor" href="#外部因素-三方服务" aria-label="Permalink to &quot;外部因素（三方服务）&quot;">​</a></h3><h4 id="支付平台" tabindex="-1">支付平台 <a class="header-anchor" href="#支付平台" aria-label="Permalink to &quot;支付平台&quot;">​</a></h4><h5 id="支付中心-微信支付统一下单每秒600-qps-多账号策略-采用负载均衡方式进行操作" tabindex="-1">支付中心，微信支付统一下单每秒600- QPS， 多账号策略，采用负载均衡方式进行操作 <a class="header-anchor" href="#支付中心-微信支付统一下单每秒600-qps-多账号策略-采用负载均衡方式进行操作" aria-label="Permalink to &quot;支付中心，微信支付统一下单每秒600- QPS， 多账号策略，采用负载均衡方式进行操作&quot;">​</a></h5><h4 id="云产品-cdn-存储-计算能力" tabindex="-1">云产品: CDN/存储/计算能力 <a class="header-anchor" href="#云产品-cdn-存储-计算能力" aria-label="Permalink to &quot;云产品: CDN/存储/计算能力&quot;">​</a></h4><h5 id="节点网络覆盖度-产品本身的硬件资源问题" tabindex="-1">节点网络覆盖度 / 产品本身的硬件资源问题 <a class="header-anchor" href="#节点网络覆盖度-产品本身的硬件资源问题" aria-label="Permalink to &quot;节点网络覆盖度 / 产品本身的硬件资源问题&quot;">​</a></h5><h5 id="比如-视频cdn节点覆盖" tabindex="-1">比如 视频CDN节点覆盖 <a class="header-anchor" href="#比如-视频cdn节点覆盖" aria-label="Permalink to &quot;比如 视频CDN节点覆盖&quot;">​</a></h5><h2 id="互联网系统架构-三高下的架构设计" tabindex="-1">互联网系统架构-三高下的架构设计 <a class="header-anchor" href="#互联网系统架构-三高下的架构设计" aria-label="Permalink to &quot;互联网系统架构-三高下的架构设计&quot;">​</a></h2><h2 id="高并发" tabindex="-1">高并发 <a class="header-anchor" href="#高并发" aria-label="Permalink to &quot;高并发&quot;">​</a></h2><h3 id="tps" tabindex="-1">TPS <a class="header-anchor" href="#tps" aria-label="Permalink to &quot;TPS&quot;">​</a></h3><h4 id="transactions-per-second-每秒事务数-可以是一个接口、多个接口、一个业务流程-包括增删改操作" tabindex="-1">Transactions Per Second 每秒事务数，可以是一个接口、多个接口、一个业务流程, 包括增删改操作 <a class="header-anchor" href="#transactions-per-second-每秒事务数-可以是一个接口、多个接口、一个业务流程-包括增删改操作" aria-label="Permalink to &quot;Transactions Per Second 每秒事务数，可以是一个接口、多个接口、一个业务流程, 包括增删改操作&quot;">​</a></h4><h3 id="qps" tabindex="-1">QPS <a class="header-anchor" href="#qps" aria-label="Permalink to &quot;QPS&quot;">​</a></h3><h4 id="queries-per-second-每秒查询数-指一台服务器每秒能够响应的查询次数" tabindex="-1">Queries Per Second，每秒查询数，指一台服务器每秒能够响应的查询次数 <a class="header-anchor" href="#queries-per-second-每秒查询数-指一台服务器每秒能够响应的查询次数" aria-label="Permalink to &quot;Queries Per Second，每秒查询数，指一台服务器每秒能够响应的查询次数&quot;">​</a></h4><h4 id="qps-只是一个简单查询的统计-不能描述增删改等操作" tabindex="-1">QPS 只是一个简单查询的统计，不能描述增删改等操作 <a class="header-anchor" href="#qps-只是一个简单查询的统计-不能描述增删改等操作" aria-label="Permalink to &quot;QPS 只是一个简单查询的统计，不能描述增删改等操作&quot;">​</a></h4><h4 id="如果只是查询操作-tps-qps" tabindex="-1">如果只是查询操作 TPS = QPS <a class="header-anchor" href="#如果只是查询操作-tps-qps" aria-label="Permalink to &quot;如果只是查询操作 TPS = QPS&quot;">​</a></h4><h2 id="高可用" tabindex="-1">高可用 <a class="header-anchor" href="#高可用" aria-label="Permalink to &quot;高可用&quot;">​</a></h2><h3 id="sla-衡量一个系统可用性有多高-目标系统-7-x-24-小时不间断服务-云厂商在宣传自己产品sla时多少个9" tabindex="-1">SLA 衡量一个系统可用性有多高，目标系统 7 x 24 小时不间断服务，云厂商在宣传自己产品SLA时多少个9 <a class="header-anchor" href="#sla-衡量一个系统可用性有多高-目标系统-7-x-24-小时不间断服务-云厂商在宣传自己产品sla时多少个9" aria-label="Permalink to &quot;SLA 衡量一个系统可用性有多高，目标系统 7 x 24 小时不间断服务，云厂商在宣传自己产品SLA时多少个9&quot;">​</a></h3><h3 id="分类-2" tabindex="-1">分类 <a class="header-anchor" href="#分类-2" aria-label="Permalink to &quot;分类&quot;">​</a></h3><h4 id="时间维度" tabindex="-1">时间维度 <a class="header-anchor" href="#时间维度" aria-label="Permalink to &quot;时间维度&quot;">​</a></h4><h5 id="系统可以正常使用时间与总时间之比-全年为例子-1年-365天-8760小时" tabindex="-1">系统可以正常使用时间与总时间之比(全年为例子)1年 = 365天 = 8760小时 <a class="header-anchor" href="#系统可以正常使用时间与总时间之比-全年为例子-1年-365天-8760小时" aria-label="Permalink to &quot;系统可以正常使用时间与总时间之比(全年为例子)1年 = 365天 = 8760小时&quot;">​</a></h5><h6 id="_99-9-8760-0-1-8760-0-001-8-76小时" tabindex="-1">99.9 = 8760 0.1% = 8760 0.001 = 8.76小时 <a class="header-anchor" href="#_99-9-8760-0-1-8760-0-001-8-76小时" aria-label="Permalink to &quot;99.9 = 8760  0.1% = 8760  0.001 = 8.76小时&quot;">​</a></h6><h6 id="_99-99-8760-0-0001-0-876小时-0-87660-52-6分钟" tabindex="-1">99.99 = 8760 0.0001 = 0.876小时 = 0.87660 = 52.6分钟 <a class="header-anchor" href="#_99-99-8760-0-0001-0-876小时-0-87660-52-6分钟" aria-label="Permalink to &quot;99.99 = 8760  0.0001 = 0.876小时 = 0.87660 = 52.6分钟&quot;">​</a></h6><h6 id="_99-999-8760-0-00001-0-0876小时-0-087660-5-26分钟" tabindex="-1">99.999 = 8760 0.00001 = 0.0876小时 = 0.087660 = 5.26分钟 <a class="header-anchor" href="#_99-999-8760-0-00001-0-0876小时-0-087660-5-26分钟" aria-label="Permalink to &quot;99.999 = 8760  0.00001 = 0.0876小时 = 0.087660 = 5.26分钟&quot;">​</a></h6><h4 id="请求次数维度" tabindex="-1">请求次数维度 <a class="header-anchor" href="#请求次数维度" aria-label="Permalink to &quot;请求次数维度&quot;">​</a></h4><h5 id="请求总次数和失败的占比-1000次请求为例子-相对简单" tabindex="-1">请求总次数和失败的占比 ( 1000次请求为例子，相对简单 ) <a class="header-anchor" href="#请求总次数和失败的占比-1000次请求为例子-相对简单" aria-label="Permalink to &quot;请求总次数和失败的占比 ( 1000次请求为例子，相对简单 )&quot;">​</a></h5><h6 id="系统可用性99-表示1000个请求中允许1000-1-99-10个请求出错" tabindex="-1">系统可用性99%: 表示1000个请求中允许1000 * (1-99%) = 10个请求出错 <a class="header-anchor" href="#系统可用性99-表示1000个请求中允许1000-1-99-10个请求出错" aria-label="Permalink to &quot;系统可用性99%: 表示1000个请求中允许1000 * (1-99%) = 10个请求出错&quot;">​</a></h6><h6 id="系统可用性99-9-表示1000个请求中允许1000-1-99-9-1个请求出错。" tabindex="-1">系统可用性99.9%: 表示1000个请求中允许1000 * (1-99.9%) = 1个请求出错。 <a class="header-anchor" href="#系统可用性99-9-表示1000个请求中允许1000-1-99-9-1个请求出错。" aria-label="Permalink to &quot;系统可用性99.9%: 表示1000个请求中允许1000 * (1-99.9%) = 1个请求出错。&quot;">​</a></h6><h3 id="_9越多代表全年服务可用时间越⻓服务更可靠-停机时间越短" tabindex="-1">9越多代表全年服务可用时间越⻓服务更可靠，停机时间越短 <a class="header-anchor" href="#_9越多代表全年服务可用时间越⻓服务更可靠-停机时间越短" aria-label="Permalink to &quot;9越多代表全年服务可用时间越⻓服务更可靠，停机时间越短&quot;">​</a></h3><h3 id="但往往存在网络-机房问题-应用更新发版导致服务不可用" tabindex="-1">但往往存在网络/机房问题，应用更新发版导致服务不可用 <a class="header-anchor" href="#但往往存在网络-机房问题-应用更新发版导致服务不可用" aria-label="Permalink to &quot;但往往存在网络/机房问题，应用更新发版导致服务不可用&quot;">​</a></h3><h3 id="大厂多数业务4个9是刚需-5个9是目标-6个9是理想" tabindex="-1">大厂多数业务4个9是刚需，5个9是目标，6个9是理想 <a class="header-anchor" href="#大厂多数业务4个9是刚需-5个9是目标-6个9是理想" aria-label="Permalink to &quot;大厂多数业务4个9是刚需，5个9是目标，6个9是理想&quot;">​</a></h3><h2 id="高性能" tabindex="-1">高性能 <a class="header-anchor" href="#高性能" aria-label="Permalink to &quot;高性能&quot;">​</a></h2><h3 id="rt来衡量系统的响应速度-程序处理速度非常快延迟低latency-所占内存少-cpu占用率低" tabindex="-1">RT来衡量系统的响应速度，程序处理速度非常快延迟低Latency，所占内存少，cpu占用率低 <a class="header-anchor" href="#rt来衡量系统的响应速度-程序处理速度非常快延迟低latency-所占内存少-cpu占用率低" aria-label="Permalink to &quot;RT来衡量系统的响应速度，程序处理速度非常快延迟低Latency，所占内存少，cpu占用率低&quot;">​</a></h3><h3 id="比如系统处理一个-http-请求需要-100ms-这-100ms-就是系统的响应时间" tabindex="-1">比如系统处理一个 HTTP 请求需要 100ms，这 100ms 就是系统的响应时间 <a class="header-anchor" href="#比如系统处理一个-http-请求需要-100ms-这-100ms-就是系统的响应时间" aria-label="Permalink to &quot;比如系统处理一个 HTTP 请求需要 100ms，这 100ms 就是系统的响应时间&quot;">​</a></h3><h2 id="三高不是孤立的-而是相互支撑的影响的" tabindex="-1">三高不是孤立的，而是相互支撑的影响的 <a class="header-anchor" href="#三高不是孤立的-而是相互支撑的影响的" aria-label="Permalink to &quot;三高不是孤立的，而是相互支撑的影响的&quot;">​</a></h2><h3 id="高并发方面要求throughput-大于-10万" tabindex="-1">高并发方面要求Throughput 大于 10万 <a class="header-anchor" href="#高并发方面要求throughput-大于-10万" aria-label="Permalink to &quot;高并发方面要求Throughput 大于 10万&quot;">​</a></h3><h3 id="高性能方面要求请求延迟latency小于-100-ms" tabindex="-1">高性能方面要求请求延迟Latency小于 100 ms <a class="header-anchor" href="#高性能方面要求请求延迟latency小于-100-ms" aria-label="Permalink to &quot;高性能方面要求请求延迟Latency小于 100 ms&quot;">​</a></h3><h3 id="高可用方面要求系统可用性-sla高于-99-99" tabindex="-1">高可用方面要求系统可用性 SLA高于 99.99% <a class="header-anchor" href="#高可用方面要求系统可用性-sla高于-99-99" aria-label="Permalink to &quot;高可用方面要求系统可用性 SLA高于 99.99%&quot;">​</a></h3><h3 id="但随着并发量上来-请求延迟肯定增大-处理不过来则可用性就会下降" tabindex="-1">但随着并发量上来，请求延迟肯定增大，处理不过来则可用性就会下降 <a class="header-anchor" href="#但随着并发量上来-请求延迟肯定增大-处理不过来则可用性就会下降" aria-label="Permalink to &quot;但随着并发量上来，请求延迟肯定增大，处理不过来则可用性就会下降&quot;">​</a></h3><h2 id="高并发-高性能技术方案" tabindex="-1">高并发+高性能技术方案 <a class="header-anchor" href="#高并发-高性能技术方案" aria-label="Permalink to &quot;高并发+高性能技术方案&quot;">​</a></h2><h3 id="多大并发才算高并发" tabindex="-1">多大并发才算高并发? <a class="header-anchor" href="#多大并发才算高并发" aria-label="Permalink to &quot;多大并发才算高并发?&quot;">​</a></h3><h4 id="需要结合具体的场景和资源投入" tabindex="-1">需要结合具体的场景和资源投入 <a class="header-anchor" href="#需要结合具体的场景和资源投入" aria-label="Permalink to &quot;需要结合具体的场景和资源投入&quot;">​</a></h4><h5 id="_1万qps的商品列表查看不属于高并发-稍微结合缓存即可" tabindex="-1">1万QPS的商品列表查看不属于高并发，稍微结合缓存即可 <a class="header-anchor" href="#_1万qps的商品列表查看不属于高并发-稍微结合缓存即可" aria-label="Permalink to &quot;1万QPS的商品列表查看不属于高并发，稍微结合缓存即可&quot;">​</a></h5><h5 id="_5千tps的下单接口属于高并发-链路不一样" tabindex="-1">5千TPS的下单接口属于高并发，链路不一样 <a class="header-anchor" href="#_5千tps的下单接口属于高并发-链路不一样" aria-label="Permalink to &quot;5千TPS的下单接口属于高并发，链路不一样&quot;">​</a></h5><h3 id="系统架构" tabindex="-1">系统架构 <a class="header-anchor" href="#系统架构" aria-label="Permalink to &quot;系统架构&quot;">​</a></h3><h4 id="无状态业务-水平扩展-scale-out-只要增加服务器数量-就能线性扩充系统性能" tabindex="-1">无状态业务-水平扩展(Scale Out)，只要增加服务器数量，就能线性扩充系统性能 <a class="header-anchor" href="#无状态业务-水平扩展-scale-out-只要增加服务器数量-就能线性扩充系统性能" aria-label="Permalink to &quot;无状态业务-水平扩展(Scale Out)，只要增加服务器数量，就能线性扩充系统性能&quot;">​</a></h4><h4 id="架构的难点是难做到全链路的水平扩展" tabindex="-1">架构的难点是难做到全链路的水平扩展 <a class="header-anchor" href="#架构的难点是难做到全链路的水平扩展" aria-label="Permalink to &quot;架构的难点是难做到全链路的水平扩展&quot;">​</a></h4><h3 id="负载均衡-思想" tabindex="-1">[负载均衡]思想 <a class="header-anchor" href="#负载均衡-思想" aria-label="Permalink to &quot;[负载均衡]思想&quot;">​</a></h3><h4 id="节点轮询、随机、加权轮询、节点固定hash" tabindex="-1">节点轮询、随机、加权轮询、节点固定hash <a class="header-anchor" href="#节点轮询、随机、加权轮询、节点固定hash" aria-label="Permalink to &quot;节点轮询、随机、加权轮询、节点固定hash&quot;">​</a></h4><h4 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><h5 id="网络-dns解析轮询" tabindex="-1">网络 DNS解析轮询 <a class="header-anchor" href="#网络-dns解析轮询" aria-label="Permalink to &quot;网络 DNS解析轮询&quot;">​</a></h5><h5 id="网关分发请求后端服务" tabindex="-1">网关分发请求后端服务 <a class="header-anchor" href="#网关分发请求后端服务" aria-label="Permalink to &quot;网关分发请求后端服务&quot;">​</a></h5><h5 id="应用服务内部rpc负载均衡" tabindex="-1">应用服务内部RPC负载均衡 <a class="header-anchor" href="#应用服务内部rpc负载均衡" aria-label="Permalink to &quot;应用服务内部RPC负载均衡&quot;">​</a></h5><h5 id="数据存储-分库分表-负载分发" tabindex="-1">数据存储-分库分表-负载分发 <a class="header-anchor" href="#数据存储-分库分表-负载分发" aria-label="Permalink to &quot;数据存储-分库分表-负载分发&quot;">​</a></h5><h3 id="缓存-思想" tabindex="-1">[缓存]思想 <a class="header-anchor" href="#缓存-思想" aria-label="Permalink to &quot;[缓存]思想&quot;">​</a></h3><h4 id="本地缓存-分布式缓存" tabindex="-1">本地缓存/分布式缓存 <a class="header-anchor" href="#本地缓存-分布式缓存" aria-label="Permalink to &quot;本地缓存/分布式缓存&quot;">​</a></h4><h4 id="应用场景-1" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-1" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><h5 id="前端浏览器缓存静态资源" tabindex="-1">前端浏览器缓存静态资源 <a class="header-anchor" href="#前端浏览器缓存静态资源" aria-label="Permalink to &quot;前端浏览器缓存静态资源&quot;">​</a></h5><h5 id="网络dns解析缓存" tabindex="-1">网络DNS解析缓存 <a class="header-anchor" href="#网络dns解析缓存" aria-label="Permalink to &quot;网络DNS解析缓存&quot;">​</a></h5><h5 id="应用程序-内存缓存-分布式缓存" tabindex="-1">应用程序 内存缓存/分布式缓存 <a class="header-anchor" href="#应用程序-内存缓存-分布式缓存" aria-label="Permalink to &quot;应用程序 内存缓存/分布式缓存&quot;">​</a></h5><h5 id="数据存储mysql-query-cache" tabindex="-1">数据存储Mysql Query Cache <a class="header-anchor" href="#数据存储mysql-query-cache" aria-label="Permalink to &quot;数据存储Mysql Query Cache&quot;">​</a></h5><h3 id="池化复用-思想" tabindex="-1">[池化复用]思想 <a class="header-anchor" href="#池化复用-思想" aria-label="Permalink to &quot;[池化复用]思想&quot;">​</a></h3><h4 id="线程池-对象池-连接池-内存池" tabindex="-1">线程池/对象池/连接池/内存池 <a class="header-anchor" href="#线程池-对象池-连接池-内存池" aria-label="Permalink to &quot;线程池/对象池/连接池/内存池&quot;">​</a></h4><h4 id="应用场景-2" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-2" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><h5 id="java线程池技术" tabindex="-1">java线程池技术 <a class="header-anchor" href="#java线程池技术" aria-label="Permalink to &quot;java线程池技术&quot;">​</a></h5><h5 id="jdbc-redis-httpclient连接池" tabindex="-1">Jdbc/Redis/HttpClient连接池 <a class="header-anchor" href="#jdbc-redis-httpclient连接池" aria-label="Permalink to &quot;Jdbc/Redis/HttpClient连接池&quot;">​</a></h5><h5 id="springioc容器对象池" tabindex="-1">SpringIOC容器对象池 <a class="header-anchor" href="#springioc容器对象池" aria-label="Permalink to &quot;SpringIOC容器对象池&quot;">​</a></h5><h3 id="异步-思想" tabindex="-1">[异步]思想 <a class="header-anchor" href="#异步-思想" aria-label="Permalink to &quot;[异步]思想&quot;">​</a></h3><h4 id="多线程-消息队列" tabindex="-1">多线程/消息队列 <a class="header-anchor" href="#多线程-消息队列" aria-label="Permalink to &quot;多线程/消息队列&quot;">​</a></h4><h4 id="应用场景-3" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-3" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><h5 id="前端ajax异步请求" tabindex="-1">前端ajax异步请求 <a class="header-anchor" href="#前端ajax异步请求" aria-label="Permalink to &quot;前端ajax异步请求&quot;">​</a></h5><h5 id="rocketmq-kafka-同步双写-异步刷盘" tabindex="-1">RocketMQ/Kafka 同步双写-异步刷盘 <a class="header-anchor" href="#rocketmq-kafka-同步双写-异步刷盘" aria-label="Permalink to &quot;RocketMQ/Kafka 同步双写-异步刷盘&quot;">​</a></h5><h5 id="应用程序多线程异步处理" tabindex="-1">应用程序多线程异步处理 <a class="header-anchor" href="#应用程序多线程异步处理" aria-label="Permalink to &quot;应用程序多线程异步处理&quot;">​</a></h5><h3 id="预处理-惰性更新-思想" tabindex="-1">[预处理-惰性更新]思想 <a class="header-anchor" href="#预处理-惰性更新-思想" aria-label="Permalink to &quot;[预处理-惰性更新]思想&quot;">​</a></h3><h4 id="定时任务-懒加载" tabindex="-1">定时任务/懒加载 <a class="header-anchor" href="#定时任务-懒加载" aria-label="Permalink to &quot;定时任务/懒加载&quot;">​</a></h4><h4 id="应用场景-4" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-4" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><h5 id="运营后台报表数据-定时任务提前计算好" tabindex="-1">运营后台报表数据，定时任务提前计算好 <a class="header-anchor" href="#运营后台报表数据-定时任务提前计算好" aria-label="Permalink to &quot;运营后台报表数据，定时任务提前计算好&quot;">​</a></h5><h5 id="mybatis懒加载" tabindex="-1">Mybatis懒加载 <a class="header-anchor" href="#mybatis懒加载" aria-label="Permalink to &quot;Mybatis懒加载&quot;">​</a></h5><h3 id="分而治之-思想" tabindex="-1">[分而治之]思想 <a class="header-anchor" href="#分而治之-思想" aria-label="Permalink to &quot;[分而治之]思想&quot;">​</a></h3><h4 id="mater-worker" tabindex="-1">Mater-worker <a class="header-anchor" href="#mater-worker" aria-label="Permalink to &quot;Mater-worker&quot;">​</a></h4><h4 id="应用场景-5" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-5" aria-label="Permalink to &quot;应用场景&quot;">​</a></h4><h5 id="hadoop中的mapreduce" tabindex="-1">Hadoop中的MapReduce <a class="header-anchor" href="#hadoop中的mapreduce" aria-label="Permalink to &quot;Hadoop中的MapReduce&quot;">​</a></h5><h5 id="jdk-fork-join-framework" tabindex="-1">JDK. Fork/Join Framework <a class="header-anchor" href="#jdk-fork-join-framework" aria-label="Permalink to &quot;JDK. Fork/Join Framework&quot;">​</a></h5><h5 id="消息队列的广播消息" tabindex="-1">消息队列的广播消息 <a class="header-anchor" href="#消息队列的广播消息" aria-label="Permalink to &quot;消息队列的广播消息&quot;">​</a></h5><h5 id="归并排序算法" tabindex="-1">归并排序算法 <a class="header-anchor" href="#归并排序算法" aria-label="Permalink to &quot;归并排序算法&quot;">​</a></h5><h2 id="高可用技术方案" tabindex="-1">高可用技术方案 <a class="header-anchor" href="#高可用技术方案" aria-label="Permalink to &quot;高可用技术方案&quot;">​</a></h2><h3 id="冗余集群化-自动故障转移failover" tabindex="-1">冗余集群化 + 自动故障转移failover <a class="header-anchor" href="#冗余集群化-自动故障转移failover" aria-label="Permalink to &quot;冗余集群化 + 自动故障转移failover&quot;">​</a></h3><h3 id="集群架构" tabindex="-1">集群架构 <a class="header-anchor" href="#集群架构" aria-label="Permalink to &quot;集群架构&quot;">​</a></h3><h4 id="将多个相同的应用程序集中起来提供同一种服务-某个节点故障不影响系统" tabindex="-1">将多个相同的应用程序集中起来提供同一种服务，某个节点故障不影响系统 <a class="header-anchor" href="#将多个相同的应用程序集中起来提供同一种服务-某个节点故障不影响系统" aria-label="Permalink to &quot;将多个相同的应用程序集中起来提供同一种服务，某个节点故障不影响系统&quot;">​</a></h4><h4 id="可以横向扩展性增加节点提高并发处理能力" tabindex="-1">可以横向扩展性增加节点提高并发处理能力 <a class="header-anchor" href="#可以横向扩展性增加节点提高并发处理能力" aria-label="Permalink to &quot;可以横向扩展性增加节点提高并发处理能力&quot;">​</a></h4><h4 id="实际应用" tabindex="-1">实际应用 <a class="header-anchor" href="#实际应用" aria-label="Permalink to &quot;实际应用&quot;">​</a></h4><h5 id="微服务集群" tabindex="-1">微服务集群 <a class="header-anchor" href="#微服务集群" aria-label="Permalink to &quot;微服务集群&quot;">​</a></h5><h5 id="redis集群-kafka集群-nginx集群" tabindex="-1">Redis集群/Kafka集群/Nginx集群 <a class="header-anchor" href="#redis集群-kafka集群-nginx集群" aria-label="Permalink to &quot;Redis集群/Kafka集群/Nginx集群&quot;">​</a></h5><h5 id="nacos集群-mysql集群-zk集群" tabindex="-1">Nacos集群/Mysql集群/ZK集群 <a class="header-anchor" href="#nacos集群-mysql集群-zk集群" aria-label="Permalink to &quot;Nacos集群/Mysql集群/ZK集群&quot;">​</a></h5><h3 id="熔断降级" tabindex="-1">熔断降级 <a class="header-anchor" href="#熔断降级" aria-label="Permalink to &quot;熔断降级&quot;">​</a></h3><h4 id="保险丝-熔断服务-为了防止整个系统故障-抛弃一些非核心的接口和数据-返回兜底数据" tabindex="-1">保险丝，熔断服务，为了防止整个系统故障，抛弃一些非核心的接口和数据，返回兜底数据 <a class="header-anchor" href="#保险丝-熔断服务-为了防止整个系统故障-抛弃一些非核心的接口和数据-返回兜底数据" aria-label="Permalink to &quot;保险丝，熔断服务，为了防止整个系统故障，抛弃一些非核心的接口和数据，返回兜底数据&quot;">​</a></h4><h3 id="限流" tabindex="-1">限流 <a class="header-anchor" href="#限流" aria-label="Permalink to &quot;限流&quot;">​</a></h3><h4 id="当访问频率或者并发请求超过其承受范围的时候-考虑限流来保证接口的可用性" tabindex="-1">当访问频率或者并发请求超过其承受范围的时候，考虑限流来保证接口的可用性 <a class="header-anchor" href="#当访问频率或者并发请求超过其承受范围的时候-考虑限流来保证接口的可用性" aria-label="Permalink to &quot;当访问频率或者并发请求超过其承受范围的时候，考虑限流来保证接口的可用性&quot;">​</a></h4><h4 id="漏斗模型-不管流量多大均匀的流入容器-令牌桶算法-漏桶算法" tabindex="-1">漏斗模型，不管流量多大均匀的流入容器，令牌桶算法，漏桶算法 <a class="header-anchor" href="#漏斗模型-不管流量多大均匀的流入容器-令牌桶算法-漏桶算法" aria-label="Permalink to &quot;漏斗模型，不管流量多大均匀的流入容器，令牌桶算法，漏桶算法&quot;">​</a></h4><h3 id="隔离" tabindex="-1">隔离 <a class="header-anchor" href="#隔离" aria-label="Permalink to &quot;隔离&quot;">​</a></h3><h4 id="服务和资源互相隔离-比如网络资源-机器资源-线程资源等-不会因为某个服务的资源不足而抢占其他服务的资源" tabindex="-1">服务和资源互相隔离，比如网络资源，机器资源，线程资源等，不会因为某个服务的资源不足而抢占其他服务的资源 <a class="header-anchor" href="#服务和资源互相隔离-比如网络资源-机器资源-线程资源等-不会因为某个服务的资源不足而抢占其他服务的资源" aria-label="Permalink to &quot;服务和资源互相隔离，比如网络资源，机器资源，线程资源等，不会因为某个服务的资源不足而抢占其他服务的资源&quot;">​</a></h4><h3 id="多活架构" tabindex="-1">多活架构 <a class="header-anchor" href="#多活架构" aria-label="Permalink to &quot;多活架构&quot;">​</a></h3><h4 id="同城双活-双机房" tabindex="-1">同城双活-双机房 <a class="header-anchor" href="#同城双活-双机房" aria-label="Permalink to &quot;同城双活-双机房&quot;">​</a></h4><h5 id="两个机房部署在同城-物理距离较近-两个机房用「专线」网络连接-比单个机房内延迟要大一些-但整体的延迟是可以接受的" tabindex="-1">两个机房部署在同城，物理距离较近，两个机房用「专线」网络连接，比单个机房内延迟要大一些，但整体的延迟是可以接受的 <a class="header-anchor" href="#两个机房部署在同城-物理距离较近-两个机房用「专线」网络连接-比单个机房内延迟要大一些-但整体的延迟是可以接受的" aria-label="Permalink to &quot;两个机房部署在同城，物理距离较近，两个机房用「专线」网络连接，比单个机房内延迟要大一些，但整体的延迟是可以接受的&quot;">​</a></h5><h3 id="异地多活-两地三中心" tabindex="-1">异地多活-两地三中心 <a class="header-anchor" href="#异地多活-两地三中心" aria-label="Permalink to &quot;异地多活-两地三中心&quot;">​</a></h3><h4 id="两地是指-2-个城市-三中心是指有-3-个机房-其中-2-个机房在同一个城市" tabindex="-1">两地是指 2 个城市，三中心是指有 3 个机房，其中 2 个机房在同一个城市 <a class="header-anchor" href="#两地是指-2-个城市-三中心是指有-3-个机房-其中-2-个机房在同一个城市" aria-label="Permalink to &quot;两地是指 2 个城市，三中心是指有 3 个机房，其中 2 个机房在同一个城市&quot;">​</a></h4><h4 id="同时提供服务-第-3-个机房部署在异地-只做数据灾备" tabindex="-1">同时提供服务，第 3 个机房部署在异地，只做数据灾备 <a class="header-anchor" href="#同时提供服务-第-3-个机房部署在异地-只做数据灾备" aria-label="Permalink to &quot;同时提供服务，第 3 个机房部署在异地，只做数据灾备&quot;">​</a></h4><h1 id="操作系统的缓存" tabindex="-1">操作系统的缓存 <a class="header-anchor" href="#操作系统的缓存" aria-label="Permalink to &quot;操作系统的缓存&quot;">​</a></h1><h2 id="buffer和cache" tabindex="-1">Buffer和Cache <a class="header-anchor" href="#buffer和cache" aria-label="Permalink to &quot;Buffer和Cache&quot;">​</a></h2><h3 id="buffer-是对磁盘数据的缓存-cache-是文件数据的缓存-两者既会用在读请求-也会用在写请求-只不过是多和少区别" tabindex="-1">Buffer 是对磁盘数据的缓存, Cache 是文件数据的缓存，两者既会用在读请求，也会用在写请求，只不过是多和少区别 <a class="header-anchor" href="#buffer-是对磁盘数据的缓存-cache-是文件数据的缓存-两者既会用在读请求-也会用在写请求-只不过是多和少区别" aria-label="Permalink to &quot;Buffer 是对磁盘数据的缓存, Cache 是文件数据的缓存，两者既会用在读请求，也会用在写请求，只不过是多和少区别&quot;">​</a></h3><h3 id="缓冲-buffer-是用来加速数据-写入-硬盘-保存即将要写入到磁盘上的数据" tabindex="-1">缓冲(buffer)是用来加速数据&quot;写入&quot;硬盘，保存即将要写入到磁盘上的数据 <a class="header-anchor" href="#缓冲-buffer-是用来加速数据-写入-硬盘-保存即将要写入到磁盘上的数据" aria-label="Permalink to &quot;缓冲(buffer)是用来加速数据&quot;写入&quot;硬盘，保存即将要写入到磁盘上的数据&quot;">​</a></h3><h3 id="缓存-cache-是保存从磁盘上读出的数据-用来加速数据从硬盘中-读取" tabindex="-1">缓存(cache)是保存从磁盘上读出的数据，用来加速数据从硬盘中&quot;读取&quot; <a class="header-anchor" href="#缓存-cache-是保存从磁盘上读出的数据-用来加速数据从硬盘中-读取" aria-label="Permalink to &quot;缓存(cache)是保存从磁盘上读出的数据，用来加速数据从硬盘中&quot;读取&quot;&quot;">​</a></h3><h3 id="cache-和-buffer-的是为了解决-高速设备和低速设备之间的问题而设计的中间层-通过-流量整形-提高系统性能" tabindex="-1">Cache 和 Buffer 的是为了解决 高速设备和低速设备之间的问题而设计的中间层，通过“流量整形”提高系统性能 <a class="header-anchor" href="#cache-和-buffer-的是为了解决-高速设备和低速设备之间的问题而设计的中间层-通过-流量整形-提高系统性能" aria-label="Permalink to &quot;Cache 和 Buffer 的是为了解决 高速设备和低速设备之间的问题而设计的中间层，通过“流量整形”提高系统性能&quot;">​</a></h3><h4 id="cache-将低速设备中常被访问的数据缓存起来" tabindex="-1">Cache 将低速设备中常被访问的数据缓存起来 <a class="header-anchor" href="#cache-将低速设备中常被访问的数据缓存起来" aria-label="Permalink to &quot;Cache 将低速设备中常被访问的数据缓存起来&quot;">​</a></h4><h5 id="当高速设备需要再次访问这些数据时-命中-cache-中的数据-以减少对低速设备的访问" tabindex="-1">当高速设备需要再次访问这些数据时，命中 Cache 中的数据，以减少对低速设备的访问 <a class="header-anchor" href="#当高速设备需要再次访问这些数据时-命中-cache-中的数据-以减少对低速设备的访问" aria-label="Permalink to &quot;当高速设备需要再次访问这些数据时，命中 Cache 中的数据，以减少对低速设备的访问&quot;">​</a></h5><h4 id="buffer-用于缓冲高速设备把数据写到低速设备时带来的压力" tabindex="-1">Buffer 用于缓冲高速设备把数据写到低速设备时带来的压力 <a class="header-anchor" href="#buffer-用于缓冲高速设备把数据写到低速设备时带来的压力" aria-label="Permalink to &quot;Buffer 用于缓冲高速设备把数据写到低速设备时带来的压力&quot;">​</a></h4><h5 id="当数据量比较大时-buffer能将数据分割成合适的大小-分批回写到磁盘" tabindex="-1">当数据量比较大时，Buffer能将数据分割成合适的大小，分批回写到磁盘 <a class="header-anchor" href="#当数据量比较大时-buffer能将数据分割成合适的大小-分批回写到磁盘" aria-label="Permalink to &quot;当数据量比较大时，Buffer能将数据分割成合适的大小，分批回写到磁盘&quot;">​</a></h5><h5 id="当数据量比较小的时候-buffer-能将分散的写操作集中进行-减少磁盘碎片和硬盘的反复寻道" tabindex="-1">当数据量比较小的时候，Buffer 能将分散的写操作集中进行，减少磁盘碎片和硬盘的反复寻道 <a class="header-anchor" href="#当数据量比较小的时候-buffer-能将分散的写操作集中进行-减少磁盘碎片和硬盘的反复寻道" aria-label="Permalink to &quot;当数据量比较小的时候，Buffer 能将分散的写操作集中进行，减少磁盘碎片和硬盘的反复寻道&quot;">​</a></h5><h1 id="磁盘和io" tabindex="-1">磁盘和IO <a class="header-anchor" href="#磁盘和io" aria-label="Permalink to &quot;磁盘和IO&quot;">​</a></h1><h2 id="为啥io读写性能差别那么大" tabindex="-1">为啥IO读写性能差别那么大 <a class="header-anchor" href="#为啥io读写性能差别那么大" aria-label="Permalink to &quot;为啥IO读写性能差别那么大&quot;">​</a></h2><h3 id="dd-命令实践" tabindex="-1">dd 命令实践 <a class="header-anchor" href="#dd-命令实践" aria-label="Permalink to &quot;dd 命令实践&quot;">​</a></h3><h4 id="dd-用指定大小的块-拷⻉一个文件-并在拷⻉的同时进行指定的转换-下面是参数" tabindex="-1"><code>dd</code>: 用指定大小的块 拷⻉一个文件，并在拷⻉的同时进行指定的转换，下面是参数 <a class="header-anchor" href="#dd-用指定大小的块-拷⻉一个文件-并在拷⻉的同时进行指定的转换-下面是参数" aria-label="Permalink to &quot;`dd`: 用指定大小的块 拷⻉一个文件，并在拷⻉的同时进行指定的转换，下面是参数&quot;">​</a></h4><h5 id="if-文件名-输入文件名-缺省为标准输入-即指定源文件。-if-input-file" tabindex="-1"><code>if = 文件名</code>: 输入文件名，缺省为标准输入，即指定源文件。<code>&lt; if = input file &gt;</code> <a class="header-anchor" href="#if-文件名-输入文件名-缺省为标准输入-即指定源文件。-if-input-file" aria-label="Permalink to &quot;`if = 文件名`: 输入文件名，缺省为标准输入，即指定源文件。`&lt; if = input file &gt;`&quot;">​</a></h5><h5 id="of-文件名-输出文件名-缺省为标准输出-即指定目的文件。-of-output-file" tabindex="-1"><code>of = 文件名</code>: 输出文件名，缺省为标准输出，即指定目的文件。 <code>&lt; of = output file &gt;</code> <a class="header-anchor" href="#of-文件名-输出文件名-缺省为标准输出-即指定目的文件。-of-output-file" aria-label="Permalink to &quot;`of = 文件名`: 输出文件名，缺省为标准输出，即指定目的文件。 `&lt; of = output file &gt;`&quot;">​</a></h5><h5 id="bs-bytes-同时设置读入-输出的块大小为bytes个字节-可代替-ibs-和-obs" tabindex="-1"><code>bs = bytes</code>: 同时设置读入/输出的块大小为bytes个字节, 可代替 ibs 和 obs <a class="header-anchor" href="#bs-bytes-同时设置读入-输出的块大小为bytes个字节-可代替-ibs-和-obs" aria-label="Permalink to &quot;`bs = bytes`: 同时设置读入/输出的块大小为bytes个字节, 可代替 ibs 和 obs&quot;">​</a></h5><h5 id="count-blocks-仅拷⻉blocks个块-块大小等于指定的字节数" tabindex="-1"><code>count = blocks</code>: 仅拷⻉blocks个块，块大小等于指定的字节数 <a class="header-anchor" href="#count-blocks-仅拷⻉blocks个块-块大小等于指定的字节数" aria-label="Permalink to &quot;`count = blocks`: 仅拷⻉blocks个块，块大小等于指定的字节数&quot;">​</a></h5><h6 id="bs是每次读或写的大小-即一个块的大小-count是读写块的数􏰀" tabindex="-1">bs是每次读或写的大小，即一个块的大小，count是读写块的数􏰀 <a class="header-anchor" href="#bs是每次读或写的大小-即一个块的大小-count是读写块的数􏰀" aria-label="Permalink to &quot;bs是每次读或写的大小，即一个块的大小，count是读写块的数􏰀&quot;">​</a></h6><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#操作一</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 释放所有缓存</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/sys/vm/drop_caches</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if=/dev/zero</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of=xdclass_testio1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bs=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#操作二</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/sys/vm/drop_caches</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if=/dev/zero</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of=xdclass_testio2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bs=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oflag=direct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#操作三</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /proc/sys/vm/drop_caches</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> if=/dev/zero</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of=xdclass_testio3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bs=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">M</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> count=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1024</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> oflag=sync</span></span></code></pre></div><p><img src="'+b+'" alt="image.png"></p><h4 id="结果" tabindex="-1">结果 <a class="header-anchor" href="#结果" aria-label="Permalink to &quot;结果&quot;">​</a></h4><h5 id="有oflag的时候-文件复制速度是-oflag-direct-的多倍" tabindex="-1">有<code>oflag</code>的时候，文件复制速度是 <code>oflag=direct</code> 的多倍 <a class="header-anchor" href="#有oflag的时候-文件复制速度是-oflag-direct-的多倍" aria-label="Permalink to &quot;有`oflag`的时候，文件复制速度是 `oflag=direct` 的多倍&quot;">​</a></h5><h6 id="原因-默认是buffered-i-o-数据写到缓存层便返回-所以速度最快" tabindex="-1">原因：默认是<code>buffered I/O</code>，数据写到缓存层便返回，所以速度最快 <a class="header-anchor" href="#原因-默认是buffered-i-o-数据写到缓存层便返回-所以速度最快" aria-label="Permalink to &quot;原因：默认是`buffered I/O`，数据写到缓存层便返回，所以速度最快&quot;">​</a></h6><h5 id="oflag-direct的速度又比-oflag-sync-快了点" tabindex="-1"><code>oflag=direct</code>的速度又比 <code>oflag=sync</code> 快了点 <a class="header-anchor" href="#oflag-direct的速度又比-oflag-sync-快了点" aria-label="Permalink to &quot;`oflag=direct`的速度又比 `oflag=sync` 快了点&quot;">​</a></h5><h6 id="原因-数据写到磁盘缓存便返回-所以速度比上面的buffered-i-o方式要慢" tabindex="-1">原因：数据写到磁盘缓存便返回，所以速度比上面的<code>buffered I/O</code>方式要慢 <a class="header-anchor" href="#原因-数据写到磁盘缓存便返回-所以速度比上面的buffered-i-o方式要慢" aria-label="Permalink to &quot;原因：数据写到磁盘缓存便返回，所以速度比上面的`buffered I/O`方式要慢&quot;">​</a></h6><h5 id="oflag-sync-的速度最慢" tabindex="-1"><code>oflag=sync</code> 的速度最慢 <a class="header-anchor" href="#oflag-sync-的速度最慢" aria-label="Permalink to &quot;`oflag=sync` 的速度最慢&quot;">​</a></h5><h6 id="原因-写入的数据全部落盘才返回-所以速度比上面的仅写到磁盘缓存要慢" tabindex="-1">原因：写入的数据全部落盘才返回，所以速度比上面的仅写到磁盘缓存要慢 <a class="header-anchor" href="#原因-写入的数据全部落盘才返回-所以速度比上面的仅写到磁盘缓存要慢" aria-label="Permalink to &quot;原因：写入的数据全部落盘才返回，所以速度比上面的仅写到磁盘缓存要慢&quot;">​</a></h6><h6 id="物理磁盘也会带有缓存-disk-cache-用于提供i-o速度-一般磁盘中带有电容-断电也能把缓存数据刷写到磁盘中" tabindex="-1">物理磁盘也会带有缓存 disk cache，用于提供I/O速度, 一般磁盘中带有电容，断电也能把缓存数据刷写到磁盘中 <a class="header-anchor" href="#物理磁盘也会带有缓存-disk-cache-用于提供i-o速度-一般磁盘中带有电容-断电也能把缓存数据刷写到磁盘中" aria-label="Permalink to &quot;物理磁盘也会带有缓存 disk cache，用于提供I/O速度, 一般磁盘中带有电容，断电也能把缓存数据刷写到磁盘中&quot;">​</a></h6><h2 id="操作系统io和虚拟文件系统vfs" tabindex="-1">操作系统IO和虚拟文件系统VFS <a class="header-anchor" href="#操作系统io和虚拟文件系统vfs" aria-label="Permalink to &quot;操作系统IO和虚拟文件系统VFS&quot;">​</a></h2><h3 id="什么是操作系统io" tabindex="-1">什么是操作系统IO <a class="header-anchor" href="#什么是操作系统io" aria-label="Permalink to &quot;什么是操作系统IO&quot;">​</a></h3><h4 id="输入-input-和输出-output-或者读-read-和写-write" tabindex="-1">输入(Input)和输出(Output)，或者读(Read)和写(Write) <a class="header-anchor" href="#输入-input-和输出-output-或者读-read-和写-write" aria-label="Permalink to &quot;输入(Input)和输出(Output)，或者读(Read)和写(Write)&quot;">​</a></h4><h4 id="i-o模式可以划分为本地io模型-内存、磁盘-和网络io模型" tabindex="-1">I/O模式可以划分为本地IO模型(内存、磁盘)和网络IO模型 <a class="header-anchor" href="#i-o模式可以划分为本地io模型-内存、磁盘-和网络io模型" aria-label="Permalink to &quot;I/O模式可以划分为本地IO模型(内存、磁盘)和网络IO模型&quot;">​</a></h4><h4 id="i-o关联到用户空间和内核空间的转换。也称为用户缓冲区和内核缓冲区" tabindex="-1">I/O关联到用户空间和内核空间的转换。也称为用户缓冲区和内核缓冲区 <a class="header-anchor" href="#i-o关联到用户空间和内核空间的转换。也称为用户缓冲区和内核缓冲区" aria-label="Permalink to &quot;I/O关联到用户空间和内核空间的转换。也称为用户缓冲区和内核缓冲区&quot;">​</a></h4><h4 id="用户态的应用程序不能直接操作内核空间-需要将数据从内核空间拷⻉到用户空间才能使用" tabindex="-1">用户态的应用程序不能直接操作内核空间，需要将数据从内核空间拷⻉到用户空间才能使用 <a class="header-anchor" href="#用户态的应用程序不能直接操作内核空间-需要将数据从内核空间拷⻉到用户空间才能使用" aria-label="Permalink to &quot;用户态的应用程序不能直接操作内核空间，需要将数据从内核空间拷⻉到用户空间才能使用&quot;">​</a></h4><h5 id="read和write操作-都只能在内核空间里执行" tabindex="-1">read和write操作，都只能在内核空间里执行 <a class="header-anchor" href="#read和write操作-都只能在内核空间里执行" aria-label="Permalink to &quot;read和write操作，都只能在内核空间里执行&quot;">​</a></h5><h5 id="磁盘io和网络io请求都是先放在内核空间-然后加载到内存的数据" tabindex="-1">磁盘IO和网络IO请求都是先放在内核空间，然后加载到内存的数据 <a class="header-anchor" href="#磁盘io和网络io请求都是先放在内核空间-然后加载到内存的数据" aria-label="Permalink to &quot;磁盘IO和网络IO请求都是先放在内核空间，然后加载到内存的数据&quot;">​</a></h5><h3 id="什么是文件系统" tabindex="-1">什么是文件系统 <a class="header-anchor" href="#什么是文件系统" aria-label="Permalink to &quot;什么是文件系统&quot;">​</a></h3><h4 id="在-linux-中一切皆文件-文件系统是管理磁盘上的全部文件-文件管理组织方式多种多样-所以文件系统存在多样化" tabindex="-1">在 Linux 中一切皆文件，文件系统是管理磁盘上的全部文件，文件管理组织方式多种多样，所以文件系统存在多样化 <a class="header-anchor" href="#在-linux-中一切皆文件-文件系统是管理磁盘上的全部文件-文件管理组织方式多种多样-所以文件系统存在多样化" aria-label="Permalink to &quot;在 Linux 中一切皆文件，文件系统是管理磁盘上的全部文件，文件管理组织方式多种多样，所以文件系统存在多样化&quot;">​</a></h4><h4 id="q-系统把文件持久化存储在磁盘上-那很多文件怎么管理和使用呢" tabindex="-1">Q: 系统把文件持久化存储在磁盘上，那很多文件怎么管理和使用呢? <a class="header-anchor" href="#q-系统把文件持久化存储在磁盘上-那很多文件怎么管理和使用呢" aria-label="Permalink to &quot;Q: 系统把文件持久化存储在磁盘上，那很多文件怎么管理和使用呢?&quot;">​</a></h4><h5 id="这个就是文件系统的职责-实现文件数据的查询和存储" tabindex="-1">这个就是文件系统的职责，实现文件数据的查询和存储 <a class="header-anchor" href="#这个就是文件系统的职责-实现文件数据的查询和存储" aria-label="Permalink to &quot;这个就是文件系统的职责，实现文件数据的查询和存储&quot;">​</a></h5><h5 id="文件系统是管理数据-而存储数据的物理设备有硬盘、u-盘、sd-卡、网络存储设备等" tabindex="-1">文件系统是管理数据，而存储数据的物理设备有硬盘、U 盘、SD 卡、网络存储设备等 <a class="header-anchor" href="#文件系统是管理数据-而存储数据的物理设备有硬盘、u-盘、sd-卡、网络存储设备等" aria-label="Permalink to &quot;文件系统是管理数据，而存储数据的物理设备有硬盘、U 盘、SD 卡、网络存储设备等&quot;">​</a></h5><h5 id="不同的存储设备其物理结构不同-不同的物理结构就需要不同的文件系统去管理" tabindex="-1">不同的存储设备其物理结构不同，不同的物理结构就需要不同的文件系统去管理 <a class="header-anchor" href="#不同的存储设备其物理结构不同-不同的物理结构就需要不同的文件系统去管理" aria-label="Permalink to &quot;不同的存储设备其物理结构不同，不同的物理结构就需要不同的文件系统去管理&quot;">​</a></h5><h5 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h5><h6 id="windows有fat12、fat16、fat32、ntfs、exfat等文件系统" tabindex="-1">Windows有FAT12、FAT16、FAT32、NTFS、exFAT等文件系统 <a class="header-anchor" href="#windows有fat12、fat16、fat32、ntfs、exfat等文件系统" aria-label="Permalink to &quot;Windows有FAT12、FAT16、FAT32、NTFS、exFAT等文件系统&quot;">​</a></h6><h6 id="linux有ext2、ext3、ext4、tmpfs、nfs等文件系统" tabindex="-1">Linux有Ext2、Ext3、Ext4、tmpfs、NFS等文件系统 <a class="header-anchor" href="#linux有ext2、ext3、ext4、tmpfs、nfs等文件系统" aria-label="Permalink to &quot;Linux有Ext2、Ext3、Ext4、tmpfs、NFS等文件系统&quot;">​</a></h6><h4 id="查询系统用了哪些的文件系统-df-h-t" tabindex="-1">查询系统用了哪些的文件系统 <code>df -h -T</code> <a class="header-anchor" href="#查询系统用了哪些的文件系统-df-h-t" aria-label="Permalink to &quot;查询系统用了哪些的文件系统 `df -h -T`&quot;">​</a></h4><p><img src="'+q+'" alt="image.png"></p><h4 id="两个核心概念" tabindex="-1">两个核心概念 <a class="header-anchor" href="#两个核心概念" aria-label="Permalink to &quot;两个核心概念&quot;">​</a></h4><h5 id="索引节点-index-node" tabindex="-1">索引节点(index node) <a class="header-anchor" href="#索引节点-index-node" aria-label="Permalink to &quot;索引节点(index node)&quot;">​</a></h5><h6 id="简称inode-记录文件的元信息-比如文件大小、访问权限、修改日期、数据存储位置等" tabindex="-1">简称inode ，记录文件的元信息，比如文件大小、访问权限、修改日期、数据存储位置等 <a class="header-anchor" href="#简称inode-记录文件的元信息-比如文件大小、访问权限、修改日期、数据存储位置等" aria-label="Permalink to &quot;简称inode ，记录文件的元信息，比如文件大小、访问权限、修改日期、数据存储位置等&quot;">​</a></h6><h6 id="索引节点也需要持久化存储-占用磁盘空间。" tabindex="-1">索引节点也需要持久化存储，占用磁盘空间。 <a class="header-anchor" href="#索引节点也需要持久化存储-占用磁盘空间。" aria-label="Permalink to &quot;索引节点也需要持久化存储，占用磁盘空间。&quot;">​</a></h6><h5 id="目录项-directory-entry" tabindex="-1">目录项(directory entry) <a class="header-anchor" href="#目录项-directory-entry" aria-label="Permalink to &quot;目录项(directory entry)&quot;">​</a></h5><h6 id="简称为-dentry-记录目录结构-比如文件的名字、索引节点指和其他目录项的关联关系等-树状结构居多" tabindex="-1">简称为 dentry，记录目录结构，比如文件的名字、索引节点指和其他目录项的关联关系等，树状结构居多 <a class="header-anchor" href="#简称为-dentry-记录目录结构-比如文件的名字、索引节点指和其他目录项的关联关系等-树状结构居多" aria-label="Permalink to &quot;简称为 dentry，记录目录结构，比如文件的名字、索引节点指和其他目录项的关联关系等，树状结构居多&quot;">​</a></h6><h6 id="存储在内存中-也叫目录项缓存。" tabindex="-1">存储在内存中，也叫目录项缓存。 <a class="header-anchor" href="#存储在内存中-也叫目录项缓存。" aria-label="Permalink to &quot;存储在内存中，也叫目录项缓存。&quot;">​</a></h6><h3 id="虚拟文件系统vfs-virtual-file-system" tabindex="-1">虚拟文件系统VFS(virtual File System) <a class="header-anchor" href="#虚拟文件系统vfs-virtual-file-system" aria-label="Permalink to &quot;虚拟文件系统VFS(virtual File System)&quot;">​</a></h3><h4 id="q-操作系统上有那么多的文件系统和物理存储介质-应用程序怎么编写使用呢" tabindex="-1">Q: 操作系统上有那么多的文件系统和物理存储介质，应用程序怎么编写使用呢? <a class="header-anchor" href="#q-操作系统上有那么多的文件系统和物理存储介质-应用程序怎么编写使用呢" aria-label="Permalink to &quot;Q: 操作系统上有那么多的文件系统和物理存储介质，应用程序怎么编写使用呢?&quot;">​</a></h4><h5 id="虚拟文件系统就是做这个-调用读写位于不同物理介质上的不同文件系统-为各类文件系统提-供统一的接口进行交互" tabindex="-1">虚拟文件系统就是做这个，调用读写位于不同物理介质上的不同文件系统, 为各类文件系统提 供统一的接口进行交互 <a class="header-anchor" href="#虚拟文件系统就是做这个-调用读写位于不同物理介质上的不同文件系统-为各类文件系统提-供统一的接口进行交互" aria-label="Permalink to &quot;虚拟文件系统就是做这个，调用读写位于不同物理介质上的不同文件系统, 为各类文件系统提 供统一的接口进行交互&quot;">​</a></h5><h5 id="在应用程序和具体的文件系统之间引入了一个抽象层-开发者不用关心底层的存储介质和文-件系统类型就可以使用" tabindex="-1">在应用程序和具体的文件系统之间引入了一个抽象层，开发者不用关心底层的存储介质和文 件系统类型就可以使用 <a class="header-anchor" href="#在应用程序和具体的文件系统之间引入了一个抽象层-开发者不用关心底层的存储介质和文-件系统类型就可以使用" aria-label="Permalink to &quot;在应用程序和具体的文件系统之间引入了一个抽象层，开发者不用关心底层的存储介质和文 件系统类型就可以使用&quot;">​</a></h5><h4 id="linux的io存储栈简略图" tabindex="-1">Linux的IO存储栈简略图 <a class="header-anchor" href="#linux的io存储栈简略图" aria-label="Permalink to &quot;Linux的IO存储栈简略图&quot;">​</a></h4><p><img src="'+f+'" alt=""></p><h5 id="平时调用-write-的时候-数据是从应用写入到了c标准库的io-buffer-存在用户态" tabindex="-1">平时调用 write 的时候，数据是从应用写入到了C标准库的IO Buffer(存在用户态) <a class="header-anchor" href="#平时调用-write-的时候-数据是从应用写入到了c标准库的io-buffer-存在用户态" aria-label="Permalink to &quot;平时调用 write 的时候，数据是从应用写入到了C标准库的IO Buffer(存在用户态)&quot;">​</a></h5><h5 id="在关闭流之前flush下文件-通过flush将数据主动写入到内核的page-cache中-应用挂了-数据也安全-存在内核态" tabindex="-1">在关闭流之前flush下文件，通过flush将数据主动写入到内核的Page Cache中，应用挂了，数据也安全(存在内核态) <a class="header-anchor" href="#在关闭流之前flush下文件-通过flush将数据主动写入到内核的page-cache中-应用挂了-数据也安全-存在内核态" aria-label="Permalink to &quot;在关闭流之前flush下文件，通过flush将数据主动写入到内核的Page Cache中，应用挂了，数据也安全(存在内核态)&quot;">​</a></h5><h5 id="将内核中的page-cache中的数据写入到磁盘-缓存-中-系统挂了-数据也安全-需要调用-fsync-存在持久化介质" tabindex="-1">将内核中的Page Cache中的数据写入到磁盘(缓存)中，系统挂了，数据也安全，需要调用 fsync(存在持久化介质) <a class="header-anchor" href="#将内核中的page-cache中的数据写入到磁盘-缓存-中-系统挂了-数据也安全-需要调用-fsync-存在持久化介质" aria-label="Permalink to &quot;将内核中的Page Cache中的数据写入到磁盘(缓存)中，系统挂了，数据也安全，需要调用 fsync(存在持久化介质)&quot;">​</a></h5><h4 id="总结-4" tabindex="-1">总结 <a class="header-anchor" href="#总结-4" aria-label="Permalink to &quot;总结&quot;">​</a></h4><h5 id="操作系统的多级缓存和数据的可用性" tabindex="-1">操作系统的多级缓存和数据的可用性 <a class="header-anchor" href="#操作系统的多级缓存和数据的可用性" aria-label="Permalink to &quot;操作系统的多级缓存和数据的可用性&quot;">​</a></h5><h6 id="操作系统也是程序-人家程序员也要考虑高性能" tabindex="-1">操作系统也是程序，人家程序员也要考虑高性能 <a class="header-anchor" href="#操作系统也是程序-人家程序员也要考虑高性能" aria-label="Permalink to &quot;操作系统也是程序，人家程序员也要考虑高性能&quot;">​</a></h6><h6 id="高性能-多线程异步、多级缓存" tabindex="-1">高性能: 多线程异步、多级缓存 <a class="header-anchor" href="#高性能-多线程异步、多级缓存" aria-label="Permalink to &quot;高性能: 多线程异步、多级缓存&quot;">​</a></h6><h5 id="对比日常开发的java微服务项目" tabindex="-1">对比日常开发的java微服务项目 <a class="header-anchor" href="#对比日常开发的java微服务项目" aria-label="Permalink to &quot;对比日常开发的java微服务项目&quot;">​</a></h5><h6 id="多线程异步操作-响应快" tabindex="-1">多线程异步操作，响应快 <a class="header-anchor" href="#多线程异步操作-响应快" aria-label="Permalink to &quot;多线程异步操作，响应快&quot;">​</a></h6><h6 id="微服务里面的多级缓存-guava本地缓存和redis分布式缓存" tabindex="-1">微服务里面的多级缓存 ，guava本地缓存和redis分布式缓存 <a class="header-anchor" href="#微服务里面的多级缓存-guava本地缓存和redis分布式缓存" aria-label="Permalink to &quot;微服务里面的多级缓存 ，guava本地缓存和redis分布式缓存&quot;">​</a></h6><h2 id="cpu内核态和用户态切换" tabindex="-1">CPU内核态和用户态切换 <a class="header-anchor" href="#cpu内核态和用户态切换" aria-label="Permalink to &quot;CPU内核态和用户态切换&quot;">​</a></h2><h3 id="用户态切换和内核态切换就是上下文切换" tabindex="-1">用户态切换和内核态切换就是上下文切换 <a class="header-anchor" href="#用户态切换和内核态切换就是上下文切换" aria-label="Permalink to &quot;用户态切换和内核态切换就是上下文切换&quot;">​</a></h3><h4 id="相当于不同权限访问级别-比如-应用程序只能操作有限的权限-而操作系统可以操作更底层的权限" tabindex="-1">相当于不同权限访问级别，比如：应用程序只能操作有限的权限，而操作系统可以操作更底层的权限 <a class="header-anchor" href="#相当于不同权限访问级别-比如-应用程序只能操作有限的权限-而操作系统可以操作更底层的权限" aria-label="Permalink to &quot;相当于不同权限访问级别，比如：应用程序只能操作有限的权限，而操作系统可以操作更底层的权限&quot;">​</a></h4><h3 id="cpu向磁盘写数据-要先经过buffer缓冲区-然后把缓冲区的数据分批写入磁盘中" tabindex="-1">CPU向磁盘写数据，要先经过buffer缓冲区，然后把缓冲区的数据分批写入磁盘中 <a class="header-anchor" href="#cpu向磁盘写数据-要先经过buffer缓冲区-然后把缓冲区的数据分批写入磁盘中" aria-label="Permalink to &quot;CPU向磁盘写数据，要先经过buffer缓冲区，然后把缓冲区的数据分批写入磁盘中&quot;">​</a></h3><h2 id="固态硬盘和标记整理回收" tabindex="-1">固态硬盘和标记整理回收 <a class="header-anchor" href="#固态硬盘和标记整理回收" aria-label="Permalink to &quot;固态硬盘和标记整理回收&quot;">​</a></h2><h3 id="固态磁盘ssd" tabindex="-1">固态磁盘SSD <a class="header-anchor" href="#固态磁盘ssd" aria-label="Permalink to &quot;固态磁盘SSD&quot;">​</a></h3><h4 id="固态电子元器件组成-没有盘片、磁臂等机械部件-不需要磁道寻址-靠电容存储数据" tabindex="-1">固态电子元器件组成，没有盘片、磁臂等机械部件，不需要磁道寻址，靠电容存储数据 <a class="header-anchor" href="#固态电子元器件组成-没有盘片、磁臂等机械部件-不需要磁道寻址-靠电容存储数据" aria-label="Permalink to &quot;固态电子元器件组成，没有盘片、磁臂等机械部件，不需要磁道寻址，靠电容存储数据&quot;">​</a></h4><h4 id="某块区域存在数据-机械硬盘写入可以直接覆盖-而固态硬盘需要先擦出-再写入" tabindex="-1">某块区域存在数据，机械硬盘写入可以直接覆盖;而固态硬盘需要先擦出，再写入 <a class="header-anchor" href="#某块区域存在数据-机械硬盘写入可以直接覆盖-而固态硬盘需要先擦出-再写入" aria-label="Permalink to &quot;某块区域存在数据，机械硬盘写入可以直接覆盖;而固态硬盘需要先擦出，再写入&quot;">​</a></h4><h5 id="block块-擦的越多寿命就越短-业务数据高频更新-则不太建议使用固态硬盘" tabindex="-1">block块 擦的越多寿命就越短，业务数据高频更新，则不太建议使用固态硬盘 <a class="header-anchor" href="#block块-擦的越多寿命就越短-业务数据高频更新-则不太建议使用固态硬盘" aria-label="Permalink to &quot;block块 擦的越多寿命就越短，业务数据高频更新，则不太建议使用固态硬盘&quot;">​</a></h5><h4 id="最小读写单位是⻚-通常大小是-4kb、8kb" tabindex="-1">最小读写单位是⻚，通常大小是 4KB、8KB <a class="header-anchor" href="#最小读写单位是⻚-通常大小是-4kb、8kb" aria-label="Permalink to &quot;最小读写单位是⻚，通常大小是 4KB、8KB&quot;">​</a></h4><h4 id="性能高-iops可以达到几万以上-价格比机械硬盘贵-寿命较短" tabindex="-1">性能高，IOPS可以达到几万以上；价格比机械硬盘贵，寿命较短 <a class="header-anchor" href="#性能高-iops可以达到几万以上-价格比机械硬盘贵-寿命较短" aria-label="Permalink to &quot;性能高，IOPS可以达到几万以上；价格比机械硬盘贵，寿命较短&quot;">​</a></h4><h4 id="组成结构" tabindex="-1">组成结构 <a class="header-anchor" href="#组成结构" aria-label="Permalink to &quot;组成结构&quot;">​</a></h4><h5 id="ssd-多个裸片组成" tabindex="-1">SSD 多个裸片组成 <a class="header-anchor" href="#ssd-多个裸片组成" aria-label="Permalink to &quot;SSD 多个裸片组成&quot;">​</a></h5><h5 id="裸片-多个平面组" tabindex="-1">裸片 多个平面组 <a class="header-anchor" href="#裸片-多个平面组" aria-label="Permalink to &quot;裸片 多个平面组&quot;">​</a></h5><h5 id="平面-plane-多个blcok组成" tabindex="-1">平面 plane(多个blcok组成) <a class="header-anchor" href="#平面-plane-多个blcok组成" aria-label="Permalink to &quot;平面 plane(多个blcok组成)&quot;">​</a></h5><h5 id="块-block-通常64个page组成一个block" tabindex="-1">块 block(通常64个page组成一个block) <a class="header-anchor" href="#块-block-通常64个page组成一个block" aria-label="Permalink to &quot;块 block(通常64个page组成一个block)&quot;">​</a></h5><h5 id="⻚-page-4k" tabindex="-1">⻚ page 4k <a class="header-anchor" href="#⻚-page-4k" aria-label="Permalink to &quot;⻚ page 4k&quot;">​</a></h5><h3 id="磁盘的擦除数据" tabindex="-1">磁盘的擦除数据 <a class="header-anchor" href="#磁盘的擦除数据" aria-label="Permalink to &quot;磁盘的擦除数据&quot;">​</a></h3><p><img src="'+k+'" alt="image.png"></p><h4 id="ssd里面最小读写单位是page-但是最小擦除单位是block" tabindex="-1">SSD里面最小读写单位是page，但是最小擦除单位是block <a class="header-anchor" href="#ssd里面最小读写单位是page-但是最小擦除单位是block" aria-label="Permalink to &quot;SSD里面最小读写单位是page，但是最小擦除单位是block&quot;">​</a></h4><h5 id="一个块上的某些⻚的数据被标记删除-不能直接擦除这些的⻚-除非整个块上的⻚都被标记删除" tabindex="-1">一个块上的某些⻚的数据被标记删除，不能直接擦除这些的⻚，除非整个块上的⻚都被标记删除 <a class="header-anchor" href="#一个块上的某些⻚的数据被标记删除-不能直接擦除这些的⻚-除非整个块上的⻚都被标记删除" aria-label="Permalink to &quot;一个块上的某些⻚的数据被标记删除，不能直接擦除这些的⻚，除非整个块上的⻚都被标记删除&quot;">​</a></h5><h5 id="块还有其它有效数据-当有新数据只能写入白色区域-并不能利用红色区域-时间越⻓-不能被使用的碎片越多" tabindex="-1">块还有其它有效数据，当有新数据只能写入白色区域，并不能利用红色区域，时间越⻓，不能被使用的碎片越多 <a class="header-anchor" href="#块还有其它有效数据-当有新数据只能写入白色区域-并不能利用红色区域-时间越⻓-不能被使用的碎片越多" aria-label="Permalink to &quot;块还有其它有效数据，当有新数据只能写入白色区域，并不能利用红色区域，时间越⻓，不能被使用的碎片越多&quot;">​</a></h5><h4 id="解决方案-gc-garbagecollection-垃圾回收" tabindex="-1">解决方案 GC(Garbagecollection)垃圾回收 <a class="header-anchor" href="#解决方案-gc-garbagecollection-垃圾回收" aria-label="Permalink to &quot;解决方案 GC(Garbagecollection)垃圾回收&quot;">​</a></h4><h5 id="有一套标记整理机制程序-有效-⻚数据复制到一个-空白-块里-然后把这个块完全擦除" tabindex="-1">有一套标记整理机制程序，&quot;有效&quot;⻚数据复制到一个&quot;空白&quot;块里，然后把这个块完全擦除 <a class="header-anchor" href="#有一套标记整理机制程序-有效-⻚数据复制到一个-空白-块里-然后把这个块完全擦除" aria-label="Permalink to &quot;有一套标记整理机制程序，&quot;有效&quot;⻚数据复制到一个&quot;空白&quot;块里，然后把这个块完全擦除&quot;">​</a></h5><h5 id="那些被移动出数据的块上面的⻚要么没数据-要么是标记删除的数据-直接对这个块进行擦除" tabindex="-1">那些被移动出数据的块上面的⻚要么没数据，要么是标记删除的数据，直接对这个块进行擦除 <a class="header-anchor" href="#那些被移动出数据的块上面的⻚要么没数据-要么是标记删除的数据-直接对这个块进行擦除" aria-label="Permalink to &quot;那些被移动出数据的块上面的⻚要么没数据，要么是标记删除的数据，直接对这个块进行擦除&quot;">​</a></h5><h5 id="擦除数据类似jvm的gc-标记整理-mark-compact" tabindex="-1">擦除数据类似JVM的GC，标记整理 Mark Compact <a class="header-anchor" href="#擦除数据类似jvm的gc-标记整理-mark-compact" aria-label="Permalink to &quot;擦除数据类似JVM的GC，标记整理 Mark Compact&quot;">​</a></h5><h6 id="先对对象进行一个标记-看看哪些对象是垃圾" tabindex="-1">先对对象进行一个标记，看看哪些对象是垃圾 <a class="header-anchor" href="#先对对象进行一个标记-看看哪些对象是垃圾" aria-label="Permalink to &quot;先对对象进行一个标记，看看哪些对象是垃圾&quot;">​</a></h6><h6 id="整理会在清除的过程中-把可用的对象向前移动-让内存更为紧凑-避免内存碎片的产生" tabindex="-1">整理会在清除的过程中，把可用的对象向前移动，让内存更为紧凑，避免内存碎片的产生 <a class="header-anchor" href="#整理会在清除的过程中-把可用的对象向前移动-让内存更为紧凑-避免内存碎片的产生" aria-label="Permalink to &quot;整理会在清除的过程中，把可用的对象向前移动，让内存更为紧凑，避免内存碎片的产生&quot;">​</a></h6><h6 id="整理之后发现内存更紧凑-连续的空间更多-就不会造成内存碎片的问题" tabindex="-1">整理之后发现内存更紧凑，连续的空间更多，就不会造成内存碎片的问题 <a class="header-anchor" href="#整理之后发现内存更紧凑-连续的空间更多-就不会造成内存碎片的问题" aria-label="Permalink to &quot;整理之后发现内存更紧凑，连续的空间更多，就不会造成内存碎片的问题&quot;">​</a></h6><h4 id="业务选择-没有绝对-公司有钱另说" tabindex="-1">业务选择(没有绝对，公司有钱另说) <a class="header-anchor" href="#业务选择-没有绝对-公司有钱另说" aria-label="Permalink to &quot;业务选择(没有绝对，公司有钱另说)&quot;">​</a></h4><h5 id="业务大量写日志系统-时间滚动会定期清除老旧的日志-日志一般读的少" tabindex="-1">业务大量写日志系统，时间滚动会定期清除老旧的日志，日志一般读的少 <a class="header-anchor" href="#业务大量写日志系统-时间滚动会定期清除老旧的日志-日志一般读的少" aria-label="Permalink to &quot;业务大量写日志系统，时间滚动会定期清除老旧的日志，日志一般读的少&quot;">​</a></h5><h5 id="大量擦出会导致ssd寿命变短-所以不适合存放在ssd硬盘上-应该用hdd硬盘" tabindex="-1">大量擦出会导致SSD寿命变短，所以不适合存放在SSD硬盘上，应该用HDD硬盘 <a class="header-anchor" href="#大量擦出会导致ssd寿命变短-所以不适合存放在ssd硬盘上-应该用hdd硬盘" aria-label="Permalink to &quot;大量擦出会导致SSD寿命变短，所以不适合存放在SSD硬盘上，应该用HDD硬盘&quot;">​</a></h5><h1 id="操作系统的io技术底层机制和应用" tabindex="-1">操作系统的IO技术底层机制和应用 <a class="header-anchor" href="#操作系统的io技术底层机制和应用" aria-label="Permalink to &quot;操作系统的IO技术底层机制和应用&quot;">​</a></h1><h2 id="cpu的外包小弟dma技术" tabindex="-1">CPU的外包小弟DMA技术 <a class="header-anchor" href="#cpu的外包小弟dma技术" aria-label="Permalink to &quot;CPU的外包小弟DMA技术&quot;">​</a></h2><h3 id="dma-direct-memory-access" tabindex="-1">DMA (Direct Memory Access) <a class="header-anchor" href="#dma-direct-memory-access" aria-label="Permalink to &quot;DMA (Direct Memory Access)&quot;">​</a></h3><p><img src="'+m+'" alt="image.png"></p><h4 id="直接内存访问-直接内存访问是计算机科学中的一种内存访问技术" tabindex="-1">直接内存访问，直接内存访问是计算机科学中的一种内存访问技术 <a class="header-anchor" href="#直接内存访问-直接内存访问是计算机科学中的一种内存访问技术" aria-label="Permalink to &quot;直接内存访问，直接内存访问是计算机科学中的一种内存访问技术&quot;">​</a></h4><h4 id="dma之前-要把外设的数据读入内存或把内存的数据传送到外设-一般都要通过-cpu控制完成-利用中断技术" tabindex="-1">DMA之前: 要把外设的数据读入内存或把内存的数据传送到外设，一般都要通过 CPU控制完成，利用中断技术 <a class="header-anchor" href="#dma之前-要把外设的数据读入内存或把内存的数据传送到外设-一般都要通过-cpu控制完成-利用中断技术" aria-label="Permalink to &quot;DMA之前: 要把外设的数据读入内存或把内存的数据传送到外设，一般都要通过 CPU控制完成，利用中断技术&quot;">​</a></h4><h4 id="允许某些硬件系统能够独立于-cpu-直接读写操作系统的内存-不需中央处理器-cpu-介入处理" tabindex="-1">允许某些硬件系统能够独立于 CPU 直接读写操作系统的内存，不需中央处理器(CPU)介入处理 <a class="header-anchor" href="#允许某些硬件系统能够独立于-cpu-直接读写操作系统的内存-不需中央处理器-cpu-介入处理" aria-label="Permalink to &quot;允许某些硬件系统能够独立于 CPU 直接读写操作系统的内存，不需中央处理器(CPU)介入处理&quot;">​</a></h4><h4 id="数据传输操作在一个-dma-控制器-dmac-的控制下进行-在传输过程中-cpu-可以继续进行其它的工作" tabindex="-1">数据传输操作在一个 DMA 控制器(DMAC)的控制下进行，在传输过程中 CPU 可以继续进行其它的工作 <a class="header-anchor" href="#数据传输操作在一个-dma-控制器-dmac-的控制下进行-在传输过程中-cpu-可以继续进行其它的工作" aria-label="Permalink to &quot;数据传输操作在一个 DMA 控制器(DMAC)的控制下进行，在传输过程中 CPU 可以继续进行其它的工作&quot;">​</a></h4><h4 id="在大部分时间cpu和-i-o-操作都处于并行状态-系统的效率更高" tabindex="-1">在大部分时间CPU和 I/O 操作都处于并行状态，系统的效率更高 <a class="header-anchor" href="#在大部分时间cpu和-i-o-操作都处于并行状态-系统的效率更高" aria-label="Permalink to &quot;在大部分时间CPU和 I/O 操作都处于并行状态，系统的效率更高&quot;">​</a></h4><h3 id="应用程序的读写数据" tabindex="-1">应用程序的读写数据 <a class="header-anchor" href="#应用程序的读写数据" aria-label="Permalink to &quot;应用程序的读写数据&quot;">​</a></h3><p><img src="'+P+'" alt="image.png"></p><h3 id="dma的工作总结" tabindex="-1">DMA的工作总结 <a class="header-anchor" href="#dma的工作总结" aria-label="Permalink to &quot;DMA的工作总结&quot;">​</a></h3><h4 id="读-从磁盘的缓冲区到内核缓冲区的拷⻉工作" tabindex="-1">(读)从磁盘的缓冲区到内核缓冲区的拷⻉工作 <a class="header-anchor" href="#读-从磁盘的缓冲区到内核缓冲区的拷⻉工作" aria-label="Permalink to &quot;(读)从磁盘的缓冲区到内核缓冲区的拷⻉工作&quot;">​</a></h4><h4 id="读-从网卡设备到内核的soket-buffer的拷⻉工作" tabindex="-1">(读)从网卡设备到内核的soket buffer的拷⻉工作 <a class="header-anchor" href="#读-从网卡设备到内核的soket-buffer的拷⻉工作" aria-label="Permalink to &quot;(读)从网卡设备到内核的soket buffer的拷⻉工作&quot;">​</a></h4><h4 id="写-从内核缓冲区到磁盘缓冲区的拷⻉工作" tabindex="-1">(写)从内核缓冲区到磁盘缓冲区的拷⻉工作 <a class="header-anchor" href="#写-从内核缓冲区到磁盘缓冲区的拷⻉工作" aria-label="Permalink to &quot;(写)从内核缓冲区到磁盘缓冲区的拷⻉工作&quot;">​</a></h4><h4 id="写-从内核的soket-buffer到网卡设备的拷⻉工作" tabindex="-1">(写)从内核的soket buffer到网卡设备的拷⻉工作 <a class="header-anchor" href="#写-从内核的soket-buffer到网卡设备的拷⻉工作" aria-label="Permalink to &quot;(写)从内核的soket buffer到网卡设备的拷⻉工作&quot;">​</a></h4><h4 id="但是-内核缓冲区到用户缓冲区之间的拷⻉工作仍然由cpu负责" tabindex="-1">但是: 内核缓冲区到用户缓冲区之间的拷⻉工作仍然由CPU负责 <a class="header-anchor" href="#但是-内核缓冲区到用户缓冲区之间的拷⻉工作仍然由cpu负责" aria-label="Permalink to &quot;但是: 内核缓冲区到用户缓冲区之间的拷⻉工作仍然由CPU负责&quot;">​</a></h4><h3 id="dma技术里面的损耗" tabindex="-1">DMA技术里面的损耗 <a class="header-anchor" href="#dma技术里面的损耗" aria-label="Permalink to &quot;DMA技术里面的损耗&quot;">​</a></h3><h4 id="cpu的用户态和内核态切换" tabindex="-1">CPU的用户态和内核态切换 <a class="header-anchor" href="#cpu的用户态和内核态切换" aria-label="Permalink to &quot;CPU的用户态和内核态切换&quot;">​</a></h4><h4 id="cpu的内存拷⻉损耗" tabindex="-1">CPU的内存拷⻉损耗 <a class="header-anchor" href="#cpu的内存拷⻉损耗" aria-label="Permalink to &quot;CPU的内存拷⻉损耗&quot;">​</a></h4><h3 id="下图应用程序从磁盘读取数据发送到网络上的损耗-程序需要两个命令。先read读取-再write写出" tabindex="-1">下图应用程序从磁盘读取数据发送到网络上的损耗，程序需要两个命令。先read读取，再write写出 <a class="header-anchor" href="#下图应用程序从磁盘读取数据发送到网络上的损耗-程序需要两个命令。先read读取-再write写出" aria-label="Permalink to &quot;下图应用程序从磁盘读取数据发送到网络上的损耗，程序需要两个命令。先read读取，再write写出&quot;">​</a></h3><p><img src="'+x+'" alt="image.png"></p><h4 id="四次内核态和用户态的切换" tabindex="-1">四次内核态和用户态的切换 <a class="header-anchor" href="#四次内核态和用户态的切换" aria-label="Permalink to &quot;四次内核态和用户态的切换&quot;">​</a></h4><h4 id="四次缓冲区的拷⻉" tabindex="-1">四次缓冲区的拷⻉ <a class="header-anchor" href="#四次缓冲区的拷⻉" aria-label="Permalink to &quot;四次缓冲区的拷⻉&quot;">​</a></h4><h5 id="读取-磁盘缓冲区到内核缓冲区-dma" tabindex="-1">读取: 磁盘缓冲区到内核缓冲区(DMA) <a class="header-anchor" href="#读取-磁盘缓冲区到内核缓冲区-dma" aria-label="Permalink to &quot;读取: 磁盘缓冲区到内核缓冲区(DMA)&quot;">​</a></h5><h5 id="读取-内核缓冲区到用户缓冲区-cpu" tabindex="-1">读取: 内核缓冲区到用户缓冲区(CPU) <a class="header-anchor" href="#读取-内核缓冲区到用户缓冲区-cpu" aria-label="Permalink to &quot;读取: 内核缓冲区到用户缓冲区(CPU)&quot;">​</a></h5><h5 id="写出-用户缓冲区到内核缓冲区socket-buffer-cpu" tabindex="-1">写出: 用户缓冲区到内核缓冲区Socket Buffer(CPU) <a class="header-anchor" href="#写出-用户缓冲区到内核缓冲区socket-buffer-cpu" aria-label="Permalink to &quot;写出: 用户缓冲区到内核缓冲区Socket Buffer(CPU)&quot;">​</a></h5><h5 id="写出-内核缓冲区的socket-buffer到网卡设备-dma" tabindex="-1">写出: 内核缓冲区的Socket Buffer到网卡设备(DMA) <a class="header-anchor" href="#写出-内核缓冲区的socket-buffer到网卡设备-dma" aria-label="Permalink to &quot;写出: 内核缓冲区的Socket Buffer到网卡设备(DMA)&quot;">​</a></h5><h4 id="性能损耗操作" tabindex="-1">性能损耗操作 <a class="header-anchor" href="#性能损耗操作" aria-label="Permalink to &quot;性能损耗操作&quot;">​</a></h4><h5 id="_2次dma拷⻉、2次cpu拷⻉、4次内核态用户态切换" tabindex="-1">2次DMA拷⻉、2次CPU拷⻉、4次内核态用户态切换 <a class="header-anchor" href="#_2次dma拷⻉、2次cpu拷⻉、4次内核态用户态切换" aria-label="Permalink to &quot;2次DMA拷⻉、2次CPU拷⻉、4次内核态用户态切换&quot;">​</a></h5><h5 id="计算机大神们怎么会容忍这类浪费呢-所以就诞生了零拷⻉" tabindex="-1">计算机大神们怎么会容忍这类浪费呢，所以就诞生了零拷⻉ <a class="header-anchor" href="#计算机大神们怎么会容忍这类浪费呢-所以就诞生了零拷⻉" aria-label="Permalink to &quot;计算机大神们怎么会容忍这类浪费呢，所以就诞生了零拷⻉&quot;">​</a></h5><h2 id="什么是零拷⻉zerocopy" tabindex="-1">什么是零拷⻉ZeroCopy <a class="header-anchor" href="#什么是零拷⻉zerocopy" aria-label="Permalink to &quot;什么是零拷⻉ZeroCopy&quot;">​</a></h2><h3 id="只需要拷⻉2-3次-和-2-4的内核态和用户态的切换即可" tabindex="-1">只需要拷⻉2\\3次 和 2\\4的内核态和用户态的切换即可 <a class="header-anchor" href="#只需要拷⻉2-3次-和-2-4的内核态和用户态的切换即可" aria-label="Permalink to &quot;只需要拷⻉2\\3次 和 2\\4的内核态和用户态的切换即可&quot;">​</a></h3><h3 id="zerocopy技术实现有两种-内核态和用户态切换次数不一样" tabindex="-1">ZeroCopy技术实现有两种(内核态和用户态切换次数不一样) <a class="header-anchor" href="#zerocopy技术实现有两种-内核态和用户态切换次数不一样" aria-label="Permalink to &quot;ZeroCopy技术实现有两种(内核态和用户态切换次数不一样)&quot;">​</a></h3><h4 id="方式一-mmap-write" tabindex="-1">方式一 mmap + write <a class="header-anchor" href="#方式一-mmap-write" aria-label="Permalink to &quot;方式一 mmap + write&quot;">​</a></h4><p><img src="'+p+'" alt="image.png"></p><h5 id="虚拟地址-通过多级⻚表-映射物理地址" tabindex="-1">虚拟地址 通过多级⻚表 映射物理地址 <a class="header-anchor" href="#虚拟地址-通过多级⻚表-映射物理地址" aria-label="Permalink to &quot;虚拟地址 通过多级⻚表 映射物理地址&quot;">​</a></h5><h5 id="_2次dma拷⻉、1次cpu拷⻉、4次内核态用户态切换" tabindex="-1">2次DMA拷⻉、1次CPU拷⻉、4次内核态用户态切换 <a class="header-anchor" href="#_2次dma拷⻉、1次cpu拷⻉、4次内核态用户态切换" aria-label="Permalink to &quot;2次DMA拷⻉、1次CPU拷⻉、4次内核态用户态切换&quot;">​</a></h5><h4 id="方式二-sendfile" tabindex="-1">方式二 sendfile <a class="header-anchor" href="#方式二-sendfile" aria-label="Permalink to &quot;方式二 sendfile&quot;">​</a></h4><h5 id="linux-kernal-2-1新增发送文件的系统调用函数-sendfile" tabindex="-1">Linux kernal 2.1新增发送文件的系统调用函数 sendfile( ) <a class="header-anchor" href="#linux-kernal-2-1新增发送文件的系统调用函数-sendfile" aria-label="Permalink to &quot;Linux kernal 2.1新增发送文件的系统调用函数 sendfile( )&quot;">​</a></h5><h5 id="替代-read-和-write-两个系统调用-减少一次系统调用-即减少-2-次cpu上下文切换的开销" tabindex="-1">替代 read() 和 write() 两个系统调用，减少一次系统调用，即减少 2 次CPU上下文切换的开销 <a class="header-anchor" href="#替代-read-和-write-两个系统调用-减少一次系统调用-即减少-2-次cpu上下文切换的开销" aria-label="Permalink to &quot;替代 read() 和 write() 两个系统调用，减少一次系统调用，即减少 2 次CPU上下文切换的开销&quot;">​</a></h5><h5 id="调用sendfile-从磁盘读取到内核缓冲区-然后直接把内核缓冲区的数据拷⻉到-socket-buffer缓冲区-里" tabindex="-1">调用sendfile( )，从磁盘读取到内核缓冲区，然后直接把内核缓冲区的数据拷⻉到 socket buffer缓冲区 里 <a class="header-anchor" href="#调用sendfile-从磁盘读取到内核缓冲区-然后直接把内核缓冲区的数据拷⻉到-socket-buffer缓冲区-里" aria-label="Permalink to &quot;调用sendfile( )，从磁盘读取到内核缓冲区，然后直接把内核缓冲区的数据拷⻉到 socket buffer缓冲区 里&quot;">​</a></h5><h5 id="再把内核缓冲区的socket-buffer给直接拷⻉给socket协议栈-即网卡设备中-dma负责" tabindex="-1">再把内核缓冲区的Socket Buffer给直接拷⻉给Socket协议栈 即网卡设备中)(DMA负责) <a class="header-anchor" href="#再把内核缓冲区的socket-buffer给直接拷⻉给socket协议栈-即网卡设备中-dma负责" aria-label="Permalink to &quot;再把内核缓冲区的Socket Buffer给直接拷⻉给Socket协议栈 即网卡设备中)(DMA负责)&quot;">​</a></h5><h5 id="sendfile" tabindex="-1">Sendfile( ) <a class="header-anchor" href="#sendfile" aria-label="Permalink to &quot;Sendfile( )&quot;">​</a></h5><p><img src="'+C+'" alt="image.png"></p><h5 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h5><h6 id="应用程序先调用sendfile-方法-将数据从磁盘拷⻉到内核缓冲区-dma负责" tabindex="-1">应用程序先调用sendfile()方法，将数据从磁盘拷⻉到内核缓冲区(DMA负责) <a class="header-anchor" href="#应用程序先调用sendfile-方法-将数据从磁盘拷⻉到内核缓冲区-dma负责" aria-label="Permalink to &quot;应用程序先调用sendfile()方法，将数据从磁盘拷⻉到内核缓冲区(DMA负责)&quot;">​</a></h6><h6 id="然后把-内核缓冲区的数据直接拷⻉到内核socket-buffer-cpu负责" tabindex="-1">然后把 内核缓冲区的数据直接拷⻉到内核socket buffer(CPU负责) <a class="header-anchor" href="#然后把-内核缓冲区的数据直接拷⻉到内核socket-buffer-cpu负责" aria-label="Permalink to &quot;然后把 内核缓冲区的数据直接拷⻉到内核socket buffer(CPU负责)&quot;">​</a></h6><h6 id="然后把内核缓冲区的socket-buffer给直接拷⻉给socket协议栈-即网卡设备中-返回结束-dma负-责" tabindex="-1">然后把内核缓冲区的Socket Buffer给直接拷⻉给Socket协议栈 即网卡设备中，返回结束(DMA负 责) <a class="header-anchor" href="#然后把内核缓冲区的socket-buffer给直接拷⻉给socket协议栈-即网卡设备中-返回结束-dma负-责" aria-label="Permalink to &quot;然后把内核缓冲区的Socket Buffer给直接拷⻉给Socket协议栈 即网卡设备中，返回结束(DMA负 责)&quot;">​</a></h6><h5 id="损耗" tabindex="-1">损耗 <a class="header-anchor" href="#损耗" aria-label="Permalink to &quot;损耗&quot;">​</a></h5><h6 id="_2次dma拷⻉、1次cpu拷⻉、2次内核态用户态切换" tabindex="-1">2次DMA拷⻉、1次cpu拷⻉、2次内核态用户态切换 <a class="header-anchor" href="#_2次dma拷⻉、1次cpu拷⻉、2次内核态用户态切换" aria-label="Permalink to &quot;2次DMA拷⻉、1次cpu拷⻉、2次内核态用户态切换&quot;">​</a></h6><h5 id="linux-2-4-版本之后改进sendfile-利用dma-gather-带有收集功能的dma-变成了真正的零拷⻉-没有cpu-copy" tabindex="-1">Linux 2.4+ 版本之后改进sendfile, 利用DMA Gather(带有收集功能的DMA)，变成了真正的零拷⻉(没有CPU Copy) <a class="header-anchor" href="#linux-2-4-版本之后改进sendfile-利用dma-gather-带有收集功能的dma-变成了真正的零拷⻉-没有cpu-copy" aria-label="Permalink to &quot;Linux 2.4+ 版本之后改进sendfile, 利用DMA Gather(带有收集功能的DMA)，变成了真正的零拷⻉(没有CPU Copy)&quot;">​</a></h5><p><img src="'+g+'" alt="image.png"></p><h6 id="应用程序先调用sendfile-方法-将数据从磁盘拷⻉到内核缓冲区-dma负责-1" tabindex="-1">应用程序先调用sendfile()方法，将数据从磁盘拷⻉到内核缓冲区(DMA负责) <a class="header-anchor" href="#应用程序先调用sendfile-方法-将数据从磁盘拷⻉到内核缓冲区-dma负责-1" aria-label="Permalink to &quot;应用程序先调用sendfile()方法，将数据从磁盘拷⻉到内核缓冲区(DMA负责)&quot;">​</a></h6><h6 id="把内存地址、偏移量的缓冲区-fd-描述符-拷⻉-到socket-buffer中去-拷⻉很少的数据-可忽略" tabindex="-1">把内存地址、偏移量的缓冲区 fd 描述符 拷⻉ 到Socket Buffer中去 拷⻉很少的数据 可忽略 <a class="header-anchor" href="#把内存地址、偏移量的缓冲区-fd-描述符-拷⻉-到socket-buffer中去-拷⻉很少的数据-可忽略" aria-label="Permalink to &quot;把内存地址、偏移量的缓冲区 fd 描述符 拷⻉ 到Socket Buffer中去 拷⻉很少的数据 可忽略&quot;">​</a></h6><ul><li>本质和虚拟内存的解决方法思路一样，就是内存地址的记录</li></ul><h6 id="然后把内核缓冲区的socket-buffer给直接拷⻉给socket协议栈-即网卡设备中-返回结束-dma负责" tabindex="-1">然后把内核缓冲区的Socket Buffer给直接拷⻉给Socket协议栈 即网卡设备中，返回结束(DMA负责) <a class="header-anchor" href="#然后把内核缓冲区的socket-buffer给直接拷⻉给socket协议栈-即网卡设备中-返回结束-dma负责" aria-label="Permalink to &quot;然后把内核缓冲区的Socket Buffer给直接拷⻉给Socket协议栈 即网卡设备中，返回结束(DMA负责)&quot;">​</a></h6><h1 id="操作系统和计算机网络" tabindex="-1">操作系统和计算机网络 <a class="header-anchor" href="#操作系统和计算机网络" aria-label="Permalink to &quot;操作系统和计算机网络&quot;">​</a></h1><h2 id="计算机网络" tabindex="-1">计算机网络 <a class="header-anchor" href="#计算机网络" aria-label="Permalink to &quot;计算机网络&quot;">​</a></h2><h3 id="osi-七层模型、tcp-ip-四层模型和组成" tabindex="-1">OSI 七层模型、TCP/IP 四层模型和组成 <a class="header-anchor" href="#osi-七层模型、tcp-ip-四层模型和组成" aria-label="Permalink to &quot;OSI 七层模型、TCP/IP 四层模型和组成&quot;">​</a></h3><h3 id="网络通讯、tcp、udp、http1-0-1-1-2、https-网络安全攻防、dns-cdn" tabindex="-1">网络通讯、TCP、UDP、HTTP1.0/1.1/2、HTTPS/网络安全攻防、DNS/CDN <a class="header-anchor" href="#网络通讯、tcp、udp、http1-0-1-1-2、https-网络安全攻防、dns-cdn" aria-label="Permalink to &quot;网络通讯、TCP、UDP、HTTP1.0/1.1/2、HTTPS/网络安全攻防、DNS/CDN&quot;">​</a></h3><h2 id="性能优化诊断方法论" tabindex="-1">性能优化诊断方法论 <a class="header-anchor" href="#性能优化诊断方法论" aria-label="Permalink to &quot;性能优化诊断方法论&quot;">​</a></h2><h3 id="围绕两个大点" tabindex="-1">围绕两个大点 <a class="header-anchor" href="#围绕两个大点" aria-label="Permalink to &quot;围绕两个大点&quot;">​</a></h3><h4 id="应用程序性能维度" tabindex="-1">应用程序性能维度 <a class="header-anchor" href="#应用程序性能维度" aria-label="Permalink to &quot;应用程序性能维度&quot;">​</a></h4><h5 id="提高吞吐量throughput" tabindex="-1">提高吞吐量Throughput <a class="header-anchor" href="#提高吞吐量throughput" aria-label="Permalink to &quot;提高吞吐量Throughput&quot;">​</a></h5><h5 id="降低延迟latency" tabindex="-1">降低延迟Latency <a class="header-anchor" href="#降低延迟latency" aria-label="Permalink to &quot;降低延迟Latency&quot;">​</a></h5><h4 id="操作系统资源维度" tabindex="-1">操作系统资源维度 <a class="header-anchor" href="#操作系统资源维度" aria-label="Permalink to &quot;操作系统资源维度&quot;">​</a></h4><h5 id="cpu使用率" tabindex="-1">CPU使用率 <a class="header-anchor" href="#cpu使用率" aria-label="Permalink to &quot;CPU使用率&quot;">​</a></h5><h5 id="内存使用率" tabindex="-1">内存使用率 <a class="header-anchor" href="#内存使用率" aria-label="Permalink to &quot;内存使用率&quot;">​</a></h5><h5 id="磁盘io使用率" tabindex="-1">磁盘IO使用率 <a class="header-anchor" href="#磁盘io使用率" aria-label="Permalink to &quot;磁盘IO使用率&quot;">​</a></h5><h3 id="选择-指标-评估系统和应用程序现状" tabindex="-1">选择[指标]评估系统和应用程序现状 <a class="header-anchor" href="#选择-指标-评估系统和应用程序现状" aria-label="Permalink to &quot;选择[指标]评估系统和应用程序现状&quot;">​</a></h3><h3 id="设置性能优化-目标" tabindex="-1">设置性能优化[目标] <a class="header-anchor" href="#设置性能优化-目标" aria-label="Permalink to &quot;设置性能优化[目标]&quot;">​</a></h3><h3 id="进行链路基准-测试" tabindex="-1">进行链路基准[测试] <a class="header-anchor" href="#进行链路基准-测试" aria-label="Permalink to &quot;进行链路基准[测试]&quot;">​</a></h3><h3 id="分析-全链路性能瓶颈" tabindex="-1">[分析]全链路性能瓶颈 <a class="header-anchor" href="#分析-全链路性能瓶颈" aria-label="Permalink to &quot;[分析]全链路性能瓶颈&quot;">​</a></h3><h3 id="优化-系统和应用程序" tabindex="-1">[优化]系统和应用程序 <a class="header-anchor" href="#优化-系统和应用程序" aria-label="Permalink to &quot;[优化]系统和应用程序&quot;">​</a></h3><h3 id="验证-优化后的性能指标" tabindex="-1">[验证]优化后的性能指标 <a class="header-anchor" href="#验证-优化后的性能指标" aria-label="Permalink to &quot;[验证]优化后的性能指标&quot;">​</a></h3><h2 id="计算机硬件组成" tabindex="-1">计算机硬件组成 <a class="header-anchor" href="#计算机硬件组成" aria-label="Permalink to &quot;计算机硬件组成&quot;">​</a></h2><h3 id="_1945年-科学家冯·诺依曼提了一种计算机设计实现架构-奠定现代计算机的理论基础" tabindex="-1">1945年-科学家冯·诺依曼提了一种计算机设计实现架构，奠定现代计算机的理论基础 <a class="header-anchor" href="#_1945年-科学家冯·诺依曼提了一种计算机设计实现架构-奠定现代计算机的理论基础" aria-label="Permalink to &quot;1945年-科学家冯·诺依曼提了一种计算机设计实现架构，奠定现代计算机的理论基础&quot;">​</a></h3><h3 id="五大组成部分" tabindex="-1">五大组成部分 <a class="header-anchor" href="#五大组成部分" aria-label="Permalink to &quot;五大组成部分&quot;">​</a></h3><h4 id="中央处理器-central-processing-unit-cpu" tabindex="-1">中央处理器(Central Processing Unit，CPU) <a class="header-anchor" href="#中央处理器-central-processing-unit-cpu" aria-label="Permalink to &quot;中央处理器(Central Processing Unit，CPU)&quot;">​</a></h4><h5 id="控制器control-unit-简称-cu" tabindex="-1">控制器Control Unit 简称 [CU] <a class="header-anchor" href="#控制器control-unit-简称-cu" aria-label="Permalink to &quot;控制器Control Unit 简称 [CU]&quot;">​</a></h5><h6 id="计算机的指挥系统-用来控制计算机其他组件的运行" tabindex="-1">计算机的指挥系统，用来控制计算机其他组件的运行 <a class="header-anchor" href="#计算机的指挥系统-用来控制计算机其他组件的运行" aria-label="Permalink to &quot;计算机的指挥系统，用来控制计算机其他组件的运行&quot;">​</a></h6><h5 id="运算器arithmetic-logic-unit-简称-alu" tabindex="-1">运算器Arithmetic/Logic Unit 简称 [ALU] <a class="header-anchor" href="#运算器arithmetic-logic-unit-简称-alu" aria-label="Permalink to &quot;运算器Arithmetic/Logic Unit 简称 [ALU]&quot;">​</a></h5><p>(又名算数逻辑运算器)</p><h6 id="运算功能-用来完成各种二进制编码做算术运算和逻辑运算-包括加减乘、与或非运算-控制器-运算器-cpu" tabindex="-1">运算功能，用来完成各种二进制编码做算术运算和逻辑运算，包括加减乘、与或非运算，控制器+运算器=CPU <a class="header-anchor" href="#运算功能-用来完成各种二进制编码做算术运算和逻辑运算-包括加减乘、与或非运算-控制器-运算器-cpu" aria-label="Permalink to &quot;运算功能，用来完成各种二进制编码做算术运算和逻辑运算，包括加减乘、与或非运算，控制器+运算器=CPU&quot;">​</a></h6><h6 id="运算器和控制器联系十分紧密-两大部件多数集成在同一芯片-统称为" tabindex="-1">运算器和控制器联系十分紧密，两大部件多数集成在同一芯片，统称为 <a class="header-anchor" href="#运算器和控制器联系十分紧密-两大部件多数集成在同一芯片-统称为" aria-label="Permalink to &quot;运算器和控制器联系十分紧密，两大部件多数集成在同一芯片，统称为&quot;">​</a></h6><h4 id="存储器" tabindex="-1">存储器 <a class="header-anchor" href="#存储器" aria-label="Permalink to &quot;存储器&quot;">​</a></h4><h5 id="内存" tabindex="-1">内存 <a class="header-anchor" href="#内存" aria-label="Permalink to &quot;内存&quot;">​</a></h5><h6 id="比如内存条-临时存储-断电丢失数据" tabindex="-1">比如内存条 ，临时存储，断电丢失数据 <a class="header-anchor" href="#比如内存条-临时存储-断电丢失数据" aria-label="Permalink to &quot;比如内存条 ，临时存储，断电丢失数据&quot;">​</a></h6><h5 id="外存" tabindex="-1">外存 <a class="header-anchor" href="#外存" aria-label="Permalink to &quot;外存&quot;">​</a></h5><h6 id="比如机械硬盘-持久存储-断电不丢失数据" tabindex="-1">比如机械硬盘， 持久存储，断电不丢失数据 <a class="header-anchor" href="#比如机械硬盘-持久存储-断电不丢失数据" aria-label="Permalink to &quot;比如机械硬盘， 持久存储，断电不丢失数据&quot;">​</a></h6><h4 id="io设备" tabindex="-1">IO设备 <a class="header-anchor" href="#io设备" aria-label="Permalink to &quot;IO设备&quot;">​</a></h4><h5 id="输入设备input" tabindex="-1">输入设备input <a class="header-anchor" href="#输入设备input" aria-label="Permalink to &quot;输入设备input&quot;">​</a></h5><h6 id="比如键盘、鼠标、⻨克⻛、触摸屏、手写-输入板-游戏杆等" tabindex="-1">比如键盘、鼠标、⻨克⻛、触摸屏、手写 输入板，游戏杆等 <a class="header-anchor" href="#比如键盘、鼠标、⻨克⻛、触摸屏、手写-输入板-游戏杆等" aria-label="Permalink to &quot;比如键盘、鼠标、⻨克⻛、触摸屏、手写 输入板，游戏杆等&quot;">​</a></h6><h5 id="输出设备output" tabindex="-1">输出设备output <a class="header-anchor" href="#输出设备output" aria-label="Permalink to &quot;输出设备output&quot;">​</a></h5><h6 id="比如显示器、音响、打印机等" tabindex="-1">比如显示器、音响、打印机等 <a class="header-anchor" href="#比如显示器、音响、打印机等" aria-label="Permalink to &quot;比如显示器、音响、打印机等&quot;">​</a></h6><h2 id="操作系统和进程" tabindex="-1">操作系统和进程 <a class="header-anchor" href="#操作系统和进程" aria-label="Permalink to &quot;操作系统和进程&quot;">​</a></h2><h3 id="运行在计算机上最重要的一种程序-管理计算机的所有硬件和软件" tabindex="-1">运行在计算机上最重要的一种程序，管理计算机的所有硬件和软件 <a class="header-anchor" href="#运行在计算机上最重要的一种程序-管理计算机的所有硬件和软件" aria-label="Permalink to &quot;运行在计算机上最重要的一种程序，管理计算机的所有硬件和软件&quot;">​</a></h3><h3 id="用户通过系统os来操作使用计算机硬件-属于中间层" tabindex="-1">用户通过系统OS来操作使用计算机硬件，属于中间层 <a class="header-anchor" href="#用户通过系统os来操作使用计算机硬件-属于中间层" aria-label="Permalink to &quot;用户通过系统OS来操作使用计算机硬件，属于中间层&quot;">​</a></h3><h3 id="现代操作系统核心功能" tabindex="-1">现代操作系统核心功能 <a class="header-anchor" href="#现代操作系统核心功能" aria-label="Permalink to &quot;现代操作系统核心功能&quot;">​</a></h3><h4 id="进程管理-操作系统为进程分配任务-解决处理器的调度、分配和回收等" tabindex="-1">进程管理: 操作系统为进程分配任务，解决处理器的调度、分配和回收等 <a class="header-anchor" href="#进程管理-操作系统为进程分配任务-解决处理器的调度、分配和回收等" aria-label="Permalink to &quot;进程管理: 操作系统为进程分配任务，解决处理器的调度、分配和回收等&quot;">​</a></h4><h4 id="处理器管理-cpu的管理和分配-比如-分配进程-cpu调度执行" tabindex="-1">处理器管理: CPU的管理和分配，比如 分配进程 CPU调度执行 <a class="header-anchor" href="#处理器管理-cpu的管理和分配-比如-分配进程-cpu调度执行" aria-label="Permalink to &quot;处理器管理: CPU的管理和分配，比如 分配进程 CPU调度执行&quot;">​</a></h4><h4 id="内存管理-内存的管理和分配-比如给程序分配内存和释放内存" tabindex="-1">内存管理: 内存的管理和分配，比如给程序分配内存和释放内存 <a class="header-anchor" href="#内存管理-内存的管理和分配-比如给程序分配内存和释放内存" aria-label="Permalink to &quot;内存管理: 内存的管理和分配，比如给程序分配内存和释放内存&quot;">​</a></h4><h4 id="外存管理-持久化存储的管理和分配-比如-磁盘文件写入" tabindex="-1">外存管理: 持久化存储的管理和分配，比如 磁盘文件写入 <a class="header-anchor" href="#外存管理-持久化存储的管理和分配-比如-磁盘文件写入" aria-label="Permalink to &quot;外存管理: 持久化存储的管理和分配，比如 磁盘文件写入&quot;">​</a></h4><h4 id="i-o管理-输入-输出设备的管理-比如键盘输入和网络收发" tabindex="-1">I/O管理: 输入/输出设备的管理，比如键盘输入和网络收发 <a class="header-anchor" href="#i-o管理-输入-输出设备的管理-比如键盘输入和网络收发" aria-label="Permalink to &quot;I/O管理: 输入/输出设备的管理，比如键盘输入和网络收发&quot;">​</a></h4><h3 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h3><h4 id="一个具有独立功能的程序对某个数据集在处理机上的执行过程-也是操作系统分配资源的基本单位" tabindex="-1">一个具有独立功能的程序对某个数据集在处理机上的执行过程，也是操作系统分配资源的基本单位 <a class="header-anchor" href="#一个具有独立功能的程序对某个数据集在处理机上的执行过程-也是操作系统分配资源的基本单位" aria-label="Permalink to &quot;一个具有独立功能的程序对某个数据集在处理机上的执行过程，也是操作系统分配资源的基本单位&quot;">​</a></h4><h4 id="操作系统中给进程抽象了专⻔的-数据结构" tabindex="-1">操作系统中给进程抽象了专⻔的[数据结构] <a class="header-anchor" href="#操作系统中给进程抽象了专⻔的-数据结构" aria-label="Permalink to &quot;操作系统中给进程抽象了专⻔的[数据结构]&quot;">​</a></h4><h5 id="称为进程控制块-process-control-block-简称-pcb" tabindex="-1">称为进程控制块，Process Control Block 简称 PCB <a class="header-anchor" href="#称为进程控制块-process-control-block-简称-pcb" aria-label="Permalink to &quot;称为进程控制块，Process Control Block 简称 PCB&quot;">​</a></h5>',629),L=a("h5",{"css-module":".",id:"在操作系统代码当中是一个结构体-struct-task-struct",tabindex:"-1"},[t("在操作系统代码当中是一个结构体: struct task_struct "),a("a",{class:"header-anchor",href:"#在操作系统代码当中是一个结构体-struct-task-struct","aria-label":'Permalink to "在操作系统代码当中是一个结构体: struct task_struct{...}"'},"​")],-1),K=e('<h5 id="每一个进程均有一个pcb-在创建进程时建立pcb-伴随进程运行的全过程-直到进程撤消而撤消" tabindex="-1">每一个进程均有一个PCB，在创建进程时建立PCB，伴随进程运行的全过程，直到进程撤消而撤消 <a class="header-anchor" href="#每一个进程均有一个pcb-在创建进程时建立pcb-伴随进程运行的全过程-直到进程撤消而撤消" aria-label="Permalink to &quot;每一个进程均有一个PCB，在创建进程时建立PCB，伴随进程运行的全过程，直到进程撤消而撤消&quot;">​</a></h5><h4 id="pcb数据结构-包含进程的多数信息" tabindex="-1">PCB数据结构 包含进程的多数信息 <a class="header-anchor" href="#pcb数据结构-包含进程的多数信息" aria-label="Permalink to &quot;PCB数据结构 包含进程的多数信息&quot;">​</a></h4><h5 id="程序id-pid、进程句柄-一个进程都必须对应一个唯一pid-一般是整形数字" tabindex="-1">程序ID(PID、进程句柄): 一个进程都必须对应一个唯一PID，一般是整形数字 <a class="header-anchor" href="#程序id-pid、进程句柄-一个进程都必须对应一个唯一pid-一般是整形数字" aria-label="Permalink to &quot;程序ID(PID、进程句柄): 一个进程都必须对应一个唯一PID，一般是整形数字&quot;">​</a></h5><h5 id="特征信息-一般分系统进程、用户进程、或者内核进程等" tabindex="-1">特征信息: 一般分系统进程、用户进程、或者内核进程等 <a class="header-anchor" href="#特征信息-一般分系统进程、用户进程、或者内核进程等" aria-label="Permalink to &quot;特征信息: 一般分系统进程、用户进程、或者内核进程等&quot;">​</a></h5><h5 id="进程状态-运行、就绪、阻塞-表示进程现的运行情况" tabindex="-1">进程状态: 运行、就绪、阻塞，表示进程现的运行情况 <a class="header-anchor" href="#进程状态-运行、就绪、阻塞-表示进程现的运行情况" aria-label="Permalink to &quot;进程状态: 运行、就绪、阻塞，表示进程现的运行情况&quot;">​</a></h5><h5 id="优先级-表示获得cpu控制权的优先级大小" tabindex="-1">优先级: 表示获得CPU控制权的优先级大小 <a class="header-anchor" href="#优先级-表示获得cpu控制权的优先级大小" aria-label="Permalink to &quot;优先级: 表示获得CPU控制权的优先级大小&quot;">​</a></h5><h5 id="提供进程管理、调度所需要的信息" tabindex="-1">提供进程管理、调度所需要的信息 <a class="header-anchor" href="#提供进程管理、调度所需要的信息" aria-label="Permalink to &quot;提供进程管理、调度所需要的信息&quot;">​</a></h5><h5 id="新建态-进程正在被创建-操作系统为进程分配资源-初始化pcb" tabindex="-1">新建态: 进程正在被创建，操作系统为进程分配资源，初始化PCB <a class="header-anchor" href="#新建态-进程正在被创建-操作系统为进程分配资源-初始化pcb" aria-label="Permalink to &quot;新建态: 进程正在被创建，操作系统为进程分配资源，初始化PCB&quot;">​</a></h5><h4 id="进程状态" tabindex="-1">进程状态 <a class="header-anchor" href="#进程状态" aria-label="Permalink to &quot;进程状态&quot;">​</a></h4><h5 id="就绪态-具备运行条件-但没有空闲的cpu导致不能运行-万事俱备-只欠一个cpu-运行态-占有cpu-并在cpu上运行指令" tabindex="-1">就绪态: 具备运行条件，但没有空闲的CPU导致不能运行, 万事俱备，只欠一个CPU 运行态: 占有CPU，并在CPU上运行指令 <a class="header-anchor" href="#就绪态-具备运行条件-但没有空闲的cpu导致不能运行-万事俱备-只欠一个cpu-运行态-占有cpu-并在cpu上运行指令" aria-label="Permalink to &quot;就绪态: 具备运行条件，但没有空闲的CPU导致不能运行, 万事俱备，只欠一个CPU 运行态: 占有CPU，并在CPU上运行指令&quot;">​</a></h5><h5 id="阻塞态-等待某一事件而暂时不能运行" tabindex="-1">阻塞态: 等待某一事件而暂时不能运行 <a class="header-anchor" href="#阻塞态-等待某一事件而暂时不能运行" aria-label="Permalink to &quot;阻塞态: 等待某一事件而暂时不能运行&quot;">​</a></h5><h5 id="退出态-从系统中退出-操作系统会回收进程拥有的资源、撤销pcb" tabindex="-1">退出态: 从系统中退出，操作系统会回收进程拥有的资源、撤销PCB <a class="header-anchor" href="#退出态-从系统中退出-操作系统会回收进程拥有的资源、撤销pcb" aria-label="Permalink to &quot;退出态: 从系统中退出，操作系统会回收进程拥有的资源、撤销PCB&quot;">​</a></h5><h4 id="进程、线程、他们之间的关系是怎样的" tabindex="-1">进程、线程、他们之间的关系是怎样的 <a class="header-anchor" href="#进程、线程、他们之间的关系是怎样的" aria-label="Permalink to &quot;进程、线程、他们之间的关系是怎样的&quot;">​</a></h4><h5 id="进程-1" tabindex="-1">进程 <a class="header-anchor" href="#进程-1" aria-label="Permalink to &quot;进程&quot;">​</a></h5><h6 id="本质上是一个独立执行的程序-进程是操作系统进行资源分配和调度的基本概念" tabindex="-1">本质上是一个独立执行的程序，进程是操作系统进行资源分配和调度的基本概念 <a class="header-anchor" href="#本质上是一个独立执行的程序-进程是操作系统进行资源分配和调度的基本概念" aria-label="Permalink to &quot;本质上是一个独立执行的程序，进程是操作系统进行资源分配和调度的基本概念&quot;">​</a></h6><h6 id="操作系统进行资源分配和调度的一个独立单位" tabindex="-1">操作系统进行资源分配和调度的一个独立单位 <a class="header-anchor" href="#操作系统进行资源分配和调度的一个独立单位" aria-label="Permalink to &quot;操作系统进行资源分配和调度的一个独立单位&quot;">​</a></h6><h5 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程&quot;">​</a></h5><h6 id="是操作系统能够进行运算调度的最小单位-它被包含在进程之中-是进程中的实际运作单位。" tabindex="-1">是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。 <a class="header-anchor" href="#是操作系统能够进行运算调度的最小单位-它被包含在进程之中-是进程中的实际运作单位。" aria-label="Permalink to &quot;是操作系统能够进行运算调度的最小单位，它被包含在进程之中，是进程中的实际运作单位。&quot;">​</a></h6><h6 id="一个进程中可以并发多个线程-每条线程执行不同的任务-切换受系统控制。" tabindex="-1">一个进程中可以并发多个线程，每条线程执行不同的任务，切换受系统控制。 <a class="header-anchor" href="#一个进程中可以并发多个线程-每条线程执行不同的任务-切换受系统控制。" aria-label="Permalink to &quot;一个进程中可以并发多个线程，每条线程执行不同的任务，切换受系统控制。&quot;">​</a></h6><h5 id="重点" tabindex="-1">重点 <a class="header-anchor" href="#重点" aria-label="Permalink to &quot;重点&quot;">​</a></h5><h6 id="进程拥有多个线程的时候-这些线程会共享相同的虚拟内存和全局变量资源-这些资源在上下文切换时不需要修改" tabindex="-1">进程拥有多个线程的时候，这些线程会共享相同的虚拟内存和全局变量资源，这些资源在上下文切换时不需要修改 <a class="header-anchor" href="#进程拥有多个线程的时候-这些线程会共享相同的虚拟内存和全局变量资源-这些资源在上下文切换时不需要修改" aria-label="Permalink to &quot;进程拥有多个线程的时候，这些线程会共享相同的虚拟内存和全局变量资源，这些资源在上下文切换时不需要修改&quot;">​</a></h6><h6 id="同进程内的线程切换-要比多进程间的切换消耗更少的资源-所以开发中用多线程代替多进程的原因" tabindex="-1">同进程内的线程切换，要比多进程间的切换消耗更少的资源，所以开发中用多线程代替多进程的原因 <a class="header-anchor" href="#同进程内的线程切换-要比多进程间的切换消耗更少的资源-所以开发中用多线程代替多进程的原因" aria-label="Permalink to &quot;同进程内的线程切换，要比多进程间的切换消耗更少的资源，所以开发中用多线程代替多进程的原因&quot;">​</a></h6><h6 id="线程上下文切换的两种情况" tabindex="-1">线程上下文切换的两种情况 <a class="header-anchor" href="#线程上下文切换的两种情况" aria-label="Permalink to &quot;线程上下文切换的两种情况&quot;">​</a></h6><ul><li>前后两个线程属于不同进程，此时资源不共享，线程上下文切换和进程的上下文切换一样</li><li>前后两个线程属于同一个进程。同进程虚拟内存共享，在切换的时候虚拟内存等资源就保持不动，只需要切换线程的私有数据，寄存器等不共享的数据</li></ul><h5 id="进程创建" tabindex="-1">进程创建 <a class="header-anchor" href="#进程创建" aria-label="Permalink to &quot;进程创建&quot;">​</a></h5><h6 id="进程一般由os内核创建-一个进程也可以去创建另一个进程-这个去创建进程称为父进程-被创-建进程称为子进程" tabindex="-1">进程一般由OS内核创建，一个进程也可以去创建另一个进程，这个去创建进程称为父进程，被创 建进程称为子进程 <a class="header-anchor" href="#进程一般由os内核创建-一个进程也可以去创建另一个进程-这个去创建进程称为父进程-被创-建进程称为子进程" aria-label="Permalink to &quot;进程一般由OS内核创建，一个进程也可以去创建另一个进程，这个去创建进程称为父进程，被创 建进程称为子进程&quot;">​</a></h6><h6 id="应用场景-6" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景-6" aria-label="Permalink to &quot;应用场景&quot;">​</a></h6><ul><li>Nginx 的master-worker进程</li><li>Redis 两种持久化方式 <ul><li>worker是处理真正的请求的，而master负责监控worker进程是否在正常工作</li><li>AOF (append only file)和 RDB (Redis DataBase) <ul><li>执行bgsave命令，Redis-Server会fork创建子进程，RDB持久化过程由子进程负责，会在后台异步进行快照操作，由于是子进程，所以快照生成同时还可以响应客户端请求</li></ul></li></ul></li></ul><h3 id="进程调度" tabindex="-1">进程调度 <a class="header-anchor" href="#进程调度" aria-label="Permalink to &quot;进程调度&quot;">​</a></h3><h4 id="linux-是一个多任务操作系统-支持的任务同时运行的数量远远大于-cpu-的数量" tabindex="-1">Linux 是一个多任务操作系统，支持的任务同时运行的数量远远大于 CPU 的数量 <a class="header-anchor" href="#linux-是一个多任务操作系统-支持的任务同时运行的数量远远大于-cpu-的数量" aria-label="Permalink to &quot;Linux 是一个多任务操作系统，支持的任务同时运行的数量远远大于 CPU 的数量&quot;">​</a></h4><h4 id="进程调度-就是指【怎样安排】某一个时刻cpu运行【哪个进程】" tabindex="-1">进程调度 就是指【怎样安排】某一个时刻CPU运行【哪个进程】 <a class="header-anchor" href="#进程调度-就是指【怎样安排】某一个时刻cpu运行【哪个进程】" aria-label="Permalink to &quot;进程调度 就是指【怎样安排】某一个时刻CPU运行【哪个进程】&quot;">​</a></h4><h4 id="进程调度类型" tabindex="-1">进程调度类型 <a class="header-anchor" href="#进程调度类型" aria-label="Permalink to &quot;进程调度类型&quot;">​</a></h4><h5 id="非抢占式调度-nonpreemptive" tabindex="-1">非抢占式调度 Nonpreemptive <a class="header-anchor" href="#非抢占式调度-nonpreemptive" aria-label="Permalink to &quot;非抢占式调度 Nonpreemptive&quot;">​</a></h5><h6 id="一旦把处理机分配给某进程后-进程就会一直运行-直到该进程【完成】或【阻塞】时才会把-cpu-让给其他进程" tabindex="-1">一旦把处理机分配给某进程后，进程就会一直运行，直到该进程【完成】或【阻塞】时才会把 CPU 让给其他进程 <a class="header-anchor" href="#一旦把处理机分配给某进程后-进程就会一直运行-直到该进程【完成】或【阻塞】时才会把-cpu-让给其他进程" aria-label="Permalink to &quot;一旦把处理机分配给某进程后，进程就会一直运行，直到该进程【完成】或【阻塞】时才会把 CPU 让给其他进程&quot;">​</a></h6><h6 id="主要用于【批处理系统】-和-某些对【实时性要求不严】的实时系统" tabindex="-1">主要用于【批处理系统】 和 某些对【实时性要求不严】的实时系统 <a class="header-anchor" href="#主要用于【批处理系统】-和-某些对【实时性要求不严】的实时系统" aria-label="Permalink to &quot;主要用于【批处理系统】 和 某些对【实时性要求不严】的实时系统&quot;">​</a></h6><h5 id="抢占式调度-preemptive" tabindex="-1">抢占式调度 Preemptive <a class="header-anchor" href="#抢占式调度-preemptive" aria-label="Permalink to &quot;抢占式调度 Preemptive&quot;">​</a></h5><h6 id="暂停某个正在执行的进程-将已分配给该进程的处理机重新分配给另一个进程" tabindex="-1">暂停某个正在执行的进程，将已分配给该进程的处理机重新分配给另一个进程 <a class="header-anchor" href="#暂停某个正在执行的进程-将已分配给该进程的处理机重新分配给另一个进程" aria-label="Permalink to &quot;暂停某个正在执行的进程，将已分配给该进程的处理机重新分配给另一个进程&quot;">​</a></h6><h6 id="系统同样是把处理机分配给优先权最高的进程-在其执行期间出现了另一个其优先权更高的进程" tabindex="-1">系统同样是把处理机分配给优先权最高的进程，在其执行期间出现了另一个其优先权更高的进程 <a class="header-anchor" href="#系统同样是把处理机分配给优先权最高的进程-在其执行期间出现了另一个其优先权更高的进程" aria-label="Permalink to &quot;系统同样是把处理机分配给优先权最高的进程，在其执行期间出现了另一个其优先权更高的进程&quot;">​</a></h6><h6 id="进程调度程序就停止当前进程的执行-重新将处理机分配给新到的优先级最高的进程" tabindex="-1">进程调度程序就停止当前进程的执行，重新将处理机分配给新到的优先级最高的进程 <a class="header-anchor" href="#进程调度程序就停止当前进程的执行-重新将处理机分配给新到的优先级最高的进程" aria-label="Permalink to &quot;进程调度程序就停止当前进程的执行，重新将处理机分配给新到的优先级最高的进程&quot;">​</a></h6><h6 id="主要用于比较严格的【实时系统】中" tabindex="-1">主要用于比较严格的【实时系统】中 <a class="header-anchor" href="#主要用于比较严格的【实时系统】中" aria-label="Permalink to &quot;主要用于比较严格的【实时系统】中&quot;">​</a></h6><h5 id="算法分类" tabindex="-1">算法分类 <a class="header-anchor" href="#算法分类" aria-label="Permalink to &quot;算法分类&quot;">​</a></h5><h6 id="先来先服务调度算法-fcfs-first-come-first-served-非抢占式" tabindex="-1">先来先服务调度算法(FCFS，first come first served，非抢占式) <a class="header-anchor" href="#先来先服务调度算法-fcfs-first-come-first-served-非抢占式" aria-label="Permalink to &quot;先来先服务调度算法(FCFS，first come first served，非抢占式)&quot;">​</a></h6><ul><li>按照作业/进程到达的先后顺序进行调度 ，即: 优先考虑在系统中等待时间最⻓的作业</li><li>重点: 排在⻓进程后的短进程的等待时间⻓，不利于短作业/进程，⻓进程得到CPU就执行完成了，不利于短进程</li><li>比如 进程一响应慢，进程二/三/四响应快，那进程一先到，其他本来很快搞定的但是没被调度到导致效率慢</li></ul><h6 id="短作业优先调度算法-sjf-shortest-job-first-非抢占式" tabindex="-1">短作业优先调度算法(SJF, Shortest Job First，非抢占式) <a class="header-anchor" href="#短作业优先调度算法-sjf-shortest-job-first-非抢占式" aria-label="Permalink to &quot;短作业优先调度算法(SJF, Shortest Job First，非抢占式)&quot;">​</a></h6><ul><li>预计执行时间短的进程优先分派处理机，短进程/作业(要求服务时间最短)</li><li>在实际情况中占有很大比例，为了使得它们优先执行，对⻓作业不友好</li><li>重点: 缩短进程的等待时间，提高系统的吞吐量</li><li>比如 进程一响应慢，进程二/三/四响应快，那同等时间下，更多短进程任务完成了，吞吐量也上去了</li></ul><h6 id="高响应比优先调度算法-hrrn-highest-response-ratio-next-非抢占式" tabindex="-1">高响应比优先调度算法(HRRN，Highest Response Ratio Next，非抢占式) <a class="header-anchor" href="#高响应比优先调度算法-hrrn-highest-response-ratio-next-非抢占式" aria-label="Permalink to &quot;高响应比优先调度算法(HRRN，Highest Response Ratio Next，非抢占式)&quot;">​</a></h6><ul><li>在每次调度时，先计算各个作业的优先权: 优先权=响应比=(等待时间+要求服务时间)/要求服务时间</li><li>因为等待时间与服务时间之和就是系统对该作业的响应时间，所以 优先权=响应比=响应时间/要求服务时间</li><li>选择优先权高的进行服务需要【计算优先权信息，增加了系统的开销】是介于FCFS和SJF之间的一种折中算法</li></ul><h6 id="时间片轮转调度算法-rr-round-robin-抢占式" tabindex="-1">时间片轮转调度算法(RR，Round-Robin，抢占式) <a class="header-anchor" href="#时间片轮转调度算法-rr-round-robin-抢占式" aria-label="Permalink to &quot;时间片轮转调度算法(RR，Round-Robin，抢占式)&quot;">​</a></h6><ul><li>FCFS 的方式按时间片轮流使用CPU 的调度方式，让每个进程在一定时间间隔内都可以得到响应</li><li>由于高频率的进程切换，会增加了开销，且不区分任务的紧急程度</li></ul><h6 id="优先级调度算法-priority-scheduling-有抢占式和非抢占式" tabindex="-1">优先级调度算法(Priority Scheduling ，有抢占式和非抢占式) <a class="header-anchor" href="#优先级调度算法-priority-scheduling-有抢占式和非抢占式" aria-label="Permalink to &quot;优先级调度算法(Priority Scheduling ，有抢占式和非抢占式)&quot;">​</a></h6><ul><li>根据任务的紧急程度进行调度，高优先级的先处理，低优先级的慢处理</li><li>通常使用【动态优先级】，如果高优先级任务很多且持续产生，那低优先级的就可能很慢才被处理</li><li>分类 <ul><li>优先级因素: 进程的等待时间、已使用的处理机时间或其他资源的使用情况</li><li>非抢占式 <ul><li>当就绪队列中出现优先级高的进程，运行完当前进程，再选择优先级高的进程。</li></ul></li><li>抢占式 <ul><li>当就绪队列中出现优先级高的进程，当前进程挂起，调度优先级高的进程运行。</li></ul></li></ul></li></ul><h6 id="多级反馈队列调度算法-multilevel-feedback-queue-抢占式" tabindex="-1">多级反馈队列调度算法(Multilevel Feedback Queue，抢占式) <a class="header-anchor" href="#多级反馈队列调度算法-multilevel-feedback-queue-抢占式" aria-label="Permalink to &quot;多级反馈队列调度算法(Multilevel Feedback Queue，抢占式)&quot;">​</a></h6><ul><li>多级: 表示有多个队列，每个队列优先级从高到低，同时优先级越高时间片越短 <ul><li>高优先级队列中已没有调度的进程，则调度次优先级队列中的进程</li><li>对同个队列中的各个进程，按照时间片轮转法调度</li><li>比如 <ul><li>Q1,Q2,Q3三个队列，在Q1中没有进程等待时才去调度Q2，只有Q1,Q2都为空时才会去调度 Q3</li><li>队列的时间片为N，假如Q1中的作业经过N个时间片后还没有完成，则进入到Q2队列，以此类推</li></ul></li></ul></li><li>反馈: 表示如果有新的进程加入优先级高的队列时，立刻停止当前正在运行的进程，转而去运行优先级高的队列</li></ul><h5 id="算法总结" tabindex="-1">算法总结 <a class="header-anchor" href="#算法总结" aria-label="Permalink to &quot;算法总结&quot;">​</a></h5><h6 id="一个好的调度算法考虑以下几个方面" tabindex="-1">一个好的调度算法考虑以下几个方面 <a class="header-anchor" href="#一个好的调度算法考虑以下几个方面" aria-label="Permalink to &quot;一个好的调度算法考虑以下几个方面&quot;">​</a></h6><ul><li>公平-保证每个进程得到合理的CPU时间</li><li>高效-使CPU保持忙碌状态，总是有进程在CPU上运行</li><li>响应时间-使交互用户的响应时间尽可能短</li><li>周转时间: 使批处理用户等待输出的时间尽可能短</li><li>吞吐量-使单位时间内处理的进程数量尽可能多</li></ul><h6 id="不同系统和版本支持的调度算法不一样" tabindex="-1">不同系统和版本支持的调度算法不一样 <a class="header-anchor" href="#不同系统和版本支持的调度算法不一样" aria-label="Permalink to &quot;不同系统和版本支持的调度算法不一样&quot;">​</a></h6><ul><li>UNIX采用动态优先队列调度</li><li>BSD采用多级反馈队列调度</li><li>Windows采用抢先多任务调度</li></ul><h1 id="磁盘分区" tabindex="-1">磁盘分区 <a class="header-anchor" href="#磁盘分区" aria-label="Permalink to &quot;磁盘分区&quot;">​</a></h1><h2 id="计算机中存放信息的主要的存储设备就是硬盘-但是硬盘不能直接使用-必须对硬盘进行分割一块一块的硬盘区域就是磁盘分区" tabindex="-1">计算机中存放信息的主要的存储设备就是硬盘，但是硬盘不能直接使用，必须对硬盘进行分割一块一块的硬盘区域就是磁盘分区 <a class="header-anchor" href="#计算机中存放信息的主要的存储设备就是硬盘-但是硬盘不能直接使用-必须对硬盘进行分割一块一块的硬盘区域就是磁盘分区" aria-label="Permalink to &quot;计算机中存放信息的主要的存储设备就是硬盘，但是硬盘不能直接使用，必须对硬盘进行分割一块一块的硬盘区域就是磁盘分区&quot;">​</a></h2><h2 id="为啥要磁盘分区" tabindex="-1">为啥要磁盘分区? <a class="header-anchor" href="#为啥要磁盘分区" aria-label="Permalink to &quot;为啥要磁盘分区?&quot;">​</a></h2><p>(可以想下 mysql数据库 为啥要分库分表)</p><h3 id="方便管理、提升系统的效率和做好存储空间隔离分配" tabindex="-1">方便管理、提升系统的效率和做好存储空间隔离分配 <a class="header-anchor" href="#方便管理、提升系统的效率和做好存储空间隔离分配" aria-label="Permalink to &quot;方便管理、提升系统的效率和做好存储空间隔离分配&quot;">​</a></h3><h4 id="将系统中的程序数据按不同的使用分为几类-将不同类型的数据分别存放在不同的磁盘分区中" tabindex="-1">将系统中的程序数据按不同的使用分为几类，将不同类型的数据分别存放在不同的磁盘分区中 <a class="header-anchor" href="#将系统中的程序数据按不同的使用分为几类-将不同类型的数据分别存放在不同的磁盘分区中" aria-label="Permalink to &quot;将系统中的程序数据按不同的使用分为几类，将不同类型的数据分别存放在不同的磁盘分区中&quot;">​</a></h4><h4 id="在每个分区上存放的都是相似的数据或程序-这样管理和维护就容易多" tabindex="-1">在每个分区上存放的都是相似的数据或程序，这样管理和维护就容易多 <a class="header-anchor" href="#在每个分区上存放的都是相似的数据或程序-这样管理和维护就容易多" aria-label="Permalink to &quot;在每个分区上存放的都是相似的数据或程序，这样管理和维护就容易多&quot;">​</a></h4><h4 id="分区可以提升系统的效率-系统读写磁盘时-磁头移动的距离缩短了-即搜寻的范围小了" tabindex="-1">分区可以提升系统的效率，系统读写磁盘时，磁头移动的距离缩短了，即搜寻的范围小了 <a class="header-anchor" href="#分区可以提升系统的效率-系统读写磁盘时-磁头移动的距离缩短了-即搜寻的范围小了" aria-label="Permalink to &quot;分区可以提升系统的效率，系统读写磁盘时，磁头移动的距离缩短了，即搜寻的范围小了&quot;">​</a></h4><h4 id="如果不运用分区-每次在硬盘上寻找信息时可能要寻找整个硬盘-所以速度会很慢" tabindex="-1">如果不运用分区，每次在硬盘上寻找信息时可能要寻找整个硬盘，所以速度会很慢 <a class="header-anchor" href="#如果不运用分区-每次在硬盘上寻找信息时可能要寻找整个硬盘-所以速度会很慢" aria-label="Permalink to &quot;如果不运用分区，每次在硬盘上寻找信息时可能要寻找整个硬盘，所以速度会很慢&quot;">​</a></h4><h3 id="允许在一个磁盘上有多个文件系统-每个分区可以分配不同的文件系统" tabindex="-1">允许在一个磁盘上有多个文件系统，每个分区可以分配不同的文件系统 <a class="header-anchor" href="#允许在一个磁盘上有多个文件系统-每个分区可以分配不同的文件系统" aria-label="Permalink to &quot;允许在一个磁盘上有多个文件系统，每个分区可以分配不同的文件系统&quot;">​</a></h3><h4 id="从而使操作系统可以识别每个分区的文件系统-从而实现文件的存储和管理" tabindex="-1">从而使操作系统可以识别每个分区的文件系统，从而实现文件的存储和管理 <a class="header-anchor" href="#从而使操作系统可以识别每个分区的文件系统-从而实现文件的存储和管理" aria-label="Permalink to &quot;从而使操作系统可以识别每个分区的文件系统，从而实现文件的存储和管理&quot;">​</a></h4><h4 id="创建硬盘分区后-还不能立即使用-还需要创建文件系统-即格式化" tabindex="-1">创建硬盘分区后，还不能立即使用，还需要创建文件系统，即格式化 <a class="header-anchor" href="#创建硬盘分区后-还不能立即使用-还需要创建文件系统-即格式化" aria-label="Permalink to &quot;创建硬盘分区后，还不能立即使用，还需要创建文件系统，即格式化&quot;">​</a></h4><h4 id="格式化后常⻅的磁盘格式有-fat-fat16-、fat32、ntfs、ext2、ext3等" tabindex="-1">格式化后常⻅的磁盘格式有: FAT(FAT16)、FAT32、NTFS、ext2、ext3等 <a class="header-anchor" href="#格式化后常⻅的磁盘格式有-fat-fat16-、fat32、ntfs、ext2、ext3等" aria-label="Permalink to &quot;格式化后常⻅的磁盘格式有: FAT(FAT16)、FAT32、NTFS、ext2、ext3等&quot;">​</a></h4><h2 id="硬盘分区类型" tabindex="-1">硬盘分区类型 <a class="header-anchor" href="#硬盘分区类型" aria-label="Permalink to &quot;硬盘分区类型&quot;">​</a></h2><p>(不同类型磁盘支持分区的数量有限制)</p><h3 id="主分区" tabindex="-1">主分区 <a class="header-anchor" href="#主分区" aria-label="Permalink to &quot;主分区&quot;">​</a></h3><h4 id="主直接在硬盘上划分的-一个硬盘可以有1到3个主分区和1个扩展分区" tabindex="-1">主直接在硬盘上划分的，一个硬盘可以有1到3个主分区和1个扩展分区 <a class="header-anchor" href="#主直接在硬盘上划分的-一个硬盘可以有1到3个主分区和1个扩展分区" aria-label="Permalink to &quot;主直接在硬盘上划分的，一个硬盘可以有1到3个主分区和1个扩展分区&quot;">​</a></h4><h3 id="拓展分区" tabindex="-1">拓展分区 <a class="header-anchor" href="#拓展分区" aria-label="Permalink to &quot;拓展分区&quot;">​</a></h3><h4 id="是一个概念实际在硬盘中是看不到的-也无法直接使用扩展分区-在扩展分区中建立逻辑分区" tabindex="-1">是一个概念实际在硬盘中是看不到的，也无法直接使用扩展分区，在扩展分区中建立逻辑分区 <a class="header-anchor" href="#是一个概念实际在硬盘中是看不到的-也无法直接使用扩展分区-在扩展分区中建立逻辑分区" aria-label="Permalink to &quot;是一个概念实际在硬盘中是看不到的，也无法直接使用扩展分区，在扩展分区中建立逻辑分区&quot;">​</a></h4><h3 id="容量" tabindex="-1">容量 <a class="header-anchor" href="#容量" aria-label="Permalink to &quot;容量&quot;">​</a></h3><h4 id="硬盘的容量-主分区的容量-扩展分区的容量" tabindex="-1">硬盘的容量=主分区的容量+扩展分区的容量 <a class="header-anchor" href="#硬盘的容量-主分区的容量-扩展分区的容量" aria-label="Permalink to &quot;硬盘的容量=主分区的容量+扩展分区的容量&quot;">​</a></h4><h4 id="扩展分区的容量-各个逻辑分区的容量之和" tabindex="-1">扩展分区的容量=各个逻辑分区的容量之和 <a class="header-anchor" href="#扩展分区的容量-各个逻辑分区的容量之和" aria-label="Permalink to &quot;扩展分区的容量=各个逻辑分区的容量之和&quot;">​</a></h4><h1 id="零拷贝" tabindex="-1">零拷贝 <a class="header-anchor" href="#零拷贝" aria-label="Permalink to &quot;零拷贝&quot;">​</a></h1><h2 id="下图应用程序从磁盘读取数据发送到网络上的损耗-程序需要两个命令-先read读取-再write写出" tabindex="-1">下图应用程序从磁盘读取数据发送到网络上的损耗，程序需要两个命令 先read读取，再write写出 <a class="header-anchor" href="#下图应用程序从磁盘读取数据发送到网络上的损耗-程序需要两个命令-先read读取-再write写出" aria-label="Permalink to &quot;下图应用程序从磁盘读取数据发送到网络上的损耗，程序需要两个命令 先read读取，再write写出&quot;">​</a></h2><p><img src="'+S+'" alt=""></p><h3 id="切换和拷贝-4-次拷贝、4-次上下文切换" tabindex="-1">切换和拷贝：4 次拷贝、4 次上下文切换 <a class="header-anchor" href="#切换和拷贝-4-次拷贝、4-次上下文切换" aria-label="Permalink to &quot;切换和拷贝：4 次拷贝、4 次上下文切换&quot;">​</a></h3><h2 id="mmap-函数" tabindex="-1">mmap 函数 <a class="header-anchor" href="#mmap-函数" aria-label="Permalink to &quot;mmap 函数&quot;">​</a></h2><p><img src="'+y+'" alt=""></p><h3 id="切换和拷贝-3-次拷贝、4-次上下文切换" tabindex="-1">切换和拷贝：3 次拷贝、4 次上下文切换 <a class="header-anchor" href="#切换和拷贝-3-次拷贝、4-次上下文切换" aria-label="Permalink to &quot;切换和拷贝：3 次拷贝、4 次上下文切换&quot;">​</a></h3><h2 id="sendfile-函数-优化前" tabindex="-1">sendfile 函数 优化前 <a class="header-anchor" href="#sendfile-函数-优化前" aria-label="Permalink to &quot;sendfile 函数 优化前&quot;">​</a></h2><p><img src="'+F+'" alt=""></p><h3 id="切换和拷贝-3-次拷贝、2-次上下文切换" tabindex="-1">切换和拷贝：3 次拷贝、2 次上下文切换 <a class="header-anchor" href="#切换和拷贝-3-次拷贝、2-次上下文切换" aria-label="Permalink to &quot;切换和拷贝：3 次拷贝、2 次上下文切换&quot;">​</a></h3><h2 id="结合上述方法优化后的-sendfile-零拷贝-结合-mmap-sendfile-cpu-拷贝的时候借鉴-mmap-的思想" tabindex="-1">结合上述方法优化后的 sendfile 零拷贝，结合 mmap+sendfile，CPU 拷贝的时候借鉴 mmap 的思想 <a class="header-anchor" href="#结合上述方法优化后的-sendfile-零拷贝-结合-mmap-sendfile-cpu-拷贝的时候借鉴-mmap-的思想" aria-label="Permalink to &quot;结合上述方法优化后的 sendfile 零拷贝，结合 mmap+sendfile，CPU 拷贝的时候借鉴 mmap 的思想&quot;">​</a></h2><p><img src="'+A+'" alt=""></p><h3 id="切换和拷贝-2-次拷贝、2-次上下文切换" tabindex="-1">切换和拷贝：2 次拷贝、2 次上下文切换 <a class="header-anchor" href="#切换和拷贝-2-次拷贝、2-次上下文切换" aria-label="Permalink to &quot;切换和拷贝：2 次拷贝、2 次上下文切换&quot;">​</a></h3><h2 id="零拷⻉技术和优缺点总结" tabindex="-1">零拷⻉技术和优缺点总结 <a class="header-anchor" href="#零拷⻉技术和优缺点总结" aria-label="Permalink to &quot;零拷⻉技术和优缺点总结&quot;">​</a></h2><h3 id="零拷⻉的目标" tabindex="-1">零拷⻉的目标 <a class="header-anchor" href="#零拷⻉的目标" aria-label="Permalink to &quot;零拷⻉的目标&quot;">​</a></h3><h4 id="解放cpu-避免cpu做太多事情" tabindex="-1">解放CPU，避免CPU做太多事情 <a class="header-anchor" href="#解放cpu-避免cpu做太多事情" aria-label="Permalink to &quot;解放CPU，避免CPU做太多事情&quot;">​</a></h4><h4 id="减少内存带宽占用" tabindex="-1">减少内存带宽占用 <a class="header-anchor" href="#减少内存带宽占用" aria-label="Permalink to &quot;减少内存带宽占用&quot;">​</a></h4><h4 id="减少用户态和内核态上下文切换过多" tabindex="-1">减少用户态和内核态上下文切换过多 <a class="header-anchor" href="#减少用户态和内核态上下文切换过多" aria-label="Permalink to &quot;减少用户态和内核态上下文切换过多&quot;">​</a></h4><h4 id="在文件较小的时候-mmap-耗时更短-当文件较大时-sendfile-的方式最优" tabindex="-1">在文件较小的时候 mmap 耗时更短，当文件较大时 sendfile 的方式最优 <a class="header-anchor" href="#在文件较小的时候-mmap-耗时更短-当文件较大时-sendfile-的方式最优" aria-label="Permalink to &quot;在文件较小的时候 mmap 耗时更短，当文件较大时 sendfile 的方式最优&quot;">​</a></h4><h3 id="零拷⻉方式对比" tabindex="-1">零拷⻉方式对比 <a class="header-anchor" href="#零拷⻉方式对比" aria-label="Permalink to &quot;零拷⻉方式对比&quot;">​</a></h3><h4 id="sendfile-1" tabindex="-1">sendfile <a class="header-anchor" href="#sendfile-1" aria-label="Permalink to &quot;sendfile&quot;">​</a></h4><h5 id="无法在调用过程中修改数据-只适用于应用程序不需要对所访问数据进行处理修改情况" tabindex="-1">无法在调用过程中修改数据，只适用于应用程序不需要对所访问数据进行处理修改情况 <a class="header-anchor" href="#无法在调用过程中修改数据-只适用于应用程序不需要对所访问数据进行处理修改情况" aria-label="Permalink to &quot;无法在调用过程中修改数据，只适用于应用程序不需要对所访问数据进行处理修改情况&quot;">​</a></h5><h5 id="场景" tabindex="-1">场景 <a class="header-anchor" href="#场景" aria-label="Permalink to &quot;场景&quot;">​</a></h5><h6 id="比如-静态文件传输-mq的broker发送消息给消费者" tabindex="-1">比如 静态文件传输，MQ的Broker发送消息给消费者 <a class="header-anchor" href="#比如-静态文件传输-mq的broker发送消息给消费者" aria-label="Permalink to &quot;比如 静态文件传输，MQ的Broker发送消息给消费者&quot;">​</a></h6><h6 id="如果想要在传输过程中修改数据-可以使用mmap系统调用。" tabindex="-1">如果想要在传输过程中修改数据，可以使用mmap系统调用。 <a class="header-anchor" href="#如果想要在传输过程中修改数据-可以使用mmap系统调用。" aria-label="Permalink to &quot;如果想要在传输过程中修改数据，可以使用mmap系统调用。&quot;">​</a></h6><h5 id="文件大小-适合大文件传输" tabindex="-1">文件大小:适合大文件传输 <a class="header-anchor" href="#文件大小-适合大文件传输" aria-label="Permalink to &quot;文件大小:适合大文件传输&quot;">​</a></h5><h5 id="切换和拷⻉-2次上下文切换-最少-2-次数据拷⻉" tabindex="-1">切换和拷⻉: 2次上下文切换，最少 2 次数据拷⻉ <a class="header-anchor" href="#切换和拷⻉-2次上下文切换-最少-2-次数据拷⻉" aria-label="Permalink to &quot;切换和拷⻉: 2次上下文切换，最少 2 次数据拷⻉&quot;">​</a></h5><h4 id="mmap" tabindex="-1">mmap <a class="header-anchor" href="#mmap" aria-label="Permalink to &quot;mmap&quot;">​</a></h4><h5 id="在mmap调用可以在应用程序中直接修改page-cache中的数据-使用的是mmap-write两步" tabindex="-1">在mmap调用可以在应用程序中直接修改Page Cache中的数据，使用的是mmap+write两步 <a class="header-anchor" href="#在mmap调用可以在应用程序中直接修改page-cache中的数据-使用的是mmap-write两步" aria-label="Permalink to &quot;在mmap调用可以在应用程序中直接修改Page Cache中的数据，使用的是mmap+write两步&quot;">​</a></h5><h6 id="调用比sendfile成本高-但优于传统i-o的拷⻉实现方式-虽然比-sendfile-多了上下文切换" tabindex="-1">调用比sendfile成本高，但优于传统I/O的拷⻉实现方式，虽然比 sendfile 多了上下文切换 <a class="header-anchor" href="#调用比sendfile成本高-但优于传统i-o的拷⻉实现方式-虽然比-sendfile-多了上下文切换" aria-label="Permalink to &quot;调用比sendfile成本高，但优于传统I/O的拷⻉实现方式，虽然比 sendfile 多了上下文切换&quot;">​</a></h6><h6 id="但用户空间与内核空间并不需要数据拷⻉-在正确使用情况下并不比-sendfile-效率差" tabindex="-1">但用户空间与内核空间并不需要数据拷⻉，在正确使用情况下并不比 sendfile 效率差 <a class="header-anchor" href="#但用户空间与内核空间并不需要数据拷⻉-在正确使用情况下并不比-sendfile-效率差" aria-label="Permalink to &quot;但用户空间与内核空间并不需要数据拷⻉，在正确使用情况下并不比 sendfile 效率差&quot;">​</a></h6><h5 id="场景-1" tabindex="-1">场景 <a class="header-anchor" href="#场景-1" aria-label="Permalink to &quot;场景&quot;">​</a></h5><h6 id="多个线程以只读的方式同时访问一个文件-mmap-机制下多线程共享同一物理内存空间-节约内存" tabindex="-1">多个线程以只读的方式同时访问一个文件， mmap 机制下多线程共享同一物理内存空间，节约内存 <a class="header-anchor" href="#多个线程以只读的方式同时访问一个文件-mmap-机制下多线程共享同一物理内存空间-节约内存" aria-label="Permalink to &quot;多个线程以只读的方式同时访问一个文件， mmap 机制下多线程共享同一物理内存空间，节约内存&quot;">​</a></h6><h5 id="文件大小-适合小数据量读写" tabindex="-1">文件大小:适合小数据量读写 <a class="header-anchor" href="#文件大小-适合小数据量读写" aria-label="Permalink to &quot;文件大小:适合小数据量读写&quot;">​</a></h5><h5 id="切换和拷⻉-4-次上下文切换-3-次数据拷⻉" tabindex="-1">切换和拷⻉: 4 次上下文切换，3 次数据拷⻉ <a class="header-anchor" href="#切换和拷⻉-4-次上下文切换-3-次数据拷⻉" aria-label="Permalink to &quot;切换和拷⻉: 4 次上下文切换，3 次数据拷⻉&quot;">​</a></h5><h1 id="计算机网络-1" tabindex="-1">计算机网络 <a class="header-anchor" href="#计算机网络-1" aria-label="Permalink to &quot;计算机网络&quot;">​</a></h1><p><img src="'+T+'" alt=""></p><h2 id="套娃一样的封装数据包-比如tcp协议是封装在ip数据包中" tabindex="-1">套娃一样的封装数据包，比如TCP协议是封装在IP数据包中 <a class="header-anchor" href="#套娃一样的封装数据包-比如tcp协议是封装在ip数据包中" aria-label="Permalink to &quot;套娃一样的封装数据包，比如TCP协议是封装在IP数据包中&quot;">​</a></h2><p><img src="'+I+'" alt=""></p><h2 id="osi-七层模型和tcp-ip-四层模型-两个模型哪个更好" tabindex="-1">OSI 七层模型和TCP/IP 四层模型 两个模型哪个更好? <a class="header-anchor" href="#osi-七层模型和tcp-ip-四层模型-两个模型哪个更好" aria-label="Permalink to &quot;OSI 七层模型和TCP/IP 四层模型 两个模型哪个更好?&quot;">​</a></h2><h3 id="两个模型各有各的好-前者更详细-后者容易理解" tabindex="-1">两个模型各有各的好，前者更详细，后者容易理解 <a class="header-anchor" href="#两个模型各有各的好-前者更详细-后者容易理解" aria-label="Permalink to &quot;两个模型各有各的好，前者更详细，后者容易理解&quot;">​</a></h3><h3 id="例子-1" tabindex="-1">例子 <a class="header-anchor" href="#例子-1" aria-label="Permalink to &quot;例子&quot;">​</a></h3><h4 id="tcp-ip-四层模型-网络加密传输" tabindex="-1">TCP/IP 四层模型 网络加密传输 <a class="header-anchor" href="#tcp-ip-四层模型-网络加密传输" aria-label="Permalink to &quot;TCP/IP 四层模型 网络加密传输&quot;">​</a></h4><h5 id="https-在-http-与-tcp-层之间加入了-ssl-tls-协议" tabindex="-1">HTTPS 在 HTTP 与 TCP 层之间加入了 SSL/TLS 协议 <a class="header-anchor" href="#https-在-http-与-tcp-层之间加入了-ssl-tls-协议" aria-label="Permalink to &quot;HTTPS 在 HTTP 与 TCP 层之间加入了 SSL/TLS 协议&quot;">​</a></h5><p><img src="'+_+'" alt=""></p><h2 id="网络分层模型和主要协议" tabindex="-1">网络分层模型和主要协议 <a class="header-anchor" href="#网络分层模型和主要协议" aria-label="Permalink to &quot;网络分层模型和主要协议&quot;">​</a></h2><p><img src="'+D+'" alt=""></p><h2 id="网络分层模型下-数据在各层之间的传输" tabindex="-1">网络分层模型下，数据在各层之间的传输 <a class="header-anchor" href="#网络分层模型下-数据在各层之间的传输" aria-label="Permalink to &quot;网络分层模型下，数据在各层之间的传输&quot;">​</a></h2><h3 id="类似寄快递-中转站一层层分发-省-市-县-区-村-房号-具体联系人" tabindex="-1">类似寄快递，中转站一层层分发，省-&gt;市-&gt;县-&gt;区-&gt;村-&gt;房号-&gt;具体联系人 <a class="header-anchor" href="#类似寄快递-中转站一层层分发-省-市-县-区-村-房号-具体联系人" aria-label="Permalink to &quot;类似寄快递，中转站一层层分发，省-&gt;市-&gt;县-&gt;区-&gt;村-&gt;房号-&gt;具体联系人&quot;">​</a></h3><h4 id="发送数据包" tabindex="-1">发送数据包 <a class="header-anchor" href="#发送数据包" aria-label="Permalink to &quot;发送数据包&quot;">​</a></h4><h5 id="在网络协议栈中从上到下逐层处理-最终送到网卡发送出去" tabindex="-1">在网络协议栈中从上到下逐层处理，最终送到网卡发送出去 <a class="header-anchor" href="#在网络协议栈中从上到下逐层处理-最终送到网卡发送出去" aria-label="Permalink to &quot;在网络协议栈中从上到下逐层处理，最终送到网卡发送出去&quot;">​</a></h5><h4 id="接收数据包" tabindex="-1">接收数据包 <a class="header-anchor" href="#接收数据包" aria-label="Permalink to &quot;接收数据包&quot;">​</a></h4><h5 id="需要经过网络协议栈从下到上的逐层处理-最后送到应用程序中使用" tabindex="-1">需要经过网络协议栈从下到上的逐层处理，最后送到应用程序中使用 <a class="header-anchor" href="#需要经过网络协议栈从下到上的逐层处理-最后送到应用程序中使用" aria-label="Permalink to &quot;需要经过网络协议栈从下到上的逐层处理，最后送到应用程序中使用&quot;">​</a></h5><h4 id="注意-1" tabindex="-1">注意 <a class="header-anchor" href="#注意-1" aria-label="Permalink to &quot;注意&quot;">​</a></h4><h5 id="应用层是直接面向用户的一层-为应用程序提供统一协议的接口-但不是应用程序" tabindex="-1">应用层是直接面向用户的一层，为应用程序提供统一协议的接口，但不是应用程序 <a class="header-anchor" href="#应用层是直接面向用户的一层-为应用程序提供统一协议的接口-但不是应用程序" aria-label="Permalink to &quot;应用层是直接面向用户的一层，为应用程序提供统一协议的接口，但不是应用程序&quot;">​</a></h5><h5 id="目的是保障不同类型的应用采用的低层通信协议是一致的" tabindex="-1">目的是保障不同类型的应用采用的低层通信协议是一致的 <a class="header-anchor" href="#目的是保障不同类型的应用采用的低层通信协议是一致的" aria-label="Permalink to &quot;目的是保障不同类型的应用采用的低层通信协议是一致的&quot;">​</a></h5><p><img src="'+w+'" alt=""></p><h2 id="tcp-三次握手详细流程" tabindex="-1">TCP 三次握手详细流程 <a class="header-anchor" href="#tcp-三次握手详细流程" aria-label="Permalink to &quot;TCP 三次握手详细流程&quot;">​</a></h2><p><img src="'+U+'" alt=""></p><h3 id="一次握手-客户端发送一个syn-synchronize-数据包到服务器-用来请求建立连接-状态变为-syn-send" tabindex="-1">一次握手: 客户端发送一个SYN(Synchronize)数据包到服务器，用来请求建立连接，状态变为 <code>SYN_SEND</code>; <a class="header-anchor" href="#一次握手-客户端发送一个syn-synchronize-数据包到服务器-用来请求建立连接-状态变为-syn-send" aria-label="Permalink to &quot;一次握手: 客户端发送一个SYN(Synchronize)数据包到服务器，用来请求建立连接，状态变为 `SYN_SEND`;&quot;">​</a></h3><h4 id="报文首部中的同部位syn-1-同时随机生成初始序列号-seq-x" tabindex="-1">报文首部中的同部位SYN=1，同时随机生成初始序列号 seq=x <a class="header-anchor" href="#报文首部中的同部位syn-1-同时随机生成初始序列号-seq-x" aria-label="Permalink to &quot;报文首部中的同部位SYN=1，同时随机生成初始序列号 seq=x&quot;">​</a></h4><h3 id="二次握手-服务器收到客户端的syn数据包-并回复一个syn-ack-数据包-用来确认连接-状态变为syn-received" tabindex="-1">二次握手: 服务器收到客户端的SYN数据包，并回复一个SYN+ACK 数据包，用来确认连接，状态变为<code>SYN_RECEIVED</code>; <a class="header-anchor" href="#二次握手-服务器收到客户端的syn数据包-并回复一个syn-ack-数据包-用来确认连接-状态变为syn-received" aria-label="Permalink to &quot;二次握手: 服务器收到客户端的SYN数据包，并回复一个SYN+ACK 数据包，用来确认连接，状态变为`SYN_RECEIVED`;&quot;">​</a></h3><h4 id="确认报文中应该-ack-1-syn-1-确认号是ack-x-1-同时随机初始化一个序列号-seq-y" tabindex="-1">确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时随机初始化一个序列号 seq=y <a class="header-anchor" href="#确认报文中应该-ack-1-syn-1-确认号是ack-x-1-同时随机初始化一个序列号-seq-y" aria-label="Permalink to &quot;确认报文中应该 ACK=1，SYN=1，确认号是ack=x+1，同时随机初始化一个序列号 seq=y&quot;">​</a></h4><h3 id="三次握手-客户端收到服务器的syn-ack数据包-并回复一个ack-数据包-用来确认连接建立完成-状-态变为established" tabindex="-1">三次握手: 客户端收到服务器的SYN+ACK数据包，并回复一个ACK 数据包，用来确认连接建立完成，状 态变为<code>ESTABLISHED</code> <a class="header-anchor" href="#三次握手-客户端收到服务器的syn-ack数据包-并回复一个ack-数据包-用来确认连接建立完成-状-态变为established" aria-label="Permalink to &quot;三次握手: 客户端收到服务器的SYN+ACK数据包，并回复一个ACK 数据包，用来确认连接建立完成，状 态变为`ESTABLISHED`&quot;">​</a></h3><h4 id="确认报文的ack-1-ack-y-1-seq-x-1" tabindex="-1">确认报文的ACK=1，ack=y+1，seq=x+1 <a class="header-anchor" href="#确认报文的ack-1-ack-y-1-seq-x-1" aria-label="Permalink to &quot;确认报文的ACK=1，ack=y+1，seq=x+1&quot;">​</a></h4><h4 id="出于安全的考虑-第1次握手不能携带数据-第3次握手是可以携带数据的。" tabindex="-1">出于安全的考虑 第1次握手不能携带数据，第3次握手是可以携带数据的。 <a class="header-anchor" href="#出于安全的考虑-第1次握手不能携带数据-第3次握手是可以携带数据的。" aria-label="Permalink to &quot;出于安全的考虑 第1次握手不能携带数据，第3次握手是可以携带数据的。&quot;">​</a></h4><p><img src="'+O+'" alt=""><img src="'+B+'" alt=""></p><h2 id="tcp为什么要三次握手而不是二次或者四次" tabindex="-1">TCP为什么要三次握手而不是二次或者四次 <a class="header-anchor" href="#tcp为什么要三次握手而不是二次或者四次" aria-label="Permalink to &quot;TCP为什么要三次握手而不是二次或者四次&quot;">​</a></h2><h3 id="案例一-两端同步确认序列号" tabindex="-1">案例一：两端同步确认序列号 <a class="header-anchor" href="#案例一-两端同步确认序列号" aria-label="Permalink to &quot;案例一：两端同步确认序列号&quot;">​</a></h3><h3 id="案例二-防止失效的连接请求报文段被服务端接收" tabindex="-1">案例二：防止失效的连接请求报文段被服务端接收 <a class="header-anchor" href="#案例二-防止失效的连接请求报文段被服务端接收" aria-label="Permalink to &quot;案例二：防止失效的连接请求报文段被服务端接收&quot;">​</a></h3><h3 id="结论" tabindex="-1">结论 <a class="header-anchor" href="#结论" aria-label="Permalink to &quot;结论&quot;">​</a></h3><h4 id="三次握手的主要目的是保证连接是-双工-可用-的-保证双方都具有接受和发送数据的能力" tabindex="-1">三次握手的主要目的是保证连接是 双工+可用 的，保证双方都具有接受和发送数据的能力 <a class="header-anchor" href="#三次握手的主要目的是保证连接是-双工-可用-的-保证双方都具有接受和发送数据的能力" aria-label="Permalink to &quot;三次握手的主要目的是保证连接是 双工+可用 的，保证双方都具有接受和发送数据的能力&quot;">​</a></h4><h4 id="防止重复历史连接的初始化-避免资源的浪费" tabindex="-1">防止重复历史连接的初始化 ，避免资源的浪费 <a class="header-anchor" href="#防止重复历史连接的初始化-避免资源的浪费" aria-label="Permalink to &quot;防止重复历史连接的初始化 ，避免资源的浪费&quot;">​</a></h4><h4 id="同步双方初始序列号" tabindex="-1">同步双方初始序列号 <a class="header-anchor" href="#同步双方初始序列号" aria-label="Permalink to &quot;同步双方初始序列号&quot;">​</a></h4><h5 id="序列号seq-用来解决网络包乱序问题" tabindex="-1">序列号seq: 用来解决网络包乱序问题 <a class="header-anchor" href="#序列号seq-用来解决网络包乱序问题" aria-label="Permalink to &quot;序列号seq: 用来解决网络包乱序问题&quot;">​</a></h5><h5 id="确认号ack-用来解决丢包的问题" tabindex="-1">确认号ack: 用来解决丢包的问题 <a class="header-anchor" href="#确认号ack-用来解决丢包的问题" aria-label="Permalink to &quot;确认号ack: 用来解决丢包的问题&quot;">​</a></h5><h4 id="记住-可靠性传输主要是通过重传机制来保证" tabindex="-1">记住: 可靠性传输主要是通过重传机制来保证 <a class="header-anchor" href="#记住-可靠性传输主要是通过重传机制来保证" aria-label="Permalink to &quot;记住: 可靠性传输主要是通过重传机制来保证&quot;">​</a></h4><h2 id="tcp-洪水攻击" tabindex="-1">TCP 洪水攻击 <a class="header-anchor" href="#tcp-洪水攻击" aria-label="Permalink to &quot;TCP 洪水攻击&quot;">​</a></h2><p><img src="'+M+'" alt=""></p><h3 id="tcp洪水攻击-基础缓解方案-tcp-syn-cookies-延缓tcb分配" tabindex="-1">TCP洪水攻击 基础缓解方案:TCP SYN Cookies (延缓TCB分配) <a class="header-anchor" href="#tcp洪水攻击-基础缓解方案-tcp-syn-cookies-延缓tcb分配" aria-label="Permalink to &quot;TCP洪水攻击 基础缓解方案:TCP SYN Cookies (延缓TCB分配)&quot;">​</a></h3><h4 id="使用连接信息-源地址、源端口、目的地址、目的端口等-和一个随机数-计算出一个哈希值-sha1" tabindex="-1">使用连接信息(源地址、源端口、目的地址、目的端口等)和一个随机数，计算出一个哈希值(SHA1) <a class="header-anchor" href="#使用连接信息-源地址、源端口、目的地址、目的端口等-和一个随机数-计算出一个哈希值-sha1" aria-label="Permalink to &quot;使用连接信息(源地址、源端口、目的地址、目的端口等)和一个随机数，计算出一个哈希值(SHA1)&quot;">​</a></h4><h5 id="syn-cookie避免内存空间被耗尽-但是加密会消耗cpu" tabindex="-1">SYN-Cookie避免内存空间被耗尽，但是加密会消耗CPU <a class="header-anchor" href="#syn-cookie避免内存空间被耗尽-但是加密会消耗cpu" aria-label="Permalink to &quot;SYN-Cookie避免内存空间被耗尽，但是加密会消耗CPU&quot;">​</a></h5><h5 id="攻击者发送大量的ack包过来-被攻击机器将会花费大􏰁的cpu时间在计算cookie上-造成正常的逻辑无法被执行" tabindex="-1">攻击者发送大量的ACK包过来，被攻击机器将会花费大􏰁的CPU时间在计算Cookie上，造成正常的逻辑无法被执行 <a class="header-anchor" href="#攻击者发送大量的ack包过来-被攻击机器将会花费大􏰁的cpu时间在计算cookie上-造成正常的逻辑无法被执行" aria-label="Permalink to &quot;攻击者发送大量的ACK包过来，被攻击机器将会花费大􏰁的CPU时间在计算Cookie上，造成正常的逻辑无法被执行&quot;">​</a></h5><h4 id="哈希值-被用作序列号-应答-syn-ack-包-客户端发送完三次握手的最后一次-ack" tabindex="-1">哈希值 被用作序列号 应答 SYN+ACK 包，客户端发送完三次握手的最后一次 ACK ， <a class="header-anchor" href="#哈希值-被用作序列号-应答-syn-ack-包-客户端发送完三次握手的最后一次-ack" aria-label="Permalink to &quot;哈希值 被用作序列号 应答 SYN+ACK 包，客户端发送完三次握手的最后一次 ACK ，&quot;">​</a></h4><h4 id="服务器就会重新计算这个哈希值-确认是之前的-syn-ack-的返回包-则进入-tcp-的连接状态。" tabindex="-1">服务器就会重新计算这个哈希值，确认是之前的 SYN+ACK 的返回包，则进入 TCP 的连接状态。 <a class="header-anchor" href="#服务器就会重新计算这个哈希值-确认是之前的-syn-ack-的返回包-则进入-tcp-的连接状态。" aria-label="Permalink to &quot;服务器就会重新计算这个哈希值，确认是之前的 SYN+ACK 的返回包，则进入 TCP 的连接状态。&quot;">​</a></h4><h4 id="当开启了-syncookies-功能就可以在不使用-syn-半连接队列的情况下成功建立连接-不需要维护半连接-数的限制" tabindex="-1">当开启了 syncookies 功能就可以在不使用 SYN 半连接队列的情况下成功建立连接，不需要维护半连接 数的限制 <a class="header-anchor" href="#当开启了-syncookies-功能就可以在不使用-syn-半连接队列的情况下成功建立连接-不需要维护半连接-数的限制" aria-label="Permalink to &quot;当开启了 syncookies 功能就可以在不使用 SYN 半连接队列的情况下成功建立连接，不需要维护半连接 数的限制&quot;">​</a></h4><h4 id="如果是ddos则难解决-需要花钱购买流量设备" tabindex="-1">如果是DDOS则难解决，需要花钱购买流量设备 <a class="header-anchor" href="#如果是ddos则难解决-需要花钱购买流量设备" aria-label="Permalink to &quot;如果是DDOS则难解决，需要花钱购买流量设备&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开启syncookies 阿里云ECS默认开启 </span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># vim /etc/sysctl.conf</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">net.ipv4.tcp_syncookies</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 值，表示关闭该功能</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 值，表示仅当</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SYN</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 半连接队列放不下时，再启用它</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 值，表示无条件开启功能</span></span></code></pre></div><h3 id="其他解决方案" tabindex="-1">其他解决方案 <a class="header-anchor" href="#其他解决方案" aria-label="Permalink to &quot;其他解决方案&quot;">​</a></h3><h4 id="增大半连接队列和全连接队列" tabindex="-1">增大半连接队列和全连接队列; <a class="header-anchor" href="#增大半连接队列和全连接队列" aria-label="Permalink to &quot;增大半连接队列和全连接队列;&quot;">​</a></h4><h4 id="减少-syn-ack-重传次数-减小tcp-synack-retries的值" tabindex="-1">减少 SYN+ACK 重传次数(减小tcp_synack_retries的值) <a class="header-anchor" href="#减少-syn-ack-重传次数-减小tcp-synack-retries的值" aria-label="Permalink to &quot;减少 SYN+ACK 重传次数(减小tcp_synack_retries的值)&quot;">​</a></h4><h5 id="收到syn攻击时-服务端会重传syn-ack报文到最大次数-才会断开连接-所以可以减少重传次数" tabindex="-1">收到syn攻击时，服务端会重传syn+ack报文到最大次数，才会断开连接，所以可以减少重传次数 <a class="header-anchor" href="#收到syn攻击时-服务端会重传syn-ack报文到最大次数-才会断开连接-所以可以减少重传次数" aria-label="Permalink to &quot;收到syn攻击时，服务端会重传syn+ack报文到最大次数，才会断开连接，所以可以减少重传次数&quot;">​</a></h5><h2 id="遇到服务器运行异常-现象和思路总结" tabindex="-1">遇到服务器运行异常，现象和思路总结 <a class="header-anchor" href="#遇到服务器运行异常-现象和思路总结" aria-label="Permalink to &quot;遇到服务器运行异常，现象和思路总结&quot;">​</a></h2><h2 id="当发现服务器或业务卡顿的时候-通过top命令来查看服务器负载和cpu使用率-然后排查cpu占用较高-的进程" tabindex="-1">当发现服务器或业务卡顿的时候，通过<code>top</code>命令来查看服务器负载和cpu使用率，然后排查cpu占用较高 的进程 <a class="header-anchor" href="#当发现服务器或业务卡顿的时候-通过top命令来查看服务器负载和cpu使用率-然后排查cpu占用较高-的进程" aria-label="Permalink to &quot;当发现服务器或业务卡顿的时候，通过`top`命令来查看服务器负载和cpu使用率，然后排查cpu占用较高 的进程&quot;">​</a></h2><h2 id="如果发现cpu使用率并不高-但是si软中断很高-且ksoftirqd进程cpu占用率高-则说明服务器持续发生-软中断" tabindex="-1">如果发现cpu使用率并不高，但是si软中断很高，且ksoftirqd进程cpu占用率高，则说明服务器持续发生 软中断 <a class="header-anchor" href="#如果发现cpu使用率并不高-但是si软中断很高-且ksoftirqd进程cpu占用率高-则说明服务器持续发生-软中断" aria-label="Permalink to &quot;如果发现cpu使用率并不高，但是si软中断很高，且ksoftirqd进程cpu占用率高，则说明服务器持续发生 软中断&quot;">​</a></h2><h2 id="通过cat-proc-softirqs-来分析是哪类型的软中断次数最多-watch命令来查看变化最快的值-watch-d-cat-proc-softirqs" tabindex="-1">通过<code>cat /proc/softirqs</code> 来分析是哪类型的软中断次数最多，watch命令来查看变化最快的值(<code>watch -d cat /proc/softirqs</code>) <a class="header-anchor" href="#通过cat-proc-softirqs-来分析是哪类型的软中断次数最多-watch命令来查看变化最快的值-watch-d-cat-proc-softirqs" aria-label="Permalink to &quot;通过`cat /proc/softirqs` 来分析是哪类型的软中断次数最多，watch命令来查看变化最快的值(`watch -d cat /proc/softirqs`)&quot;">​</a></h2><h2 id="多数情况下网络发生中断的情况会比较多-通过sar命令来查看收发包速率和收发包数据量-sar-n-dev-1-h" tabindex="-1">多数情况下网络发生中断的情况会比较多，通过sar命令来查看收发包速率和收发包数据量(<code>sar -n DEV 1 -h</code>) <a class="header-anchor" href="#多数情况下网络发生中断的情况会比较多-通过sar命令来查看收发包速率和收发包数据量-sar-n-dev-1-h" aria-label="Permalink to &quot;多数情况下网络发生中断的情况会比较多，通过sar命令来查看收发包速率和收发包数据量(`sar -n DEV 1 -h`)&quot;">​</a></h2><h3 id="验证是否是网络收发包过多导致-计算每个包的大小-判断服务器是否收到了flood攻击" tabindex="-1">验证是否是网络收发包过多导致，计算每个包的大小，判断服务器是否收到了flood攻击 <a class="header-anchor" href="#验证是否是网络收发包过多导致-计算每个包的大小-判断服务器是否收到了flood攻击" aria-label="Permalink to &quot;验证是否是网络收发包过多导致，计算每个包的大小，判断服务器是否收到了flood攻击&quot;">​</a></h3><h2 id="通过tcpdump来抓包-分析数据包来源ip和抓包数据中的flags来分析数据包类型-tcpdump-i-eth0-n-tcp-port-80" tabindex="-1">通过tcpdump来抓包，分析数据包来源ip和抓包数据中的Flags来分析数据包类型 (<code>tcpdump -i eth0 -n tcp port 80</code>) <a class="header-anchor" href="#通过tcpdump来抓包-分析数据包来源ip和抓包数据中的flags来分析数据包类型-tcpdump-i-eth0-n-tcp-port-80" aria-label="Permalink to &quot;通过tcpdump来抓包，分析数据包来源ip和抓包数据中的Flags来分析数据包类型 (`tcpdump -i eth0 -n tcp port 80`)&quot;">​</a></h2><h2 id="如果是flood洪水攻击-可以通过调整tcp链接参数策略和防火墙封禁异常ip" tabindex="-1">如果是Flood洪水攻击，可以通过调整tcp链接参数策略和防火墙封禁异常ip <a class="header-anchor" href="#如果是flood洪水攻击-可以通过调整tcp链接参数策略和防火墙封禁异常ip" aria-label="Permalink to &quot;如果是Flood洪水攻击，可以通过调整tcp链接参数策略和防火墙封禁异常ip&quot;">​</a></h2><h2 id="如果是大规模ddos攻击-则花钱找运营商购买流量包封堵" tabindex="-1">如果是大规模DDOS攻击，则花钱找运营商购买流量包封堵 <a class="header-anchor" href="#如果是大规模ddos攻击-则花钱找运营商购买流量包封堵" aria-label="Permalink to &quot;如果是大规模DDOS攻击，则花钱找运营商购买流量包封堵&quot;">​</a></h2><h1 id="tcp-四次挥手详细流程" tabindex="-1">TCP 四次挥手详细流程 <a class="header-anchor" href="#tcp-四次挥手详细流程" aria-label="Permalink to &quot;TCP 四次挥手详细流程&quot;">​</a></h1><p><img src="'+E+'" alt=""></p><h2 id="第一次" tabindex="-1">第一次 <a class="header-anchor" href="#第一次" aria-label="Permalink to &quot;第一次&quot;">​</a></h2><h3 id="客户端发送-fin-finish-报文段-用于关闭客户端到服务端的数据传输-表示客户端的数据发送-完毕" tabindex="-1">客户端发送 FIN(Finish)报文段，用于关闭客户端到服务端的数据传输，表示客户端的数据发送 完毕; <a class="header-anchor" href="#客户端发送-fin-finish-报文段-用于关闭客户端到服务端的数据传输-表示客户端的数据发送-完毕" aria-label="Permalink to &quot;客户端发送 FIN(Finish)报文段，用于关闭客户端到服务端的数据传输，表示客户端的数据发送 完毕;&quot;">​</a></h3><h3 id="客户端进入-fin-wait-1-状态" tabindex="-1">客户端进入 <code>FIN_WAIT_1</code> 状态 <a class="header-anchor" href="#客户端进入-fin-wait-1-状态" aria-label="Permalink to &quot;客户端进入 `FIN_WAIT_1` 状态&quot;">​</a></h3><h2 id="第二次" tabindex="-1">第二次 <a class="header-anchor" href="#第二次" aria-label="Permalink to &quot;第二次&quot;">​</a></h2><h3 id="服务端收到客户端的fin报文段后-发送ack报文段-确认收到了客户端的fin报文段" tabindex="-1">服务端收到客户端的FIN报文段后，发送ACK报文段，确认收到了客户端的FIN报文段 <a class="header-anchor" href="#服务端收到客户端的fin报文段后-发送ack报文段-确认收到了客户端的fin报文段" aria-label="Permalink to &quot;服务端收到客户端的FIN报文段后，发送ACK报文段，确认收到了客户端的FIN报文段&quot;">​</a></h3><h3 id="服务端进入close-wait状态-客户端接收到这个确认包后进入-fin-wait-2-状态" tabindex="-1">服务端进入<code>CLOSE_WAIT</code>状态，客户端接收到这个确认包后进入 <code>FIN_WAIT_2</code> 状态 <a class="header-anchor" href="#服务端进入close-wait状态-客户端接收到这个确认包后进入-fin-wait-2-状态" aria-label="Permalink to &quot;服务端进入`CLOSE_WAIT`状态，客户端接收到这个确认包后进入 `FIN_WAIT_2` 状态&quot;">​</a></h3><h2 id="第三次" tabindex="-1">第三次 <a class="header-anchor" href="#第三次" aria-label="Permalink to &quot;第三次&quot;">​</a></h2><h3 id="服务端发送fin报文段-用于关闭服务端到客户端的数据传输-表示服务端的数据发送完毕" tabindex="-1">服务端发送FIN报文段，用于关闭服务端到客户端的数据传输，表示服务端的数据发送完毕 <a class="header-anchor" href="#服务端发送fin报文段-用于关闭服务端到客户端的数据传输-表示服务端的数据发送完毕" aria-label="Permalink to &quot;服务端发送FIN报文段，用于关闭服务端到客户端的数据传输，表示服务端的数据发送完毕&quot;">​</a></h3><h3 id="服务器端进入-last-ack-状态-等待客户端的最后一个-ack" tabindex="-1">服务器端进入 <code>LAST_ACK</code> 状态，等待客户端的最后一个 ACK <a class="header-anchor" href="#服务器端进入-last-ack-状态-等待客户端的最后一个-ack" aria-label="Permalink to &quot;服务器端进入 `LAST_ACK` 状态，等待客户端的最后一个 ACK&quot;">​</a></h3><h2 id="第四次" tabindex="-1">第四次 <a class="header-anchor" href="#第四次" aria-label="Permalink to &quot;第四次&quot;">​</a></h2><h3 id="客户端收到服务端的fin报文段后-发送ack报文段-确认收到了服务端的fin报文段" tabindex="-1">客户端收到服务端的FIN报文段后，发送ACK报文段，确认收到了服务端的FIN报文段 <a class="header-anchor" href="#客户端收到服务端的fin报文段后-发送ack报文段-确认收到了服务端的fin报文段" aria-label="Permalink to &quot;客户端收到服务端的FIN报文段后，发送ACK报文段，确认收到了服务端的FIN报文段&quot;">​</a></h3><h3 id="客户端接收后进入time-wait状态-在此阶段下等待2msl时间-两个最大段生命周期-2maximum-segment-lifetime" tabindex="-1">客户端接收后进入<code>TIME_WAIT</code>状态，在此阶段下等待2MSL时间(两个最大段生命周期,2Maximum Segment Lifetime) <a class="header-anchor" href="#客户端接收后进入time-wait状态-在此阶段下等待2msl时间-两个最大段生命周期-2maximum-segment-lifetime" aria-label="Permalink to &quot;客户端接收后进入`TIME_WAIT`状态，在此阶段下等待2MSL时间(两个最大段生命周期,2Maximum Segment Lifetime)&quot;">​</a></h3><h3 id="如果这个时间间隔内没有收到服务端的请求-进入closed状态-服务器端接收到ack确认包之后-也进入-closed-状态。" tabindex="-1">如果这个时间间隔内没有收到服务端的请求，进入CLOSED状态;服务器端接收到ACK确认包之后，也进入 <code>CLOSED</code> 状态。 <a class="header-anchor" href="#如果这个时间间隔内没有收到服务端的请求-进入closed状态-服务器端接收到ack确认包之后-也进入-closed-状态。" aria-label="Permalink to &quot;如果这个时间间隔内没有收到服务端的请求，进入CLOSED状态;服务器端接收到ACK确认包之后，也进入 `CLOSED` 状态。&quot;">​</a></h3><h3 id="从而完成tcp四次挥手" tabindex="-1">从而完成TCP四次挥手 <a class="header-anchor" href="#从而完成tcp四次挥手" aria-label="Permalink to &quot;从而完成TCP四次挥手&quot;">​</a></h3><h2 id="tcp-四次挥手疑问点" tabindex="-1">TCP 四次挥手疑问点 <a class="header-anchor" href="#tcp-四次挥手疑问点" aria-label="Permalink to &quot;TCP 四次挥手疑问点&quot;">​</a></h2><h3 id="q-为啥要等待2msl时间" tabindex="-1">Q: 为啥要等待2MSL时间? <a class="header-anchor" href="#q-为啥要等待2msl时间" aria-label="Permalink to &quot;Q: 为啥要等待2MSL时间?&quot;">​</a></h3><h4 id="_2msl是报文最大生存时间-是任何报文在网络上存在的最⻓时间-超过这个时间报文将被丢弃" tabindex="-1">2MSL是报文最大生存时间，是任何报文在网络上存在的最⻓时间，超过这个时间报文将被丢弃 <a class="header-anchor" href="#_2msl是报文最大生存时间-是任何报文在网络上存在的最⻓时间-超过这个时间报文将被丢弃" aria-label="Permalink to &quot;2MSL是报文最大生存时间，是任何报文在网络上存在的最⻓时间，超过这个时间报文将被丢弃&quot;">​</a></h4><h4 id="假如最后一次客户端发送ack给服务端没收到-超时后-服务端-重发fin-客户端响应ack-来回就是2个-msl" tabindex="-1">假如最后一次客户端发送ACK给服务端没收到，超时后 服务端 重发FIN，客户端响应ACK，来回就是2个 MSL <a class="header-anchor" href="#假如最后一次客户端发送ack给服务端没收到-超时后-服务端-重发fin-客户端响应ack-来回就是2个-msl" aria-label="Permalink to &quot;假如最后一次客户端发送ACK给服务端没收到，超时后 服务端 重发FIN，客户端响应ACK，来回就是2个 MSL&quot;">​</a></h4><h4 id="等待2msl-可以让本次连接持续的时间内所产生的所有报文段都从网络中消失-避免旧的报文段" tabindex="-1">等待2MSL，可以让本次连接持续的时间内所产生的所有报文段都从网络中消失，避免旧的报文段 <a class="header-anchor" href="#等待2msl-可以让本次连接持续的时间内所产生的所有报文段都从网络中消失-避免旧的报文段" aria-label="Permalink to &quot;等待2MSL，可以让本次连接持续的时间内所产生的所有报文段都从网络中消失，避免旧的报文段&quot;">​</a></h4><h5 id="rfc-793中规定一个msl为2分钟-实际应用中常用的是30秒-1分钟和2分钟" tabindex="-1">RFC 793中规定一个MSL为2分钟，实际应用中常用的是30秒，1分钟和2分钟 <a class="header-anchor" href="#rfc-793中规定一个msl为2分钟-实际应用中常用的是30秒-1分钟和2分钟" aria-label="Permalink to &quot;RFC 793中规定一个MSL为2分钟，实际应用中常用的是30秒，1分钟和2分钟&quot;">​</a></h5><h3 id="close-wait-和-time-wait-的区别" tabindex="-1">CLOSE-WAIT 和 TIME-WAIT 的区别 <a class="header-anchor" href="#close-wait-和-time-wait-的区别" aria-label="Permalink to &quot;CLOSE-WAIT 和 TIME-WAIT 的区别&quot;">​</a></h3><h4 id="close-wait是等待关闭" tabindex="-1">CLOSE-WAIT是等待关闭 <a class="header-anchor" href="#close-wait是等待关闭" aria-label="Permalink to &quot;CLOSE-WAIT是等待关闭&quot;">​</a></h4><h5 id="服务端收到客户端关闭连接的请求并确认之后-进入close-wait状态。" tabindex="-1">服务端收到客户端关闭连接的请求并确认之后，进入CLOSE-WAIT状态。 <a class="header-anchor" href="#服务端收到客户端关闭连接的请求并确认之后-进入close-wait状态。" aria-label="Permalink to &quot;服务端收到客户端关闭连接的请求并确认之后，进入CLOSE-WAIT状态。&quot;">​</a></h5><h5 id="但服务端可能还有一些数据没有传输完成-不能立即关闭连接" tabindex="-1">但服务端可能还有一些数据没有传输完成，不能立即关闭连接 <a class="header-anchor" href="#但服务端可能还有一些数据没有传输完成-不能立即关闭连接" aria-label="Permalink to &quot;但服务端可能还有一些数据没有传输完成，不能立即关闭连接&quot;">​</a></h5><h5 id="所以close-wait状态是为了保证服务端在关闭连接之前将待发送的数据处理完" tabindex="-1">所以CLOSE-WAIT状态是为了保证服务端在关闭连接之前将待发送的数据处理完 <a class="header-anchor" href="#所以close-wait状态是为了保证服务端在关闭连接之前将待发送的数据处理完" aria-label="Permalink to &quot;所以CLOSE-WAIT状态是为了保证服务端在关闭连接之前将待发送的数据处理完&quot;">​</a></h5><h4 id="time-wait是在第四次挥手" tabindex="-1">TIME-WAIT是在第四次挥手 <a class="header-anchor" href="#time-wait是在第四次挥手" aria-label="Permalink to &quot;TIME-WAIT是在第四次挥手&quot;">​</a></h4><h5 id="当客户端向服务端发送ack确认报文后进入time-wait状态-主动关闭连接的-才有time-wait状态" tabindex="-1">当客户端向服务端发送ACK确认报文后进入TIME-WAIT状态，主动关闭连接的，才有time_wait状态 <a class="header-anchor" href="#当客户端向服务端发送ack确认报文后进入time-wait状态-主动关闭连接的-才有time-wait状态" aria-label="Permalink to &quot;当客户端向服务端发送ACK确认报文后进入TIME-WAIT状态，主动关闭连接的，才有time_wait状态&quot;">​</a></h5><h6 id="在http请求中-如果connection头部的取值设置为close-那么多数都由服务端主动关闭连接" tabindex="-1">在HTTP请求中，如果connection头部的取值设置为close，那么多数都由服务端主动关闭连接 <a class="header-anchor" href="#在http请求中-如果connection头部的取值设置为close-那么多数都由服务端主动关闭连接" aria-label="Permalink to &quot;在HTTP请求中，如果connection头部的取值设置为close，那么多数都由服务端主动关闭连接&quot;">​</a></h6><h6 id="服务端处理完请求后主动关闭连接-所以服务端出现大􏰁time-wait状态" tabindex="-1">服务端处理完请求后主动关闭连接，所以服务端出现大􏰁time_wait状态 <a class="header-anchor" href="#服务端处理完请求后主动关闭连接-所以服务端出现大􏰁time-wait状态" aria-label="Permalink to &quot;服务端处理完请求后主动关闭连接，所以服务端出现大􏰁time_wait状态&quot;">​</a></h6><h5 id="防止旧连接的数据包" tabindex="-1">防止旧连接的数据包 <a class="header-anchor" href="#防止旧连接的数据包" aria-label="Permalink to &quot;防止旧连接的数据包&quot;">​</a></h5><h6 id="如果客户端收到服务端的fin报文之后立即关闭连接-但服务端对应的端口并没有关闭" tabindex="-1">如果客户端收到服务端的FIN报文之后立即关闭连接，但服务端对应的端口并没有关闭 <a class="header-anchor" href="#如果客户端收到服务端的fin报文之后立即关闭连接-但服务端对应的端口并没有关闭" aria-label="Permalink to &quot;如果客户端收到服务端的FIN报文之后立即关闭连接，但服务端对应的端口并没有关闭&quot;">​</a></h6><h6 id="客户端在相同端口建立新的连接-可能导致新连接收到旧连接的数据包-从而产生问题" tabindex="-1">客户端在相同端口建立新的连接，可能导致新连接收到旧连接的数据包，从而产生问题 <a class="header-anchor" href="#客户端在相同端口建立新的连接-可能导致新连接收到旧连接的数据包-从而产生问题" aria-label="Permalink to &quot;客户端在相同端口建立新的连接，可能导致新连接收到旧连接的数据包，从而产生问题&quot;">​</a></h6><h5 id="保证连接正确关闭" tabindex="-1">保证连接正确关闭 <a class="header-anchor" href="#保证连接正确关闭" aria-label="Permalink to &quot;保证连接正确关闭&quot;">​</a></h5><h6 id="假如客户端最后一次发送的ack包在传输的时候丢失-由于tcp协议的超时重传机制-服务端-将重发fin报文" tabindex="-1">假如客户端最后一次发送的ACK包在传输的时候丢失，由于TCP协议的超时重传机制，服务端 将重发FIN报文 <a class="header-anchor" href="#假如客户端最后一次发送的ack包在传输的时候丢失-由于tcp协议的超时重传机制-服务端-将重发fin报文" aria-label="Permalink to &quot;假如客户端最后一次发送的ACK包在传输的时候丢失，由于TCP协议的超时重传机制，服务端 将重发FIN报文&quot;">​</a></h6><h6 id="如果客户端不是time-wait状态而直接关闭的话-当收到服务端重送的fin包时-客户端会用-rst包来响应服务端" tabindex="-1">如果客户端不是TIME-WAIT状态而直接关闭的话，当收到服务端重送的FIN包时，客户端会用 RST包来响应服务端 <a class="header-anchor" href="#如果客户端不是time-wait状态而直接关闭的话-当收到服务端重送的fin包时-客户端会用-rst包来响应服务端" aria-label="Permalink to &quot;如果客户端不是TIME-WAIT状态而直接关闭的话，当收到服务端重送的FIN包时，客户端会用 RST包来响应服务端&quot;">​</a></h6><h6 id="导致服务端以为有错误发生-但实际是关闭连接是没问题的" tabindex="-1">导致服务端以为有错误发生，但实际是关闭连接是没问题的 <a class="header-anchor" href="#导致服务端以为有错误发生-但实际是关闭连接是没问题的" aria-label="Permalink to &quot;导致服务端以为有错误发生，但实际是关闭连接是没问题的&quot;">​</a></h6><h3 id="time-wait状态有啥坏处" tabindex="-1">TIME-WAIT状态有啥坏处? <a class="header-anchor" href="#time-wait状态有啥坏处" aria-label="Permalink to &quot;TIME-WAIT状态有啥坏处?&quot;">​</a></h3><p>占用文件描述符/内存资源/CPU 和端口</p><h3 id="为什么建立连接是三次握手-关闭连接却是四次挥手呢" tabindex="-1">为什么建立连接是三次握手，关闭连接却是四次挥手呢? <a class="header-anchor" href="#为什么建立连接是三次握手-关闭连接却是四次挥手呢" aria-label="Permalink to &quot;为什么建立连接是三次握手，关闭连接却是四次挥手呢?&quot;">​</a></h3><h4 id="为了确保数据能够完成传输-当收到对方的fin报文通知时-它仅仅表示对方没有数据发送给你了-但未必所有的数据都全部发送给对方了-所以不能⻢上会关闭socket" tabindex="-1">为了确保数据能够完成传输，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了 但未必所有的数据都全部发送给对方了，所以不能⻢上会关闭SOCKET <a class="header-anchor" href="#为了确保数据能够完成传输-当收到对方的fin报文通知时-它仅仅表示对方没有数据发送给你了-但未必所有的数据都全部发送给对方了-所以不能⻢上会关闭socket" aria-label="Permalink to &quot;为了确保数据能够完成传输，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了 但未必所有的数据都全部发送给对方了，所以不能⻢上会关闭SOCKET&quot;">​</a></h4><h4 id="可能还需要发送一些数据给对方之后-再发送fin报文告诉对方来表示同意现在可以关闭socket连接" tabindex="-1">可能还需要发送一些数据给对方之后，再发送FIN报文告诉对方来表示同意现在可以关闭SOCKET连接 <a class="header-anchor" href="#可能还需要发送一些数据给对方之后-再发送fin报文告诉对方来表示同意现在可以关闭socket连接" aria-label="Permalink to &quot;可能还需要发送一些数据给对方之后，再发送FIN报文告诉对方来表示同意现在可以关闭SOCKET连接&quot;">​</a></h4><h4 id="对比" tabindex="-1">对比 <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;对比&quot;">​</a></h4><h5 id="三次握手中第二次握手syn和ack是一起发送" tabindex="-1">三次握手中第二次握手SYN和ACK是一起发送 <a class="header-anchor" href="#三次握手中第二次握手syn和ack是一起发送" aria-label="Permalink to &quot;三次握手中第二次握手SYN和ACK是一起发送&quot;">​</a></h5><h5 id="tcp断开连接的fin-和-ack需要分开-表示服务端仍可以接受数据-因此需要四次挥手" tabindex="-1">TCP断开连接的FIN 和 ACK需要分开 表示服务端仍可以接受数据，因此需要四次挥手 <a class="header-anchor" href="#tcp断开连接的fin-和-ack需要分开-表示服务端仍可以接受数据-因此需要四次挥手" aria-label="Permalink to &quot;TCP断开连接的FIN 和 ACK需要分开 表示服务端仍可以接受数据，因此需要四次挥手&quot;">​</a></h5>',227),R=[v,L,K];function Q(j,W,Y,H,G,V){return i(),h("div",null,R)}const Z=r(N,[["render",Q]]);export{z as __pageData,Z as default};

import{_ as i,c as s,o as a,V as e}from"./chunks/framework.UELMdIAk.js";const g=JSON.parse('{"title":"JavaScript之数据类型","description":"JS中的数据类型被分为两大类：原始值类型（值类型/基本数据类型）number 数字string 字符串boolean 布尔null 空对象指针undefined 未定义symbol 唯一值bigint 大数对象类型（引用数据类型）标准普通对象 Object标准特殊对象 Array、RegExp...","frontmatter":{"title":"JavaScript之数据类型","urlname":"sk8ag5","date":"2022-03-10 09:44:19","updated":"2024-02-04 16:01:53","description":"JS中的数据类型被分为两大类：原始值类型（值类型/基本数据类型）number 数字string 字符串boolean 布尔null 空对象指针undefined 未定义symbol 唯一值bigint 大数对象类型（引用数据类型）标准普通对象 Object标准特殊对象 Array、RegExp..."},"headers":[],"relativePath":"mds/前端/JS底层知识/JavaScript之数据类型.md","filePath":"mds/前端/JS底层知识/JavaScript之数据类型.md"}'),l={name:"mds/前端/JS底层知识/JavaScript之数据类型.md"},n=e(`<h2 id="js中的数据类型被分为两大类" tabindex="-1">JS中的数据类型被分为两大类： <a class="header-anchor" href="#js中的数据类型被分为两大类" aria-label="Permalink to &quot;JS中的数据类型被分为两大类：&quot;">​</a></h2><h4 id="原始值类型-值类型-基本数据类型" tabindex="-1">原始值类型（值类型/基本数据类型） <a class="header-anchor" href="#原始值类型-值类型-基本数据类型" aria-label="Permalink to &quot;原始值类型（值类型/基本数据类型）&quot;">​</a></h4><ol><li>number 数字</li><li>string 字符串</li><li>boolean 布尔</li><li>null 空对象指针</li><li>undefined 未定义</li><li>symbol 唯一值</li><li>bigint 大数</li></ol><h4 id="对象类型-引用数据类型" tabindex="-1">对象类型（引用数据类型） <a class="header-anchor" href="#对象类型-引用数据类型" aria-label="Permalink to &quot;对象类型（引用数据类型）&quot;">​</a></h4><ol><li>标准普通对象 <code>Object</code></li><li>标准特殊对象 <code>Array</code>、<code>RegExp</code>、<code>Date</code>、<code>Math</code>、<code>Error</code>......</li><li>非标准特殊对象 <code>Number</code>、<code>String</code>、<code>Boolean</code></li><li>可调用/执行对象（函数） <code>Function</code></li></ol><h2 id="数据类型检测的方式-4种" tabindex="-1">数据类型检测的方式（4种） <a class="header-anchor" href="#数据类型检测的方式-4种" aria-label="Permalink to &quot;数据类型检测的方式（4种）&quot;">​</a></h2><ol><li><code>typeof [value]</code> 返回值是字符串，字符串中包含所属的类型 <ol><li>typeof检测对象类型，除函数被识别<code>&#39;function&#39;</code>，其余都是<code>&#39;object&#39;</code>（不能细分对象）</li><li>基于typeof检测一个未被声明的变量，不会报错，结果是<code>&#39;undefined&#39;</code></li><li><code>typeof null -&gt; &#39;object&#39;</code> typeof检测null结果是<code>&#39;object&#39;</code>的原因是：如果是以&#39;000&#39;开始的二进制，则被识别为对象(null存储的二进制都是0，符合以&#39;000&#39;开始)；然后再去看对象是否实现了[[call]]，实现了则为函数(返回<code>&#39;function&#39;</code>)，没实现就是对象(返回<code>&#39;object&#39;</code>)</li></ol></li><li><code>Object.prototype.toString.call([value])</code></li><li><code>[value] instanceof [constructor]</code></li><li><code>[value].constructor</code></li></ol><p>其他检测固定类型的方法：<code>Array.isArray([value])</code>、<code>isNaN([value])</code> ......<br>检测是否为对象：<code>val !== null &amp;&amp; /^(object|function)$/i.test(typeof val)</code><br>0.1 + 0.2 != 0.3 计算机是二进制形式存储数据的，十进制浮点数在转换为二进制时，由于计算机存储位数限制，有可能出现精度丢失。<br>运算保证精度，实现思路：把小数变成整数(乘以系数)运算，运算后的结果再除以系数。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> coefficent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> coefficent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(num)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">len</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> char.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, len)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> plus</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> plus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">m</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coeffic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">coefficient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">coefficent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coeffic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coeffic) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> coeffic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h2><p>一般将其他数据类型转换为<code>Number</code>、<code>String</code>、<code>Boolean</code></p><h4 id="把其他类型值转换为number" tabindex="-1">把其他类型值转换为<code>Number</code> <a class="header-anchor" href="#把其他类型值转换为number" aria-label="Permalink to &quot;把其他类型值转换为\`Number\`&quot;">​</a></h4><ol><li><code>Number([value])</code></li><li><code>parseInt([val],[radix])</code>、<code>parseFloat([val])</code></li></ol><h4 id="把其他类型值转换为string" tabindex="-1">把其他类型值转换为<code>String</code> <a class="header-anchor" href="#把其他类型值转换为string" aria-label="Permalink to &quot;把其他类型值转换为\`String\`&quot;">​</a></h4><ol><li><code>[value].toString()</code></li><li><code>String([value])</code></li></ol><h4 id="把其他类型值转换为boolean" tabindex="-1">把其他类型值转换为<code>Boolean</code> <a class="header-anchor" href="#把其他类型值转换为boolean" aria-label="Permalink to &quot;把其他类型值转换为\`Boolean\`&quot;">​</a></h4><p>转换规则：除了“0/NaN/空字符串/null/undefined”五个值是false，其余的都是true<br>出现情况：</p><ol><li><code>Boolean([val])</code>或者<code>!/!!</code></li><li><code>条件判断</code></li></ol>`,19),t=[n];function h(k,p,o,d,r,c){return a(),s("div",null,t)}const y=i(l,[["render",h]]);export{g as __pageData,y as default};

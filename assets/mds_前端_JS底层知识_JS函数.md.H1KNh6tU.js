import{_ as a,c as s,o as n,V as e}from"./chunks/framework.i0rBMCzt.js";const b=JSON.parse('{"title":"JS函数","description":"","frontmatter":{"title":"JS函数","urlname":"7325541e983fbb49fe5f73fb011788fd","date":"2024-01-20 16:15:17","updated":"2024-02-04 16:01:14"},"headers":[],"relativePath":"mds/前端/JS底层知识/JS函数.md","filePath":"mds/前端/JS底层知识/JS函数.md"}'),p={name:"mds/前端/JS底层知识/JS函数.md"},l=e(`<h2 id="纯函数" tabindex="-1">纯函数 <a class="header-anchor" href="#纯函数" aria-label="Permalink to &quot;纯函数&quot;">​</a></h2><p>相同的输入永远会得到相同的输出。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>y=f(x)</span></span></code></pre></div><h2 id="高阶函数" tabindex="-1">高阶函数 <a class="header-anchor" href="#高阶函数" aria-label="Permalink to &quot;高阶函数&quot;">​</a></h2><p>高阶函数(Higher-order-function)的定义是：可以把函数作为参数传递给另一个函数；可以把函数作为另一个函数的返回结果。</p><h3 id="使用高阶函数的意义-好处" tabindex="-1">使用高阶函数的意义/好处 <a class="header-anchor" href="#使用高阶函数的意义-好处" aria-label="Permalink to &quot;使用高阶函数的意义/好处&quot;">​</a></h3><ul><li></li></ul><p>使函数抽象化，可以帮我们屏蔽实现细节，每次在调用函数时，我们只需要关注想要的目标。</p><ul><li></li></ul><p>对通用问题进行抽象，方便重复调用</p><ul><li></li></ul><p>使代码更加简洁</p><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><p>闭包(Closure)的定义是：函数和周围的状态(词法环境)的引用捆绑在一起形成闭包。 换句话说就是，闭包的形成是因为函数引用了当前作用域以外的其他作用域中的变量。</p><p>函数执行会形成一个执行栈，当执行栈中的内容被执行完成之后，会被游览器垃圾回收机制移除。但如果堆上的作用域成员被外部引用，是不会被移除的，因此内部函数依然可以访问外部函数中的成员。</p><h3 id="使用闭包的好处" tabindex="-1">使用闭包的好处 <a class="header-anchor" href="#使用闭包的好处" aria-label="Permalink to &quot;使用闭包的好处&quot;">​</a></h3><p>延长了外部函数中的变量的作用范围。</p><h2 id="柯里化-curry" tabindex="-1">柯里化(Curry) <a class="header-anchor" href="#柯里化-curry" aria-label="Permalink to &quot;柯里化(Curry)&quot;">​</a></h2><p>当一个函数有多个参数的时候，先传一部分参数并调用它，这部分参数以后永远不变。然后返回一个新的函数接收剩余的参数，最后返回结果。 柯里化可以让我们给一个函数传递较少的参数得到一个已经记住了某些固定参数的新函数。因此，柯里化是一种对函数参数的<strong>缓存</strong>。</p><h3 id="柯里化的好处" tabindex="-1">柯里化的好处 <a class="header-anchor" href="#柯里化的好处" aria-label="Permalink to &quot;柯里化的好处&quot;">​</a></h3><ul><li></li></ul><p>让函数变得灵活，让函数的粒度变得更小</p><ul><li></li></ul><p>可以把多元函数转换成一元函数，可以组合使用函数产生强大的功能。</p><p>通用柯里化函数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function curry(fn) {</span></span>
<span class="line"><span>  return function iner(...args) {</span></span>
<span class="line"><span>    if (fn.length !== args.length) {</span></span>
<span class="line"><span>      return iner(args.concat(Array.from(arguments)));</span></span>
<span class="line"><span>    } else {</span></span>
<span class="line"><span>      fn.apply(fn, args);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="函数组合-compose" tabindex="-1">函数组合(compose) <a class="header-anchor" href="#函数组合-compose" aria-label="Permalink to &quot;函数组合(compose)&quot;">​</a></h2><p>纯函数和柯里化函数很容易写出洋葱代码，这是我们不希望看到的。而函数组合可以让我们把细粒度的函数重新组合生成一个新的函数。</p><p>实现原理</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>function compose(...args) {</span></span>
<span class="line"><span>  return function (value) {</span></span>
<span class="line"><span>    return args.reduceRight(function (ret, fn) {</span></span>
<span class="line"><span>      return fn(ret);</span></span>
<span class="line"><span>    }, value);</span></span>
<span class="line"><span>  };</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>函数组合需要满足结合律，假如有三个函数 a、b、c，我们可以先把 a、b 函数组合，然后再组合 c；也可以先把 b、c 组合，然后再组合 a，结果是一样的。</p>`,31),t=[l];function i(r,o,c,h,d,u){return n(),s("div",null,t)}const m=a(p,[["render",i]]);export{b as __pageData,m as default};

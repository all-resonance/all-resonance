import{_ as s,c as i,o as e,V as a,a8 as l}from"./chunks/framework.4LQaK4jQ.js";const F=JSON.parse('{"title":"K8s笔记","description":"容器编排k8s最佳实践kubernetes+Rancher2.x笔记为什么要学习容器编排调度Kubernetes 多数互联网公司里面用的技术，实现跨主机多容器编排调度管理的最佳技术之一  可以实现服务注册发现、DevOps自动部署和回滚，能够自动实现请求的负载均衡分配网络流量  在多数互联网公...","frontmatter":{"title":"K8s笔记","urlname":"a819666aa68d94cd43692e05bac074e0","date":"2024-01-20 16:15:19","updated":"2024-02-04 16:04:33","description":"容器编排k8s最佳实践kubernetes+Rancher2.x笔记为什么要学习容器编排调度Kubernetes 多数互联网公司里面用的技术，实现跨主机多容器编排调度管理的最佳技术之一  可以实现服务注册发现、DevOps自动部署和回滚，能够自动实现请求的负载均衡分配网络流量  在多数互联网公..."},"headers":[],"relativePath":"mds/后端/K8s笔记.md","filePath":"mds/后端/K8s笔记.md"}'),t={name:"mds/后端/K8s笔记.md"},n=a('<h1 id="容器编排k8s最佳实践kubernetes-rancher2-x笔记" tabindex="-1">容器编排k8s最佳实践kubernetes+Rancher2.x笔记 <a class="header-anchor" href="#容器编排k8s最佳实践kubernetes-rancher2-x笔记" aria-label="Permalink to &quot;容器编排k8s最佳实践kubernetes+Rancher2.x笔记&quot;">​</a></h1><h2 id="为什么要学习容器编排调度kubernetes" tabindex="-1">为什么要学习容器编排调度Kubernetes <a class="header-anchor" href="#为什么要学习容器编排调度kubernetes" aria-label="Permalink to &quot;为什么要学习容器编排调度Kubernetes&quot;">​</a></h2><ul><li>多数互联网公司里面用的技术，实现跨主机多容器编排调度管理的最佳技术之一</li><li>可以实现服务注册发现、DevOps自动部署和回滚，能够自动实现请求的负载均衡分配网络流量</li><li>在多数互联网公司中，Kubernetes占有率很高，是近几年大量流行</li><li>可以作为公司内部培训技术分享必备知识，超多案例+实战等</li></ul><h3 id="有谁在用-进一线大厂-国内大厂多数都有用" tabindex="-1">有谁在用，进一线大厂(国内大厂多数都有用) <a class="header-anchor" href="#有谁在用-进一线大厂-国内大厂多数都有用" aria-label="Permalink to &quot;有谁在用，进一线大厂(国内大厂多数都有用)&quot;">​</a></h3><ul><li>国内：阿里、字节、腾讯 、微信、网易、⻁牙、⻘云、新浪等</li><li>国外：谷歌、Facebook、亚⻢逊、苹果等</li></ul><h3 id="k8s文档-https-kubernetes-io-docs-home" tabindex="-1"><a href="https://kubernetes.io/docs/home/" target="_blank" rel="noreferrer">K8S文档：</a><a href="https://kubernetes.io/docs/home/" target="_blank" rel="noreferrer">https://kubernetes.io/docs/home/</a> <a class="header-anchor" href="#k8s文档-https-kubernetes-io-docs-home" aria-label="Permalink to &quot;[K8S文档：](https://kubernetes.io/docs/home/)[https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)&quot;">​</a></h3><h2 id="互联网项目部署方式历史发展" tabindex="-1">互联网项目部署方式历史发展 <a class="header-anchor" href="#互联网项目部署方式历史发展" aria-label="Permalink to &quot;互联网项目部署方式历史发展&quot;">​</a></h2><h3 id="应用程序部署方式" tabindex="-1">应用程序部署方式 <a class="header-anchor" href="#应用程序部署方式" aria-label="Permalink to &quot;应用程序部署方式&quot;">​</a></h3><p><img src="'+l+`" alt=""></p><ul><li>传统部署时代 <ul><li>早期的时候，在物理服务器上运行应用程序</li><li>缺点 <ul><li>无法限制在物理服务器中运行的应用程序资源使用，会导致资源分配问题，过高或过低</li><li>部署多个物理机，维护许多物理服务器的成本很高。</li></ul></li></ul></li><li>虚拟化部署时代 <ul><li>虚拟化技术允许在单个物理服务器的 CPU 上运行多台虚拟机(VM)</li><li>虚拟化能使应用程序在不同 VM 之间被彼此隔离，且能提供一定程度的安全性</li><li>能够更好地利用物理服务器的资源，具有更高的可伸缩性，以及降低硬件成本等等的好处</li><li>缺点 <ul><li>需要单独一个系统，占用资源</li><li>不能灵活的扩容和缩容</li></ul></li></ul></li><li>容器部署时代 <ul><li>容器类似于 VM，但是更宽松的隔离特性，使容器之间可以共享操作系统(OS)</li><li>最熟悉的就是Docker容器化技术 <ul><li>一行命令可以部署任意一个 mysql、nginx、redis、RabbitMQ、Kakfa等热⻔中间件</li><li>docker命令可以操作当前机器上的1个容器</li><li>docker-compose可以操作当前机器上的多个容器</li><li>容器比起 VM 被认为是更轻量级的，每个容器都具有自己的文件系统、CPU、内存、进程空间等</li><li>跨云和操作系统发行版本的可移植性：可在 Ubuntu、CoreOS、CentOS、Google Kubernetes Engine 和其他任何地方运行</li></ul></li></ul></li></ul><h3 id="那docker容器化技术带来了哪些问题" tabindex="-1">那Docker容器化技术带来了哪些问题 <a class="header-anchor" href="#那docker容器化技术带来了哪些问题" aria-label="Permalink to &quot;那Docker容器化技术带来了哪些问题&quot;">​</a></h3><ul><li>10个物理机发布100个容器，怎么快速发布和管理</li><li>用户请求过来，怎么分配请求到100个容器里面</li><li>突发海量请求过来，如何根据情况进行快速扩容</li><li>应用发布上线出现问题，需要进行回滚历史版本，如何进行回滚</li><li>某个容器故障了，如何快速启动新容器去替代</li><li>......</li></ul><h3 id="上面容器管理的问题称为容器编排-为了解决这些问题-产生了一些容器编排的软件" tabindex="-1">上面容器管理的问题称为容器编排，为了解决这些问题，产生了一些容器编排的软件 <a class="header-anchor" href="#上面容器管理的问题称为容器编排-为了解决这些问题-产生了一些容器编排的软件" aria-label="Permalink to &quot;上面容器管理的问题称为容器编排，为了解决这些问题，产生了一些容器编排的软件&quot;">​</a></h3><ul><li>Docker Swarm：Docker自己的容器编排工具</li><li>Mesos：Apache的资源管控的工具，结合Marathon使用</li><li>Kubernetes：Google开源的的容器编排工具, 基于内部 Borg系统的开源版本</li></ul><h3 id="什么是kubernetes" tabindex="-1">什么是Kubernetes? <a class="header-anchor" href="#什么是kubernetes" aria-label="Permalink to &quot;什么是Kubernetes?&quot;">​</a></h3><ul><li>Kubernetes 这个名字源于希腊语，意为“舵手”或“⻜行员”</li><li>k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。</li><li>Google 在 2014 年开源了 Kubernetes 项目。 Kubernetes建立在Google大规模运行生产工作负载十几年经验的基础上，结合了社区中最优秀的想法和实践。</li><li>Kubernetes是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，简称K8S</li><li><a href="https://kubernetes.io/zh-cn/docs/home/" target="_blank" rel="noreferrer">官方文档：</a><a href="https://kubernetes.io/zh-cn/docs/home/" target="_blank" rel="noreferrer">https://kubernetes.io/zh-cn/docs/home/</a></li></ul><h3 id="k8s概述" tabindex="-1">k8s概述 <a class="header-anchor" href="#k8s概述" aria-label="Permalink to &quot;k8s概述&quot;">​</a></h3><ul><li>K8S的本质是一组服务器集群，可以在对应服务器集群的每个节点上运行程序，来对节点中的容器进行管理</li><li>类似Master-Work方式，每个服务器上安装特定的k8s组件，就可以形成集群，然后部署对应的应用即可。</li></ul><h3 id="k8s常⻅的功能" tabindex="-1">k8s常⻅的功能 <a class="header-anchor" href="#k8s常⻅的功能" aria-label="Permalink to &quot;k8s常⻅的功能&quot;">​</a></h3><ul><li>服务发现和负载均衡 <ul><li>Kubernetes 可以使用 DNS 名称或自己的 IP 地址来暴露容器</li><li>如果进入容器的流量很大， Kubernetes 能够自动实现请求的负载均衡分配网络流量，从而使部署稳定</li></ul></li><li>存储编排 <ul><li>Kubernetes 允许自动挂载选择的存储系统，例如本地存储、云提供商存储等</li></ul></li><li>自动部署和回滚 <ul><li>可以用k8s自动化部署创建新容器，删除现有容器并将它们的所有资源用于新容器。</li><li>当版本发布错误，可以立刻回退到之前的版本</li></ul></li><li>自我修复 <ul><li>如果某个容器宕机了，K8S 可以快速重新启动新的的容器，替换旧的容器</li></ul></li><li>密钥与配置管理 <ul><li>K8S允许存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥</li></ul></li></ul><h3 id="kubernetes常⻅组件和整体架构" tabindex="-1">Kubernetes常⻅组件和整体架构 <a class="header-anchor" href="#kubernetes常⻅组件和整体架构" aria-label="Permalink to &quot;Kubernetes常⻅组件和整体架构&quot;">​</a></h3><ul><li>kubernetes常⻅概念 <ul><li>Master <ul><li>指的是集群控制节点(相当于整个集群的指挥中心)，在每个Kubernetes集群里都需要有一个Master来负责整个集群的管理和控制</li></ul></li><li>Node <ul><li>除了master，k8s集群中的其他机器被称为Node节点，Node节点才是kubernetes集群中的工作负载节点</li><li>每个Node节点都会被master分配一些工作负载(docker容器)，node节点上的docker负责容器的运行</li></ul></li><li>Pod <ul><li>Pod是一组容器, 在K8S中，最小的单位是Pod，一个Pod可以包含多个容器，但通常情况下我们在每个Pod中仅使用一个容器</li><li>可以把Pod理解成豌豆荚, Pod内的每个容器是一颗颗豌豆</li></ul></li></ul></li></ul><p>![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/bc07266c-303b-41aa-b216-7f86a0f7b6b3/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/bc07266c-303b-41aa-b216-7f86a0f7b6b3/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 1.png)</p><pre><code>  -  分类 
     -  自主创建：直接创建出来的Pod，这种pod删除后就没有了，也不会自动重建 
     -  控制器创建：通过控制器创建的pod，这类Pod删除了之后还会自动重建 
</code></pre><ul><li>Pod Controller <ul><li>控制器是管理pod的中间层，只需要告诉Pod控制器，想要创建多少个什么样的Pod，它会创建出满足条件的Pod并确保每一个Pod资源处于用户期望的目标状态。如果Pod在运行中出现故障，它会基于指定策略重新编排Pod</li><li>通过它来实现对pod的管理，比如启动pod、停止pod、扩展pod的数量等等</li><li>类型 <ul><li>ReplicaSet、Deployment、Horizontal Pod Autoscaler、DaemonSet等</li></ul></li></ul></li><li>Service <ul><li>在k8s里面，每个Pod都会被分配一个单独的IP地址，但这个 IP地址会随着Pod的销毁而消失</li><li>Service (服务)就是用来解决这个问题的，对外服务的统一入口，用于为一组提供服务的Pod抽象一个稳定的网络访问地址</li><li>一个Service可以看作一组提供相同服务的Pod的对外访问接口，作用于哪些Pod是通过标签选择器来定义的</li></ul></li><li>Label <ul><li>K8S提供了一种机制来为Pod进行分类，那就是Label(标签)，同一类pod会拥有相同的标签</li><li>Label的具体形式是key-value的标记对，可以在创建资源的时候设置，也可以在后期添加和修改</li><li>给某个资源对象定义一个Label，就相当于给它打了一个标签，可以通过Label Selector(标签选择器)查询和筛选拥有某些Label的资源对象，K8S通过这种方式实现了类似 SQL的对象查询机制</li><li>应用场景 <ul><li>未使用前，分散难管理，如果需要部署不同版本的应用到不同的环境中，难操作</li></ul></li></ul></li></ul><p>![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/f2e4ae2a-1a75-4197-8877-c2f8bd927a69/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/f2e4ae2a-1a75-4197-8877-c2f8bd927a69/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 2.png)</p><pre><code>     - 为Pod打上不同标签，使用Label组织的Pod，轻松管理
</code></pre><p>![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/b5677daa-e74a-4bc6-95e6-949bb49cce9b/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/b5677daa-e74a-4bc6-95e6-949bb49cce9b/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 3.png)</p><ul><li>Label选择器 <ul><li>对应的资源打上标签后，可以使用标签选择器过滤指定的标签</li><li>标签选择器目前有两个 <ul><li>基于等值关系(等于、不等于)</li><li>基于集合关系(属于、不属于、存在)</li></ul></li></ul></li><li>NameSpace <ul><li>可以在一个物理集群上运行多个虚拟集群，这种虚拟集群被称作命名空间，用来隔离pod的运行环境</li><li>同一个名字空间中的资源名称必须唯一，而不同名字空间之间则没有这个要求</li><li>NameSpace是不能嵌套的，每一个 Kubernetes 的资源都只能在一个NameSpace内</li><li>名字空间是在多个用户之间划分集群资源的一种方法(通过资源配额)</li><li>不必使用多个名字空间来分隔轻微不同的资源，例如同一软件的不同版本：应该使用标签来区分同一名字空间中的不同资源</li><li>Kubernetes 会创建四个初始NameSpace名称空间 <ul><li>default <ul><li>没有指明使用其它名字空间的对象所使用的默认名字空间</li></ul></li><li>kube-system <ul><li>Kubernetes系统创建对象所使用的名字空间</li></ul></li><li>kube-public</li><li>kube-node-lease</li></ul></li></ul></li><li>应用分类 <ul><li>有状态应用 <ul><li>不能简单的实现负载均衡的服务，有数据产生的服务，Redis、MySql、RabbitMQ等</li><li>相关服务须通过一些较复杂的配置才能做到负载均衡</li><li>有状态的应用，建议直接在物理机部署，方便维护管理</li></ul></li><li>无状态应用 <ul><li>没有对应业务数据的应用，可以简单的实现负载均衡，复制一个节点即可快速扩容，如SpringCloud中的业务服务</li><li>无状态的应用适合部署在Kubernetes(K8s)中或者容器中</li></ul></li></ul></li><li>kubernetesK8S整体架构 ![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/4b9e8ff0-e8c9-4248-9edb-5effc365a6e4/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/4b9e8ff0-e8c9-4248-9edb-5effc365a6e4/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 4.png) <ul><li>也是Client-Server模型</li></ul></li></ul><p>![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/be135f79-ec1d-4c55-bc92-10c5df25ac23/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/be135f79-ec1d-4c55-bc92-10c5df25ac23/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 5.png)</p><ul><li>控制节点Master-Node，负责集群的管理 (Master也可以多个，保证高可用) <ul><li>apiserver：提供操作【k8s集群资源】的唯一入口， RESTful方式请求,并提供认证、授权、访问控制、API注册和发现等</li><li>scheduler：负责资源的调度，按照预定的调度策略，【计 算】将Pod调度到相应的Node节点进行应用部署</li><li>controller-manager：控制器管理中心，负责维护集群的状态，比如故障检测、滚动更新等，根据调度器的安排通知对应的节点创建pod</li><li>etcd：存储中心，是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库</li></ul></li><li>工作节点Worker-Node，负责为集群提供运行环境 <ul><li>Worker-Node是Pod真正运行的主机，可以是物理机也可以是虚拟机，Node本质上不是K8S来创建的，K8S只是管理Node上的资源，为了管理Pod，每个Node节点上至少需要运行 container runtime(Docker)、kubelet和kube-proxy服务</li><li>kubelet：相当于主节点派到工作节点的一个代表，用于管理本机容器(相当于master节点的化身)，负责维护容器的生命周期也负责Volume(CVI)和网络(CNI)的管理</li><li>kube-proxy：负责为Service提供cluster内部的服务发现/网络代理/负载均衡等操作，为部署的应用程序提供访问入口，和apiserver是不一样的，后者是操作k8s集群内部的</li></ul></li></ul><h2 id="k8s常⻅集群架构和云服务器搭建实-战" tabindex="-1">K8S常⻅集群架构和云服务器搭建实 战 <a class="header-anchor" href="#k8s常⻅集群架构和云服务器搭建实-战" aria-label="Permalink to &quot;K8S常⻅集群架构和云服务器搭建实 战&quot;">​</a></h2><h3 id="k8s常⻅集群架构和搭建方式介绍" tabindex="-1">K8S常⻅集群架构和搭建方式介绍 <a class="header-anchor" href="#k8s常⻅集群架构和搭建方式介绍" aria-label="Permalink to &quot;K8S常⻅集群架构和搭建方式介绍&quot;">​</a></h3><ul><li>k8s集群类型有多种 <ul><li>单master-Node集群 <ul><li>一主多从，推荐测试环境</li></ul></li></ul></li></ul><p>![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/6b285b54-db8d-465d-98eb-b3ed646fac4b/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/6b285b54-db8d-465d-98eb-b3ed646fac4b/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 6.png)</p><pre><code>  - 服务器要求：服务器要求至少2台2核4G以上的云服务器
</code></pre><ul><li>多master-Node集群 <ul><li>多主多从(高可用集群)，推荐生产环境使用</li></ul></li></ul><p>![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/aa8a70bb-5425-44ef-85fe-103e2b04dc32/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/aa8a70bb-5425-44ef-85fe-103e2b04dc32/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 7.png)</p><pre><code>  - 服务器要求：服务器要求至少4台2核4G以上的云服务器
</code></pre><ul><li>单节点k8s集群 <ul><li>单一个节点</li><li>服务器要求：服务器要求至少一台2核4G以上的云服务器</li></ul></li><li>k8s搭建方式 <ul><li>kubeadm搭建(推荐) <ul><li>是一个K8s部署工具，提供kubeadm init和kubeadm join</li><li>用于快速搭建k8s集群，比较推荐</li></ul></li><li>二进制包搭建 <ul><li>从github下载发行版的二进制包，手动部署每个组件，组成Kubernetes集群</li><li>可以了解底层，但是步骤繁琐，坑比较多</li></ul></li><li>Minikube搭建 <ul><li>是一种轻量化的Kubernetes集群，是k8s社区为了帮助开发者和学习者能够更好学习和体验k8s功能而推出的，使用个人PC的虚拟化环境就快速构建启动单节点k8s</li></ul></li></ul></li><li>练习方案 <ul><li>方案一：Minikube搭建进行搭建，1台服务器</li><li>方案二：一主多从，共2台以上服务器</li><li>我选择的方案：阿里云Linux CentOS 7.8按量付费两台</li></ul></li></ul><h3 id="基于kubeadm搭建多节点k8s集群" tabindex="-1">基于KubeAdm搭建多节点K8S集群 <a class="header-anchor" href="#基于kubeadm搭建多节点k8s集群" aria-label="Permalink to &quot;基于KubeAdm搭建多节点K8S集群&quot;">​</a></h3><ul><li>安装 <ul><li>安装Docker(主节点+工作节点) <ul><li>先安装yml</li></ul></li></ul></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-utils</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> device-mapper-persistent-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lvm2</span></span></code></pre></div><pre><code>  -  设置阿里云镜像 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-config-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-repo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.rep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><pre><code>  -  查看可安装的docker版本 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --showduplicates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span></span></code></pre></div><pre><code>  -  安装docker 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce-20.10.10-3.el7</span></span></code></pre></div><pre><code>  -  查看docker版本 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><pre><code>  -  配置开机自启动 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.service</span></span></code></pre></div><pre><code>  -  启动docker 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><pre><code>  -  查看docker 启动状态 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span></code></pre></div><ul><li>配置镜像源(主节点+工作节点)</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/yum.repos.d/kubernetes.repo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EOF</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[kubernetes]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name=Kubernetes</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled=1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgcheck=0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">repo_gpgcheck=0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span></code></pre></div><ul><li>安装kubelet kubeadm kubectl(主节点+工作节点)</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubelet-1.18.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubeadm-1.18.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl-1.18.0</span></span></code></pre></div><ul><li>主节点初始化(主节点) <ul><li>只修改两个地方(master主机【内网IP】，k8s软件版本)</li></ul></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--apiserver-advertise-address=172.31.101.9 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--image-repository [registry.aliyuncs.com/google_containers](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://registry.aliyuncs.com/google_containers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--kubernetes-version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.18.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--service-cidr=10.96.0.0/12 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--pod-network-cidr=10.244.0.0/16</span></span></code></pre></div><pre><code>  -  说明 
     -  \`-apiserver-advertise-address\`：主节点的内网ip地址 
     -  \`-image-repository\` 镜像仓库 
     -  \`-kubernetes-version\` k8s版本 
     -  \`-service-cidr\` + \`--pod-network-cidr\` 网段不重复即可 
</code></pre><ul><li>当初始化完成之后执行命令，并加入工作节点 <ul><li>按照提示执行命令</li><li>主节点执行命令 <ul><li>加入工作节点</li><li>查看节点</li></ul></li></ul></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodes</span></span></code></pre></div><pre><code>        - 状态都是NotReady，需要配置网络插件
     -  安装网络插件 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.ym</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><pre><code>     -  查看节点状态 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span></code></pre></div><pre><code>     -  查看系统pod状态 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pods</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span></span></code></pre></div><h3 id="_5分钟基于k8s集群部署你的第一个k8s应用" tabindex="-1">5分钟基于K8S集群部署你的第一个K8S应用 <a class="header-anchor" href="#_5分钟基于k8s集群部署你的第一个k8s应用" aria-label="Permalink to &quot;5分钟基于K8S集群部署你的第一个K8S应用&quot;">​</a></h3><ul><li>查看k8s集群信息</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cluster-info</span></span></code></pre></div><ul><li>查看节点信息</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span></code></pre></div><p>![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/212b3e1f-d797-4066-a08d-c1935431d925/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/212b3e1f-d797-4066-a08d-c1935431d925/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 8.png)</p><ul><li>查看内部组件</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span></code></pre></div><p>![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/af622fb2-c65e-450d-bfbe-5f8f0f081d01/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/af622fb2-c65e-450d-bfbe-5f8f0f081d01/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 9.png)</p><ul><li>部署第一个K8S应用-Nginx，并通过公网ip访问 <ul><li>创建deployment(Pod控制器的一种)</li></ul></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xdclass-nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --image=nginx:1.23.0</span></span></code></pre></div><ul><li>查看deployment和pod</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment,pod,svc</span></span></code></pre></div><p>![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/4277b070-9c8d-4dff-a600-7c0ae5942d53/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/4277b070-9c8d-4dff-a600-7c0ae5942d53/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 10.png)</p><ul><li>暴露80端口，创建service</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xdclass-nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port=80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type=NodePort</span></span></code></pre></div><ul><li>查看端口映射</li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod,svc</span></span></code></pre></div><p>![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/87b53b53-0207-47c2-bfd6-30639dafb961/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/87b53b53-0207-47c2-bfd6-30639dafb961/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 11.png)</p><ul><li>在浏览器访问, 工作节点开放端口31512，访问工作节点ip: 31512(网络安全组记得开放31512端口) <ul><li>master、node节点访问这个 开放的端口都可以</li></ul></li><li>注意 <ul><li>Kubeadm部署，暴露端口对外服务，会随机选端口，默认范围是30000~32767，可以修改指定 ![<a href="https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/d6549964-4928-48f5-a5e8-9b6245de2179/Untitled.png" target="_blank" rel="noreferrer">https://prod-files-secure.s3.us-west-2.amazonaws.com/48018283-2714-46c7-9db0-8578c93b2688/d6549964-4928-48f5-a5e8-9b6245de2179/Untitled.png</a>](K8s笔记+75d943eb-4fe1-4783-bb50-6784268e2a09/Untitled 12.png)</li></ul></li></ul><h2 id="kubernetes核心资源管理操作实战" tabindex="-1">Kubernetes核心资源管理操作实战 <a class="header-anchor" href="#kubernetes核心资源管理操作实战" aria-label="Permalink to &quot;Kubernetes核心资源管理操作实战&quot;">​</a></h2><h3 id="kubernetes常⻅资源管理命令介绍" tabindex="-1">Kubernetes常⻅资源管理命令介绍 <a class="header-anchor" href="#kubernetes常⻅资源管理命令介绍" aria-label="Permalink to &quot;Kubernetes常⻅资源管理命令介绍&quot;">​</a></h3><ul><li>概念 <ul><li>k8s是一个服务器集群系统，用户可以在集群中部署各种服务，也就是在k8s集群上运行一个个的容器</li><li>在k8s中，pod是最小的管理单元而非容器，一个pod中可以有多个容器</li><li>在k8s集群中，所有内容都可以被抽象为资源，通过操作资源来管理k8s集群</li></ul></li><li>使用kubectl来管理资源 <ul><li>kubectl用法</li></ul></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [command] [TYPE] [NAME] [flags]</span></span></code></pre></div><pre><code>  -  commad：对资源具体的操作，如create创建、get获取、delete删除 
  -  TYPE：指定资源类型，大小写敏感 
  -  NAME：指定资源的名称，大小写敏感，如果省略名称则 显示所有资源 
  -  flags：指定可选的参数，如可用-s或者-server指定Kubernetes API server的地址和端口 
</code></pre><ul><li>例子 <ul><li>获取全部节点</li></ul></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span></code></pre></div><pre><code>  -  获取全部pod 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span></span></code></pre></div><pre><code>  -  查看某个pod内容 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod_name</span></span></code></pre></div><pre><code>  -  获取全部名称空间 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ns</span></span></code></pre></div><pre><code>  -  查看创建的资源 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod,svc,deploy</span></span></code></pre></div><pre><code>  -  删除nginx pod，如果是靠deploy控制器创建的pod，直接删除则会自动创建新的 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod名称</span></span></code></pre></div><pre><code>  -  提示：如果需要删除则直接删除depoly控制器即可，pod会被删除 
</code></pre><ul><li>资源管理方式 <ul><li>命令式对象管理：直接使用命令去操作资源</li></ul></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 资源名称</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --image=镜像名称</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port=端口号</span></span></code></pre></div><pre><code>     -  例子 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xdclass-nignx-pod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --image=nginx:1.23.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port=80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xdclass-nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --image=nginx:1.23.0</span></span></code></pre></div><pre><code>  -  命令式对象配置：通过命令配置和配置文件去操作资源 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 配置文件名称.yaml</span></span></code></pre></div><pre><code>  -  声明式对象配置：通过apply和配置文件操作资源 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 配置文件名称.yaml</span></span></code></pre></div><pre><code>  -  yaml例子 
</code></pre><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apiVersion:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apps/v1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Deployment</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-deployment</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   labels:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      app:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-deployment</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spec:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   replicas:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   selector:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      matchLabels:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         app:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-pod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   template:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      metadata:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           labels:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">              app:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-pod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      spec:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         containers:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx:1.23.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             imagePullPolicy:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IfNotPresent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             ports:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerPort:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apiVersion:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">metadata:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spec:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  containers:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx:1.23.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ports:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-port</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      containerPort:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      protocol:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TCP</span></span></code></pre></div><pre><code>  -  kubectl create 和 kubectl apply的区别 
     -  kubectl create 命令首次执行时会创建资源，当再次执行的时候会报错，因为资源名称在同一命名空间内是唯一的 
     -  kubectl apply在首次执行的时候也会创建对应的资源，当再次执行的时候会根据配置文件进行升级、扩容等操作，即使配置文件没有变化也不影响 
</code></pre>`,122),p=[n];function h(k,d,r,o,c,u){return e(),i("div",null,p)}const b=s(t,[["render",h]]);export{F as __pageData,b as default};

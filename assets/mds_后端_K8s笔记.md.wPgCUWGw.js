import{_ as s,c as i,o as a,V as l,a6 as n,a7 as h,a8 as t,a9 as k,aa as p,ab as e,ac as F,ad as r,ae as d}from"./chunks/framework.AC1hLR_4.js";const v=JSON.parse('{"title":"K8s笔记","description":"","frontmatter":{"urlname":"k8s","title":"K8s笔记","updated":"2024-01-16 15:11:37","date":"2024-01-16 15:04:15","status":"已发布","catalog":["后端"]},"headers":[],"relativePath":"mds/后端/K8s笔记.md","filePath":"mds/后端/K8s笔记.md"}'),g={name:"mds/后端/K8s笔记.md"},y=l('<h1 id="容器编排k8s最佳实践kubernetes-rancher2-x笔记" tabindex="-1">容器编排k8s最佳实践kubernetes+Rancher2.x笔记 <a class="header-anchor" href="#容器编排k8s最佳实践kubernetes-rancher2-x笔记" aria-label="Permalink to &quot;容器编排k8s最佳实践kubernetes+Rancher2.x笔记&quot;">​</a></h1><h2 id="为什么要学习容器编排调度kubernetes" tabindex="-1">为什么要学习容器编排调度Kubernetes <a class="header-anchor" href="#为什么要学习容器编排调度kubernetes" aria-label="Permalink to &quot;为什么要学习容器编排调度Kubernetes&quot;">​</a></h2><ul><li><p>多数互联网公司里面用的技术，实现跨主机多容器编排调度管理的最佳技术之一</p></li><li><p>可以实现服务注册发现、DevOps自动部署和回滚，能够自动实现请求的负载均衡分配网络流量</p></li><li><p>在多数互联网公司中，Kubernetes占有率很高，是近几年大量流行</p></li><li><p>可以作为公司内部培训技术分享必备知识，超多案例+实战等</p></li></ul><h3 id="有谁在用-进一线大厂-国内大厂多数都有用" tabindex="-1">有谁在用，进一线大厂(国内大厂多数都有用 ) <a class="header-anchor" href="#有谁在用-进一线大厂-国内大厂多数都有用" aria-label="Permalink to &quot;有谁在用，进一线大厂(国内大厂多数都有用 )&quot;">​</a></h3><ul><li><p>国内：阿里、字节、腾讯 、微信、网易、⻁牙、⻘云、新浪等</p></li><li><p>国外：谷歌、Facebook、亚⻢逊、苹果等</p></li></ul><h3 id="k8s文档-https-kubernetes-io-docs-home" tabindex="-1"><a href="https://kubernetes.io/docs/home/" target="_blank" rel="noreferrer">K8S文档：</a><a href="https://kubernetes.io/docs/home/" target="_blank" rel="noreferrer">https://kubernetes.io/docs/home/</a> <a class="header-anchor" href="#k8s文档-https-kubernetes-io-docs-home" aria-label="Permalink to &quot;[K8S文档：](https://kubernetes.io/docs/home/)[https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)&quot;">​</a></h3><h2 id="互联网项目部署方式历史发展" tabindex="-1">互联网项目部署方式历史发展 <a class="header-anchor" href="#互联网项目部署方式历史发展" aria-label="Permalink to &quot;互联网项目部署方式历史发展&quot;">​</a></h2><h3 id="应用程序部署方式" tabindex="-1">应用程序部署方式 <a class="header-anchor" href="#应用程序部署方式" aria-label="Permalink to &quot;应用程序部署方式&quot;">​</a></h3><p><img src="'+n+'" alt="Untitled.png"></p><ul><li><p>传统部署时代</p><ul><li>早期的时候，在物理服务器上运行应用程序 <ul><li>缺点</li><li>无法限制在物理服务器中运行的应用程序资源使用，会导致资源分配问题，过高或过低 <ul><li>部署多个物理机，维护许多物理服务器的成本很高。</li></ul></li></ul></li></ul></li><li><p>虚拟化部署时代</p><ul><li>虚拟化技术允许在单个物理服务器的 CPU 上运行多台虚拟机(VM) <ul><li>虚拟化能使应用程序在不同 VM 之间被彼此隔离，且能提供一定程度的安全性</li><li>能够更好地利用物理服务器的资源，具有更高的可伸缩性，以及降低硬件成本等等的好处</li><li>缺点</li><li>需要单独一个系统，占用资源 <ul><li>不能灵活的扩容和缩容</li></ul></li></ul></li></ul></li><li><p>容器部署时代</p><ul><li>容器类似于 VM，但是更宽松的隔离特性，使容器之间可以共享操作系统(OS) <ul><li>最熟悉的就是Docker容器化技术</li><li>一行命令可以部署任意一个 mysql、nginx、redis、RabbitMQ、Kakfa等热⻔中间件 <ul><li>docker命令可以操作当前机器上的1个容器</li><li>docker-compose可以操作当前机器上的多个容器</li><li>容器比起 VM 被认为是更轻量级的，每个容器都具有自己的文件系统、CPU、内存、进程空间等</li><li>跨云和操作系统发行版本的可移植性：可在 Ubuntu、CoreOS、CentOS、Google Kubernetes Engine 和其他任何地方运行</li></ul></li></ul></li></ul></li></ul><h3 id="那docker容器化技术带来了哪些问题" tabindex="-1">那Docker容器化技术带来了哪些问题 <a class="header-anchor" href="#那docker容器化技术带来了哪些问题" aria-label="Permalink to &quot;那Docker容器化技术带来了哪些问题&quot;">​</a></h3><ul><li><p>10个物理机发布100个容器，怎么快速发布和管理</p></li><li><p>用户请求过来，怎么分配请求到100个容器里面</p></li><li><p>突发海量请求过来，如何根据情况进行快速扩容</p></li><li><p>应用发布上线出现问题，需要进行回滚历史版本，如何进行回滚</p></li><li><p>某个容器故障了，如何快速启动新容器去替代</p></li><li><p>......</p></li></ul><h3 id="上面容器管理的问题称为容器编排-为了解决这些问题-产生了一些容器编排的软件" tabindex="-1">上面容器管理的问题称为容器编排，为了解决这些问题，产生了一些容器编排的软件 <a class="header-anchor" href="#上面容器管理的问题称为容器编排-为了解决这些问题-产生了一些容器编排的软件" aria-label="Permalink to &quot;上面容器管理的问题称为容器编排，为了解决这些问题，产生了一些容器编排的软件&quot;">​</a></h3><ul><li><p>Docker Swarm：Docker自己的容器编排工具</p></li><li><p>Mesos：Apache的资源管控的工具，结合Marathon使用</p></li><li><p>Kubernetes：Google开源的的容器编排工具, 基于内部 Borg系统的开源版本</p></li></ul><h3 id="什么是kubernetes" tabindex="-1">什么是Kubernetes? <a class="header-anchor" href="#什么是kubernetes" aria-label="Permalink to &quot;什么是Kubernetes?&quot;">​</a></h3><ul><li><p>Kubernetes 这个名字源于希腊语，意为“舵手”或“⻜行员”</p></li><li><p>k8s 这个缩写是因为 k 和 s 之间有八个字符的关系。</p></li><li><p>Google 在 2014 年开源了 Kubernetes 项目。 Kubernetes建立在Google大规模运行生产工作负载十几年经验的基础上，结合了社区中最优秀的想法和实践。</p></li><li><p>Kubernetes是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，简称K8S</p></li><li><p><a href="https://kubernetes.io/zh-cn/docs/home/" target="_blank" rel="noreferrer">官方文档：</a><a href="https://kubernetes.io/zh-cn/docs/home/" target="_blank" rel="noreferrer">https://kubernetes.io/zh-cn/docs/home/</a></p></li></ul><h3 id="k8s概述" tabindex="-1">k8s概述 <a class="header-anchor" href="#k8s概述" aria-label="Permalink to &quot;k8s概述&quot;">​</a></h3><ul><li><p>K8S的本质是一组服务器集群，可以在对应服务器集群的每个节点上运行程序，来对节点中的容器进行管理</p></li><li><p>类似Master-Work方式，每个服务器上安装特定的k8s组件，就可以形成集群，然后部署对应的应用即可。</p></li></ul><h3 id="k8s常⻅的功能" tabindex="-1">k8s常⻅的功能 <a class="header-anchor" href="#k8s常⻅的功能" aria-label="Permalink to &quot;k8s常⻅的功能&quot;">​</a></h3><ul><li><p>服务发现和负载均衡</p><ul><li>Kubernetes 可以使用 DNS 名称或自己的 IP 地址来暴露容器 <ul><li>如果进入容器的流量很大， Kubernetes 能够自动实现请求的负载均衡分配网络流量，从而使部署稳定</li></ul></li></ul></li><li><p>存储编排</p><ul><li>Kubernetes 允许自动挂载选择的存储系统，例如本地存储、云提供商存储等</li></ul></li><li><p>自动部署和回滚</p><ul><li>可以用k8s自动化部署创建新容器，删除现有容器并将它们的所有资源用于新容器。 <ul><li>当版本发布错误，可以立刻回退到之前的版本</li></ul></li></ul></li><li><p>自我修复</p><ul><li>如果某个容器宕机了，K8S 可以快速重新启动新的的容器，替换旧的容器</li></ul></li><li><p>密钥与配置管理</p><ul><li>K8S允许存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥</li></ul></li></ul><h3 id="kubernetes常⻅组件和整体架构" tabindex="-1">Kubernetes常⻅组件和整体架构 <a class="header-anchor" href="#kubernetes常⻅组件和整体架构" aria-label="Permalink to &quot;Kubernetes常⻅组件和整体架构&quot;">​</a></h3><ul><li><p>kubernetes常⻅概念</p><ul><li>Master <ul><li>指的是集群控制节点(相当于整个集群的指挥中心)，在每个Kubernetes集群里都需要有一个Master来负责整个集群的管理和控制 <ul><li>Node</li></ul></li><li>除了master，k8s集群中的其他机器被称为Node节点，Node节点才是kubernetes集群中的工作负载节点 <ul><li>每个Node节点都会被master分配一些工作负载(docker容器)，node节点上的docker负责容器的运行</li><li>Pod</li></ul></li><li>Pod是一组容器, 在K8S中，最小的单位是Pod，一个Pod可以包含多个容器，但通常情况下我们在每个Pod中仅使用一个容器 <ul><li>可以把Pod理解成豌豆荚, Pod内的每个容器是一颗颗豌豆 <img src="'+h+'" alt="Untitled.png"> - 分类</li><li>自主创建：直接创建出来的Pod，这种pod删除后就没有了，也不会自动重建 <ul><li>控制器创建：通过控制器创建的pod，这类Pod删除了之后还会自动重建</li><li>Pod Controller</li></ul></li></ul></li><li>控制器是管理pod的中间层，只需要告诉Pod控制器，想要创建多少个什么样的Pod，它会创建出满足条件的Pod并确保每一个Pod资源处于用户期望的目标状态。如果Pod在运行中出现故障，它会基于指定策略重新编排Pod <ul><li>通过它来实现对pod的管理，比如启动pod、停止pod、扩展pod的数量等等</li><li>类型</li><li>ReplicaSet、Deployment、Horizontal Pod Autoscaler、DaemonSet等 <ul><li>Service</li></ul></li></ul></li><li>在k8s里面，每个Pod都会被分配一个单独的IP地址，但这个 IP地址会随着Pod的销毁而消失 <ul><li>Service (服务)就是用来解决这个问题的，对外服务的统一入口，用于为一组提供服务的Pod抽象一个稳定的网络访问地址</li><li>一个Service可以看作一组提供相同服务的Pod的对外访问接口，作用于哪些Pod是通过标签选择器来定义的</li><li>Label</li></ul></li><li>K8S提供了一种机制来为Pod进行分类，那就是Label(标签)，同一类pod会拥有相同的标签 <ul><li>Label的具体形式是key-value的标记对，可以在创建资源的时候设置，也可以在后期添加和修改</li><li>给某个资源对象定义一个Label，就相当于给它打了一个标签，可以通过Label Selector(标签选择器)查询和筛选拥有某些Label的资源对象，K8S通过这种方式实现了类似 SQL的对象查询机制</li><li>应用场景</li><li>未使用前，分散难管理，如果需要部署不同版本的应用到不同的环境中，难操作 <img src="'+t+'" alt="Untitled.png"> - 为Pod打上不同标签，使用Label组织的Pod，轻松管理 <img src="'+k+'" alt="Untitled.png"> - Label选择器</li></ul></li><li>对应的资源打上标签后，可以使用标签选择器过滤指定的标签 <ul><li>标签选择器目前有两个</li><li>基于等值关系(等于、不等于) <ul><li>基于集合关系(属于、不属于、存在)</li><li>NameSpace</li></ul></li></ul></li><li>可以在一个物理集群上运行多个虚拟集群，这种虚拟集群被称作命名空间，用来隔离pod的运行环境 <ul><li>同一个名字空间中的资源名称必须唯一，而不同名字空间之间则没有这个要求</li><li>NameSpace是不能嵌套的，每一个 Kubernetes 的资源都只能在一个NameSpace内</li><li>名字空间是在多个用户之间划分集群资源的一种方法(通过资源配额)</li><li>不必使用多个名字空间来分隔轻微不同的资源，例如同一软件的不同版本：应该使用标签来区分同一名字空间中的不同资源</li><li>Kubernetes 会创建四个初始NameSpace名称空间</li><li>default <ul><li>没有指明使用其它名字空间的对象所使用的默认名字空间 <ul><li>kube-system</li></ul></li><li>Kubernetes系统创建对象所使用的名字空间 <ul><li>kube-public</li></ul></li><li>kube-node-lease</li><li>应用分类</li></ul></li></ul></li><li>有状态应用 <ul><li>不能简单的实现负载均衡的服务，有数据产生的服务，Redis、MySql、RabbitMQ等 <ul><li>相关服务须通过一些较复杂的配置才能做到负载均衡</li><li>有状态的应用，建议直接在物理机部署，方便维护管理</li><li>无状态应用</li></ul></li><li>没有对应业务数据的应用，可以简单的实现负载均衡，复制一个节点即可快速扩容，如SpringCloud中的业务服务 <ul><li>无状态的应用适合部署在Kubernetes(K8s)中或者容器中</li></ul></li></ul></li></ul></li></ul></li><li><p>kubernetesK8S整体架构 <img src="'+p+'" alt="Untitled.png"> - 也是Client-Server模型 <img src="'+e+'" alt="Untitled.png"> - 控制节点Master-Node，负责集群的管理 (Master也可以多个，保证高可用) - apiserver：提供操作【k8s集群资源】的唯一入口， RESTful方式请求,并提供认证、授权、访问控制、API注册和发现等 - scheduler：负责资源的调度，按照预定的调度策略，【计 算】将Pod调度到相应的Node节点进行应用部署 - controller-manager：控制器管理中心，负责维护集群的状态，比如故障检测、滚动更新等，根据调度器的安排通知对应的节点创建pod - etcd：存储中心，是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库 - 工作节点Worker-Node，负责为集群提供运行环境 - Worker-Node是Pod真正运行的主机，可以是物理机也可以是虚拟机，Node本质上不是K8S来创建的，K8S只是管理Node上的资源，为了管理Pod，每个Node节点上至少需要运行 container runtime(Docker)、kubelet和kube-proxy服务 - kubelet：相当于主节点派到工作节点的一个代表，用于管理本机容器(相当于master节点的化身)，负责维护容器的生命周期也负责Volume(CVI)和网络(CNI)的管理 - kube-proxy：负责为Service提供cluster内部的服务发现/网络代理/负载均衡等操作，为部署的应用程序提供访问入口，和apiserver是不一样的，后者是操作k8s集群内部的</p></li></ul><h2 id="k8s常⻅集群架构和云服务器搭建实-战" tabindex="-1">K8S常⻅集群架构和云服务器搭建实 战 <a class="header-anchor" href="#k8s常⻅集群架构和云服务器搭建实-战" aria-label="Permalink to &quot;K8S常⻅集群架构和云服务器搭建实 战&quot;">​</a></h2><h3 id="k8s常⻅集群架构和搭建方式介绍" tabindex="-1">K8S常⻅集群架构和搭建方式介绍 <a class="header-anchor" href="#k8s常⻅集群架构和搭建方式介绍" aria-label="Permalink to &quot;K8S常⻅集群架构和搭建方式介绍&quot;">​</a></h3><ul><li><p>k8s集群类型有多种</p><ul><li>单master-Node集群 <ul><li>一主多从，推荐测试环境 <img src="'+F+'" alt="Untitled.png"> - 服务器要求：服务器要求至少2台2核4G以上的云服务器 <ul><li>多master-Node集群</li></ul></li><li>多主多从(高可用集群)，推荐生产环境使用 <img src="'+r+'" alt="Untitled.png"> - 服务器要求：服务器要求至少4台2核4G以上的云服务器 <ul><li>单节点k8s集群</li></ul></li><li>单一个节点 <ul><li>服务器要求：服务器要求至少一台2核4G以上的云服务器</li></ul></li></ul></li></ul></li><li><p>k8s搭建方式</p><ul><li>kubeadm搭建(推荐) <ul><li>是一个K8s部署工具，提供kubeadm init和kubeadm join <ul><li>用于快速搭建k8s集群，比较推荐</li><li>二进制包搭建</li></ul></li><li>从github下载发行版的二进制包，手动部署每个组件，组成Kubernetes集群 <ul><li>可以了解底层，但是步骤繁琐，坑比较多</li><li>Minikube搭建</li></ul></li><li>是一种轻量化的Kubernetes集群，是k8s社区为了帮助开发者和学习者能够更好学习和体验k8s功能而推出的，使用个人PC的虚拟化环境就快速构建启动单节点k8s</li></ul></li></ul></li><li><p>练习方案</p><ul><li>方案一：Minikube搭建进行搭建，1台服务器 <ul><li>方案二：一主多从，共2台以上服务器</li><li>我选择的方案：阿里云Linux CentOS 7.8按量付费两台</li></ul></li></ul></li></ul><h3 id="基于kubeadm搭建多节点k8s集群" tabindex="-1">基于KubeAdm搭建多节点K8S集群 <a class="header-anchor" href="#基于kubeadm搭建多节点k8s集群" aria-label="Permalink to &quot;基于KubeAdm搭建多节点K8S集群&quot;">​</a></h3><ul><li>安装 <ul><li>安装Docker(主节点+工作节点) <ul><li>先安装yml<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-utils</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> device-mapper-persistent-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lvm2</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 设置阿里云镜像</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yum-config-manager</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-repo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.rep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看可安装的docker版本</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --showduplicates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sort</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 安装docker</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker-ce-20.10.10-3.el7</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看docker版本</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 配置开机自启动</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> enable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker.service</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 启动docker</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看docker 启动状态</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> docker</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 配置镜像源(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">主节点+工作节点</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre></div></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/yum.repos.d/kubernetes.repo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> EOF</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[kubernetes]</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name=Kubernetes</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">enabled=1</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgcheck=0</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">repo_gpgcheck=0</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg&gt;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">EOF</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 安装kubelet kubeadm kubectl(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">主节点+工作节点</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubelet-1.18.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubeadm-1.18.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl-1.18.0</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 主节点初始化(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">主节点</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 只修改两个地方(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">master主机【内网IP】，k8s软件版本</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubeadm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--apiserver-advertise-address=172.31.101.9 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--image-repository [registry.aliyuncs.com/google_containers](</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http://registry.aliyuncs.com/google_containers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--kubernetes-version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1.18.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\\\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--service-cidr=10.96.0.0/12 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">--pod-network-cidr=10.244.0.0/16</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 说明</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-apiserver-advertise-address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">：主节点的内网ip地址</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-image-repository</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">` </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">镜像仓库</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-kubernetes-version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">` </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">k8s版本</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-service-cidr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">` </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">--pod-network-cidr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">` </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">网段不重复即可</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 当初始化完成之后执行命令，并加入工作节点</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 按照提示执行命令</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 主节点执行命令</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 加入工作节点</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看节点</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nodes</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 状态都是NotReady，需要配置网络插件</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">			-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 安装网络插件</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.ym</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看节点状态</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看系统pod状态</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pods</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kube-system</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		```</span></span></code></pre></div></li></ul></li></ul><h3 id="_5分钟基于k8s集群部署你的第一个k8s应用" tabindex="-1">5分钟基于K8S集群部署你的第一个K8S应用 <a class="header-anchor" href="#_5分钟基于k8s集群部署你的第一个k8s应用" aria-label="Permalink to &quot;5分钟基于K8S集群部署你的第一个K8S应用&quot;">​</a></h3><ul><li><p>查看k8s集群信息</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cluster-info</span></span></code></pre></div></li><li><p>查看节点信息</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[Untitled.png](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/images/d61ab5b31285a52928973ef4b421781b.png</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre></div></li><li><p>查看内部组件</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[Untitled.png](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/images/ea27e00b2a45c64f37d3256689fe2b07.png</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre></div></li><li><p>部署第一个K8S应用-Nginx，并通过公网ip访问</p><ul><li>创建deployment(Pod控制器的一种)<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xdclass-nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --image=nginx:1.23.0</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看deployment和pod</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment,pod,svc</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[Untitled.png](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/images/63108f9a33992eea965cdc90b4ea7733.png</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 暴露80端口，创建service</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> expose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xdclass-nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port=80</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --type=NodePort</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看端口映射</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod,svc</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">```	</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">[Untitled.png](</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/images/a38b8d16ec36f6ed898d4f69f9d12d25.png</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 在浏览器访问, 工作节点开放端口31512，访问工作节点ip: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">31512</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">网络安全组记得开放31512端口</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master、node节点访问这个 开放的端口都可以</span></span></code></pre></div></li></ul></li><li><p>注意</p><ul><li>Kubeadm部署，暴露端口对外服务，会随机选端口，默认范围是30000~32767，可以修改指定 <img src="'+d+`" alt="Untitled.png"></li></ul></li></ul><h2 id="kubernetes核心资源管理操作实战" tabindex="-1">Kubernetes核心资源管理操作实战 <a class="header-anchor" href="#kubernetes核心资源管理操作实战" aria-label="Permalink to &quot;Kubernetes核心资源管理操作实战&quot;">​</a></h2><h3 id="kubernetes常⻅资源管理命令介绍" tabindex="-1">Kubernetes常⻅资源管理命令介绍 <a class="header-anchor" href="#kubernetes常⻅资源管理命令介绍" aria-label="Permalink to &quot;Kubernetes常⻅资源管理命令介绍&quot;">​</a></h3><ul><li><p>概念</p><ul><li>k8s是一个服务器集群系统，用户可以在集群中部署各种服务，也就是在k8s集群上运行一个个的容器 <ul><li>在k8s中，pod是最小的管理单元而非容器，一个pod中可以有多个容器</li><li>在k8s集群中，所有内容都可以被抽象为资源，通过操作资源来管理k8s集群</li></ul></li></ul></li><li><p>使用kubectl来管理资源</p><ul><li>kubectl用法<div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kubectl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [command] [TYPE] [NAME] [flags]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commad：对资源具体的操作，如create创建、get获取、delete删除</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TYPE：指定资源类型，大小写敏感</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> NAME：指定资源的名称，大小写敏感，如果省略名称则 显示所有资源</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flags：指定可选的参数，如可用-s或者-server指定Kubernetes API server的地址和端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 例子</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 获取全部节点</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> node</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 获取全部pod</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看某个pod内容</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod_name</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 获取全部名称空间</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ns</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 查看创建的资源</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod,svc,deploy</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 删除nginx pod，如果是靠deploy控制器创建的pod，直接删除则会自动创建新的</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> delete</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod名称</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 提示：如果需要删除则直接删除depoly控制器即可，pod会被删除</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 资源管理方式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 命令式对象管理：直接使用命令去操作资源</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 资源名称</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --image=镜像名称</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port=端口号</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 例子</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xdclass-nignx-pod</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --image=nginx:1.23.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --port=80</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deployment</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xdclass-nginx</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --image=nginx:1.23.0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 命令式对象配置：通过命令配置和配置文件去操作资源</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 配置文件名称.yaml</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 声明式对象配置：通过apply和配置文件操作资源</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kubectl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apply</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 配置文件名称.yaml</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yaml例子</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	apiVersion:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apps/v1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Deployment</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	metadata:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	   name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-deployment</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	   labels:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	      app:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-deployment</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	spec:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	   replicas:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	   selector:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	      matchLabels:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	         app:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-pod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	   template:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	      metadata:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	           labels:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	              app:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-pod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	      spec:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	         containers:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	         -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	             image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx:1.23.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	             imagePullPolicy:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> IfNotPresent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	             ports:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	             -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> containerPort:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	\`\`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shell</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	apiVersion:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kind:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Pod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	metadata:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	spec:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  containers:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	  -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> image:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx:1.23.0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	    name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pod</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	    ports:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	    -</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nginx-port</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	      containerPort:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	      protocol:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> TCP</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	\`\`\`	</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl create 和 kubectl apply的区别</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl create 命令首次执行时会创建资源，当再次执行的时候会报错，因为资源名称在同一命名空间内是唯一的</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kubectl apply在首次执行的时候也会创建对应的资源，当再次执行的时候会根据配置文件进行升级、扩容等操作，即使配置文件没有变化也不影响</span></span></code></pre></div></li></ul></li></ul>`,32),C=[y];function c(B,o,u,E,b,m){return a(),i("div",null,C)}const K=s(g,[["render",c]]);export{v as __pageData,K as default};
